Intro: Brigade: MTTB-5100 - events@cncf.io - Tuesday, August 18, 2020 7:42 AM - 84 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:03:31 [W] Everybody we want to thank you in advance for coming to our session today right now you and I are going to be talking about for gate.
00:03:41 [W] So per gate is event-driven scripting for kubernative.
00:03:49 [W] And who are we we're both software engineers at Microsoft in a group that identifies out Wordly is dais Labs.
00:04:03 [W] We're both open source maintainers for Brigade and few other projects as for myself. My info is down at the bottom there.
00:04:10 [W] You can find me on Twitter Rancor and I'm a dad martial arts instructor and a comic book nerd and I'll let Radu introduce himself.
00:04:19 [W] Hello everyone.
00:04:26 [W] I'm rather you can find me on the internet. If you if you need to contact me. I blog quite a bit about open source and distributed systems and webassembly and things like that.
00:04:36 [W] I'm trying to learn to play the piano.
00:04:39 [W] I'm a cyclist and aspiring Trail Runner and a webassembly thinker back to Kent.
00:04:43 [W] All right, thanks Riley.
00:04:49 [W] All will of 2016 dais and this is before Deus was later acquired by Microsoft.
00:05:12 [W] We were doing something that we call the Shark Tank exercise, which is kind of modeled after the television program Shark Tank, and so engineer's broke into groups and Pitch new ideas to management and the idea was that the winning pitcher.
00:05:24 [W] Shark Tank, and so engineer's broke into groups and Pitch new ideas to management and the idea was that the winning pitcher.
00:05:26 [W] Spoiler alert Brigade won that year and Helm won the previous year.
00:05:34 [W] and the pitch began with the comparison of readies to an operating system and this is kind of also how the pitch for Helm began also both years the winning
00:05:50 [W] No, both years the winning teams who came up with these ideas.
00:05:55 [W] Ask the question if you can think of kubernative.
00:05:58 [W] He's like an operating system of sorts.
00:05:59 [W] what pieces of functionality that were accustomed to in real operating system are missing from kubenetes.
00:06:07 [W] So just to you know dive into this analogy a little bit.
00:06:18 [W] What is an operating system in this is kind of like the you know, the the Wikipedia level definition here, but it's a program that after being initially loaded into the computer manages all the other programs.
00:06:28 [W] So kubernative A's can be thought of as your cluster operating system OS manages processes on a machine and kubermatic manages containers.
00:06:38 [W] Cluster brunette he's is an operating system of sorts.
00:06:46 [W] So, you know when Helm was conceived the thing that was obviously missing from kubernative at the time was a package manager and when Brigade was conceived the thing that was conspicuously missing
00:06:57 [W] You thought of as your cluster operating system OS manages processes on a machine and kubermatic manages containers cluster kubernative is an operating system of sorts.
00:06:59 [W] So, you know when Helen was conceived the thing that was obviously missing from kubernative at the time was a package manager and when Brigade was conceived the thing that was conspicuously missing
00:07:00 [W] She'll scripting So In traditional shell scripting in on your desktop operating system.
00:07:13 [W] It's flow control that wraps the execution of processes, but it's not opinionated about what those processes do or how they run.
00:07:21 [W] So what would shell scripting in a cluster look like? Well, it would be flow control that wraps the execution of containers, but is it particularly opinionated about what the containers?
00:07:28 [W] Zoo
00:07:29 [W] So that's what led pretty directly to to gain fast forward to the current day and we were Cloud native sandbox project.
00:07:42 [W] We are event-driven scripting for kubernative.
00:07:49 [W] We're extremely lightweight and kubernative these the knative and Brigade chains together containers to create workflows.
00:08:00 [W] will show us more about that as we go.
00:08:02 [W] I'm some key design decisions that went into creating for Kate what programming language to use if you're going to create some kind of scripting engine, you know, what language do you write those scripts in how
00:08:17 [W] Here to between containers if you think about writing a traditional shell scripts your desktop operating system you have several ways that data can can go into a process or come out of the process so
00:08:33 [W] Commands on the command line or you can use a file as input or you can type some input in from standard in same thing on the on the tail and getting out put out of a process you could be writing
00:08:50 [W] You could be writing something to standard out and you could pipe that into another process.
00:08:56 [W] When should scripts be executed, it's pretty simple in the desktop operating system a script is executed when you type its name and hit enter, but what are the the triggers for executing the script
00:09:12 [W] Environment, so that's another thing that has to be considered.
00:09:18 [W] So on the subject of what language to use these stats that you're looking at here are a little bit out of date, but I think that's okay.
00:09:31 [W] I think it's relevant to show you kind of point in time statistics here.
00:09:43 [W] it was it was 2016 when this decision was being made in JavaScript was then as is now overwhelmingly one of the most popular programming languages the most popular programming language.
00:09:50 [W] And why JavaScript?
00:09:52 [W] So yes popular, we've established that rich ecosystem of tools and extremely flexible just to back up that second bullet point about the rich ecosystem tools.
00:10:07 [W] Again.
00:10:09 [W] This is a couple years ago and p.m. Which is the one of the package managers for for JavaScript. They
00:10:20 [W] Past 1 billion weekly package pulse. So if that doesn't speak to how vibrant the ecosystem is, and how many tools are available and how popular they are.
00:10:34 [W] I don't know what does so JavaScript basically slam dunk.
00:10:39 [W] The rich ecosystem tools again.
00:10:43 [W] This is a couple years ago and p.m.
00:10:44 [W] Which is the one of the package managers for for JavaScript.
00:10:44 [W] They surpassed 1 billion weekly package pulse. So if that doesn't speak to how vibrant the ecosystem is, and how many tools are available and how popular they are. I don't know.
00:10:46 [W] So JavaScript, basically slam dunk.
00:10:46 [W] So sharing data between containers we talked about that.
00:10:48 [W] We know where we know what sharing data between processes looks like I'm your guest operating system.
00:10:48 [W] What does it look like in the cloud?
00:10:57 [W] So passing information to a container? Well, it's not that different than passing information to a process on your desktop. You can pass things in through the commands so and line Flags or command arguments
00:11:05 [W] You know what sharing data between processes looks like on your desktop operating system.
00:11:05 [W] What does it look like in the cloud?
00:11:06 [W] So passing information to a container? Well, it's not that different than passing information to a process on your desktop. You can you can pass things in through the commandments so and line Flags or command arguments
00:11:07 [W] Manager arguments when you create a container, so that's one way of getting information into the Container your environment variables, of course, and you can pass information to a process in the container using file.
00:11:21 [W] How do you get information out of containers while you have standard out?
00:11:27 [W] You have a zip codes.
00:11:29 [W] What was the exit code of the containerized process? And of course you have files.
00:11:35 [W] So in the end everything is just JavaScript, so I will quickly go through this one little snippet.
00:11:47 [W] I'll let brought to go into much more detail than he does.
00:11:50 [W] It's demos but what we have here is we're basically importing the Brigadier Library pretty dire is just a library for JavaScript that exposes The Primitives that you need for creating these
00:12:03 [W] Primitives like like jobs for instance and we see that in use here. So we save our program includes new job.
00:12:14 [W] We give it a name and we tell it what what Docker container to makes this job on and we give it some tasks to do Echo.
00:12:23 [W] Hello. Echo.
00:12:24 [W] odbye.
00:12:27 [W] These will be executed in order.
00:12:28 [W] We sent an environment variable the variable to me the value value and then we say program about
00:12:35 [W] Runs, so this is this is pretty simple script that just runs one container.
00:12:39 [W] So there's still the question of when to execute as I said if you were talking about a desktop operating system things execute when you type the scripts name and hit enter, but that's not really the way you're going to expect things to work with Cloud, right?
00:12:56 [W] So as I understand it some inspiration for this came actually from from Apple script, which is you know, a little bit more event-driven in terms of do something on your Mac desktop and that
00:13:12 [W] Little bit more event-driven in terms of do something on your Mac desktop and that triggers subscript.
00:13:15 [W] So that's how Brigade works we are event-driven and gateways broker events from Upstream systems. Like it huh board. Dr. Homer spok and there are others we have other Integrations as well and you can pretty easily build
00:13:31 [W] You can pretty easily build your own.
00:13:32 [W] And event handlers therefore become the entry points into your Brigade scripts. So we'll so this is roughly what that looks like you have over on the left.
00:13:48 [W] You have some kind of extreme events.
00:13:54 [W] So this could be like a web hook coming from GitHub or slap or something like that.
00:14:00 [W] It comes into a Gateway which is a little program that understands the events from the Upstream system and
00:14:04 [W] Stan into events that it emits into paid which which triggers
00:14:10 [W] So this is the same script we looked at before but adaptive a little bit to event-driven so you can see we're still importing some things from Brigadier before we just imported job this time. We are importing.
00:14:27 [W] Well, you can see on the next line. We're saying event stuck on some events.
00:14:35 [W] That we wants this container to execute any of these lines that you see here are the same ones that we looked at.
00:14:43 [W] So some popular use cases that we know Brigade has been used to tackle ci/cd is probably the most popular although I really want to note that Brigade is not ci/cd platform
00:15:02 [W] Dave is not ci/cd platform.
00:15:03 [W] It's just that it's one population groups for it, you know of teams that have done lightly security audits of their source code repositories,
00:15:16 [W] Analyzing data to build reports.
00:15:21 [W] You can create complex sandbox environments on the math.
00:15:27 [W] have some events that might trigger a kind of cluster being deployed within your kubernative cluster in order to facilitate intent.
00:15:36 [W] text something that
00:15:40 [W] So at this point, I'm going to turn it over to Radu to do a little demo and then we'll come back to me at the end to get some updates about future projects.
00:15:57 [W] Okay, so just to recap a few quick things from Rogers demo slides for your reference if you want to get started quickly.
00:27:45 [W] Become positively for here the slide in space for it and install it this great change.
00:28:01 [W] Okay, so we'll talk quickly about community and Integrations. We have built-in support for cloudevents Integrations for both punching either cloudevents as I've mentioned already get
00:28:17 [W] Okay, so we'll talk with me about beauty and Integrations. We have built-in support for cloudevents Integrations for function in their cloudevents as I've mentioned already get
00:28:19 [W] Expressions for DS virtual kubelet, there's and also arbitrary event data that can be ingested generic.
00:28:31 [W] We have a growing ecosystem.
00:28:41 [W] So we have costly you saw that in Rogers demo costumes a web-based dashboard for looking at your Brigade pipelines Brigade term, which Revenue also showed started as a community
00:28:51 [W] We got folded into it CLI cell and there are several gateways listed here.
00:29:06 [W] You have a lot of things and of course we love developers.
00:29:11 [W] Brigade is for developers.
00:29:13 [W] This isn't for end users.
00:29:17 [W] So we want you to get involved so ways of doing that some stocks not paid.
00:29:21 [W] Sh.
00:29:25 [W] And some other ways to get involved you can find us on GitHub or on the committee staff. We have our own channel there and we also have a biweekly community meeting that.
00:29:43 [W] I've been doing for a while.
00:29:46 [W] We're going to be getting it started then very shortly.
00:29:50 [W] So stay tuned for that. Now, it's time to talk about Brigade 2.0 in the future of the project.
00:30:04 [W] So Brigade 2.0 is going to usher in sort of a nuanced shift from from Brigade as an event-driven scripting for kubernative.
00:30:13 [W] He's platform to one that is event driven scripting.
00:30:13 [W] For kublr headings so so notes the parentheses there.
00:30:21 [W] So kubernative Fades into the background and becomes a little bit more of an implementation detail, although you know, we're not planning on supporting anything other than committees, but we want to relate these to be a little bit less your face.
00:30:33 [W] As it were because we want to make Brigade useful to developers who don't necessarily have committees expertise.
00:30:46 [W] We're paying close attention to driving these demos.
00:30:51 [W] None of the scripts that you showed really had anything.
00:30:52 [W] was especially kubermatic specific within them. So you think there's a lot of potential here for the power of the great to be rich by people who aren't necessarily
00:31:02 [W] We're going to be building for the Enterprise.
00:31:09 [W] We're going to be doing some things that we haven't done previously up until this point.
00:31:11 [W] We've been super lightweight up until this point.
00:31:18 [W] We're going to be getting I don't want to say heavier, but we're going to be getting a little bit more robust.
00:31:20 [W] So we're going to be persisting project and event data outside of kubermatic is in the document store. And once we for sustaining log data outside of the log screwjob studies and utilizing a message bus to do
00:31:33 [W] Was like women who work both globally and per project basis and to do some Fair scheduling and things like that.
00:31:43 [W] And we hope that this paves the way for an expanded ecosystem.
00:31:53 [W] today uses Java scripts to Define pipelines, but lots of people have asked about using Gamo or text script or something else to Define their pipelines and
00:32:19 [W] Or typescript for something else to Define their pipelines and actually the previous coupon. We showed a demo of that being done.
00:32:28 [W] So once we have better support for these alternative workers into Brigade 2.0, you can probably look for official support for declarative pipelines to following sensibly.
00:32:39 [W] Okay, and the proposal for Brigade 2.0 was as we're reporting this either recently ratified or about to be ratified in which case development will
00:33:01 [W] okay, and the proposal for Brigade 2.0 was as we're reporting this either recently ratified or about to be ratified in which case development will
00:33:02 [W] Starting so probably by the time you see this video.
00:33:04 [W] It's on the way.
00:33:08 [W] We are targeting an alpha release by the end of the year and hoping to be a ga in the middle of 2021.
00:33:15 [W] And with that we'll open it up to questions and answers.
00:33:22 [W] Okay.
00:33:31 [W] Good morning.
00:33:33 [W] Hello, I'm not centered in mine.
00:33:41 [W] All right any questions from anybody?
00:33:44 [W] Okay.
00:34:38 [W] We have a question from Bridget and let me see if
00:34:41 [W] Your I'm publishing the question, I believe everybody can see it now, but I'll answer it here.
00:34:52 [W] She asks on the 2.0 proposal.
00:34:56 [W] Do we see this as being brigades final form or will it change further? You know, I I see I see it as well.
00:35:06 [W] It's hard to answer because I can't tell the future but I see it as being much closer to where we want to be.
00:35:12 [W] Term it the the main thing about Brigade 2.0 is that it makes kubernative more of an implementation detail than it is today.
00:35:28 [W] So, I believe that you know in the unlikely event and I mean really unlikely event that you know, kubernative eyes like becomes obsolete or Fades Into Obscurity or something like that that you know, you might see some day
00:35:39 [W] I see. I see it as well.
00:35:41 [W] It's hard to answer because I can't tell the future but I see it as being much closer to where we want to be long term it the the main thing about Brigade 2.0 is that it makes kubernative more of an
00:35:42 [W] 3.0 that that, you know introduces support for you know, some kind of alternative orchestrator or something like that, but you know at the moment I see 2.0 is as
00:35:55 [W] Close to where we know we want to be as as we are aware if that answers the question.
00:36:06 [W] Okay, and Jonathan asks, how does Brigade scale in terms of the amount of data possible to pass between jobs and workers?
00:36:32 [W] You know, I'll let Radu jump in here if he thinks that that I misspeak at all but, you know some of the different ways that are available to you of sharing jobs between
00:36:47 [W] Data between jobs would include using the file system so you can have a in have a read/write many volume such as an NFS volume
00:37:03 [W] Attached to all of your jobs and so they can actually share a file system.
00:37:16 [W] So I guess the question in terms of limits is you know, how big of a file can be right and I'll let Radu correct me if he thinks that's wrong.
00:37:22 [W] Yeah.
00:37:23 [W] I think you're right in both cases.
00:37:27 [W] Essentially you can pass data either as standard input or arguments for the job.
00:37:30 [W] You're about to start or write the data in a volume.
00:37:33 [W] That you can share with me in jobs. Either way.
00:37:48 [W] There's no technical limit that either Brigade or Linux imposes on the file size. That being said, we've usually guided people towards using standard input if they have very quick output from one container to the other and
00:37:51 [W] For that and use actual kubernative volumes for something more robust where you want to pass multiple files or larger amounts of data that being said both of them should work as well.
00:38:05 [W] There's another question does running the script have the possibility of accessing the shared storage. So the
00:38:24 [W] Whenever running the script the script will actually orchestrated starting the jobs and attaching the volumes.
00:38:41 [W] So technically I think technically you do have access to it, but it's not exposed in the API that you're using.
00:38:47 [W] So if you need to access shared storage, the recommended way of doing that is by starting a job and accessing the storage there. I would be curious to understand the use case for accessing the shared storage.
00:38:54 [W] From Brigade is itself.
00:38:57 [W] Yeah.
00:38:59 [W] Can I comment on this as well?
00:38:59 [W] rather?
00:39:04 [W] So so yeah, the as things stand currently the shared storage is created by the worker.
00:39:15 [W] So the worker is the thing that's executing your Brigade dot JS.
00:39:16 [W] And then control gets passed to your script because the shared storage is created by the worker.
00:39:33 [W] It's too late to mount that volume into the worker.
00:39:42 [W] So your script does not currently have direct access to that volume, but this isn't the first time we've heard this question people have asked about this before and
00:39:51 [W] Not be entirely clear about the use case.
00:39:56 [W] It's been it's been requested often enough that I foresee this changing in Brigade 2.0 especially because as we're trying to add better support for alternative workers
00:40:09 [W] To lower the bar for what it takes to, you know Implement, you know custom worker which means offloading as as much responsibility to kind of the Brigade core.
00:40:26 [W] As possible. So so definitely I foresee this changing and Brigade 2.0 where by the time a worker launches the shared volume has already been created and can be
00:40:41 [W] Mounted into the worker itself if it needs to be accessed. So I do foresee that changing and I hope that answers your question and backing up on my question a little bit while we while the workflow can
00:40:56 [W] Is accurate for default shared storage in Brigade?
00:41:03 [W] There's nothing stopping you from importing the kubernative JavaScript library client library in Brigade Jays and creating volume there and then manually mounting it so you have that option and I think the document
00:41:14 [W] On the Dark Side Brigade data Sage we have a few examples of actually importing the kubernative JavaScript client and starting creating names faces and things like that.
00:41:28 [W] So we definitely have that option there. Although it's not necessarily straightforward.
00:41:29 [W] Okay, and I think that's it for questions I guess so we're going to wrap up and thank you all for coming to our talk.
00:42:29 [W] Thank you.
00:42:32 [W] Enjoy the rest of your conference.
00:42:33 [W] the rest of your conference
