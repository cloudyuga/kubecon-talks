It’s a Polyglot World of Stateless Functions and Stateful Actors: BKBO-2366 - events@cncf.io - Tuesday, August 18, 2020 11:38 AM - 59 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:06:04 [W] Hello everyone.
00:06:07 [W] My name is your own Schneider.
00:06:09 [W] I work at Microsoft and I made a perk or maintainer. And with me is a man-bird was who's going to introduce himself?
00:06:19 [W] Hi, this is Aman and I work at Microsoft and and work on that project with your own as a cool maintainer for it.
00:06:28 [W] Yeah, and today we're going to be talking to you about stateless functions and stateful actors. So before we start talking about anynines.
00:06:33 [W] Any sort of solution let's talk about Cloud native developers and some of the challenges that clothing of developers face today. So developers are being asked to write very resilient scalable microservices based applications that
00:06:48 [W] With other services, whether it's through direct service to service invocation or whether it's event-driven and those types of applications have multiple languages that the written in so they're becoming increasingly
00:07:03 [W] And that's also a challenge because you sometimes need to also leverage existing code introduce new code to the mix and You languages need different sdks and those stuff basically have developers focus on
00:07:20 [W] their Core Business logic like infrastructure
00:07:23 [W] and then we have things like functions and workflows and actors which were going to talk about which really represent very powerful stateful program models and stateless programming models.
00:07:39 [W] models. But each of them have their own specific challenges.
00:07:40 [W] So really a few things that are holding microservices that are having to incrementally migrate your existing code to a microservices architecture, you know, you need to deliver in your business logic and then you want to leverage the strengths of
00:07:57 [W] Actor but you don't want to rewrite your entire code base.
00:08:07 [W] So you go on to these new programming model run times, but they have never language support.
00:08:09 [W] Some of them are bound to one cloud provider another they have very tightly controlled feature sets, which really have you tie into a very specific way in which you need to write your code and some of them only run on specific infrastructures, and they're
00:08:22 [W] really have you tie into a very specific way in which you need to write your code and some of them only run on specific infrastructures and they're not that portable, you know between the cloud and the edge and we're seeing more and more code being
00:08:28 [W] No between the cloud and the edge and we're seeing more and more code being transferred to the edge.
00:08:29 [W] So we introduced Dapper to allow developers to solve these hard problems of distributed applications and Dapper really you can think about it as a runtime the drones
00:08:46 [W] shins that gives developers sort of superpowers just the same way that kubenetes and a lot of other infrastructure oriented projects give the developers and operators the ability to run distributed apps that scale with containers
00:09:01 [W] Feels more to the developer side of things and give developers apis that help them focus on their business logic.
00:09:09 [W] Some of the core goals of dapper our first of all to give developers best practice building blocks meaning all the best practices that you can find in distributed systems are basically built into this site car.
00:09:27 [W] So whether you're doing stateful operations or pub/sub or service invocation or any of the other features that Dapper gives you we make sure that they're due to best practices and that that really
00:09:41 [W] Link blocks meaning all the best practices that you can find in distributed systems are basically built into this site car.
00:09:42 [W] So whether you're doing stateful operations or pub/sub or service invocation or any of the other features that Dapper gives you we make sure that they're due to best practices and that depth really
00:09:43 [W] and then the second time type of goal that we have is to be language or framework independent meaning be as inclusive as possible to all developers out there no matter which language you're using or which framework adapter supports it and then being consistent and
00:09:56 [W] No matter which language you're using or which framework adapter supports it and then being consistent and portable so that you can take your code and put it over to different environments.
00:10:05 [W] We also want to adopt standards where we can so things like w33 Trace headers and standards other standards that you can find inside of the cncf echo system are being leveraged by the upper extensible and pluggable
00:10:15 [W] extensible and pluggable components is also something we give great care for so that you can plug in different components so that you do not need to tell yourself into any specific underlying implementation and then being platform agnostic for cloud and Edge meaning
00:10:29 [W] Oh, then poured it from one environment to the other whether you're running on AWS Google Cloud Microsoft Azure or the edge then maybe even the most important thing is to be community-driven and vendor neutral which is critical to the upper to
00:10:44 [W] The option and really make sure that people coming from different companies can collaborate on this project with us.
00:10:53 [W] So what is that?
00:10:56 [W] prevailing we can see our application code here at the top meaning if you're a developer.
00:11:03 [W] You can write your code in any code in any language really or use any framework so it can be no go python Java rust SQL plus whatever you're using.
00:11:17 [W] you can talk to Dapper because Dapper is a sidecar that exposes apis for developers with HTTP and grpc. So any type of programming language that comes in
00:11:24 [W] Or even will be able to leverage the upper using its knative apis some of the capabilities the Dapper gives a really called building blocks, which you can see here inside of the diaper blog.
00:11:39 [W] So service to service invocation is the ability to find a different service in the cluster using a unique ID and really get abstracted away from all of the service Discovery and reverse proxying mechanisms. Dapper will do Discovery for you.
00:11:53 [W] It'll do retries and it will build in resilience.
00:11:54 [W] Insert into your calls State Management is another kind of building block that we have which really gives you a very nice abstractions over State Management.
00:12:09 [W] Really called building blocks, which you can see here inside of the Dapper blog. So surface to surface invocation is the ability to find a different service in the cluster using a unique ID and really get abstracted away from all of the
00:12:18 [W] Is dynamodb then if you're running on Azure, for example Cosmos give you any for running on Prem. It can be Cassandra redis or any one of the other components.
00:12:26 [W] They're supported by Dapper pub/sub is the ability to do a publish/subscribe type of event driven scenario. We have Publishers asynchronously send events to Consumers that might or might not be listening at the moment where the message was sent resource
00:12:40 [W] Hers allow you to trigger application whenever in the vent comes in for an external system think like a twilio message or even a Twitter tweet that comes along or an event hubs message or
00:12:54 [W] Trilio message or even a Twitter tweet that comes along or an event hubs message or more AWS canessa messages and then just like you can trigger application based on that code. You can also
00:13:01 [W] This messages and then just like you can trigger application based on that code. You can also invoke other systems using those findings your application can tell that were a take this piece of data and send it to that particular binding actors are
00:13:10 [W] special programming model that encapsulates Computing stay together and we're going to touch specifically on actors during this slide observability is you getting distributed tracing for free with Dapper because you
00:13:26 [W] Their ability is you getting distributed tracing for free with Dapper because you talk to the Dapper apis that / knows to talk the language of open census and the protocols of opentelemetry and they'll inject
00:13:35 [W] You talk the language of open senses and the protocols of opentelemetry and it will inject headers into the coals and create really this application lab for you where you can have end-to-end visibility across the coals into your applications in from
00:13:44 [W] Here applications in from their applications secrets are really nice thing.
00:13:56 [W] Think about, you know your pod running and kubernative clustering in do to extract secrets from hashicorp Vault or the criminals Secret store in you don't wanna start mounting stuff on the Pod. So Dapper has a really easy API where developers can just
00:14:03 [W] get them back and then everything else is really extensible those building blocks and the components that they use a really pluggable and there is actually a separate repository under the adapter
00:14:19 [W] In which community members can contribute more and more components and then all of this runs on cloud or on the edge. So Dapper does not have to run in a container that's important. It can also run just as a process on your machine.
00:14:34 [W] So you get a really lenient Linda velopment experience running Dapper on your machine, whether it's Mac windows or Linux and then taking that thing and running on cribben Eddie's is really not that different from running
00:14:48 [W] This is Dapper hosted on proving that he's so Dapper like a servicemeshcon eject a sidecar container into your pod.
00:15:03 [W] So you have your application pot here are application container inside the pod in you have the Dapper containerd being injected and because the running under the same network name space your application code in the container just talks via Local Host to diapers.
00:15:16 [W] So think about it like having a special friend and Local Host that does things like State Management and pubs.
00:15:21 [W] In service invocation and tracing and secret extraction for you.
00:15:29 [W] Zephyr is really really lightweight. It uses four. Megabytes of ram of committed memory. It's a twenty three megabytes image its container image sizes smaller than Envoy and linkerd Ypres, I think
00:15:40 [W] He uses only for system pods. So we have the sidecar injector, which is really lightweight and we have an certificate Authority called Centre which gives you end-to-end encryption. It does empty LS for you much like a servicemeshcon.
00:16:10 [W] Computing it's relocating inside the cluster.
00:16:13 [W] So Dapper and servicemeshcon.
00:16:31 [W] Yeah, so when when idea of where that but is that it takes more of a Narrative Approach and it doesn't preclude service developers from using any of the existing Cloud native Technologies.
00:16:48 [W] So in this slide, you can see that the upper runs in the same pot with the user application the linkerd E. And because the Pearl runs at an application Level and this and servicemeshcon it and more of a layer for level so they all can
00:16:58 [W] Yeah, so when when idea of whatever is that it takes more of a Narrative Approach and it doesn't preclude service whether purse from using any of the existing Cloud native Technologies.
00:17:00 [W] So in this slide, you can see that Dapper runs in the same pot with the user application the linkerd E. And because AB Dapper runs at an application Level and this and servicemeshcon it and more of a layer for level so they all can
00:17:01 [W] And the same part and provided additive capabilities to the user applications.
00:17:04 [W] Yes, so like a man said servicemeshcon Ali work at the network level where they intercept traffic and Dapper has more of an application Level concern.
00:17:20 [W] There are some overlaps with mutual TLS and tracing but everything in Dapper is also configurable so you can turn it off or on based on whether or not you're running servicemeshcon.
00:17:35 [W] They're so because Deborah supports a very wide range of components a lot of them overlap with Kata, which means that you can use Kata to Auto scale your Dapper instances.
00:17:45 [W] So this lecture the service invocation building block for diaper service in location provides the capabilities to developers to directly invoke their service methods without worrying about service discovery on a particular platform.
00:18:02 [W] So using the Apple services are deployed using an ID and after that one service can talk to other service using that diaper service ID.
00:18:16 [W] ID. So in this example, you can see the front end is trying to make a call to this this back end card service and in-toto.
00:18:17 [W] Front end to its step aside card Apple sidecar figures out. Where is the Target service running? It forwards the call to the Target Services sidecar and it lands on the target service and the response comes back to the to the front end using the same route
00:18:46 [W] Listen what you can get abilities for Dapper now moving on to observability diaper provides certain building blocks for observability like metrics Trace in the logs.
00:19:02 [W] So that service operators can look at the health and metrics coming out from the Dapper system Services is a system parts to do to get more insight into what is going inside the diaper sidecars and
00:19:13 [W] seven logs so that service operators can look at the health and metrics coming out from the Dapper system Services assist imparts to do to get more insight into what is going inside the diaper sidecars
00:19:15 [W] with open sensors and future we will integrate with opentelemetry so that Matrix and logs coming out of dapper sidecar can be viewed with any of the open source tools available like Jagger or datadog and and as
00:19:29 [W] Any of the open source tools available Like Jaeger or datadog and as your application insights as well.
00:19:31 [W] And this is State Management for the upper.
00:19:41 [W] So for example an application can talk to the Dapper API and this is a quite a simplistic view of stateful operation the Dapper does so it supports a key value a pmo led the moment where the application basically says.
00:19:51 [W] Hey I want to save two objects and they both have keys.
00:19:58 [W] So we have Star Wars themes examples here because we all have stories in the upper and then we're basically
00:20:05 [W] saving two pairs of keys in their values of the value can be a primitive or you can even be a complex value and that and then Dapper based on the state story that you can figure that to work with will make sure that the state gets written
00:20:18 [W] For also supports some other Advanced capabilities and top of those basic Primitives.
00:20:28 [W] For example, you can choose between a first-rate Wings in the last straight wins model or you can choose between eventual and strong consistency and Deborah has those capabilities on top of State students that might not even natively support those
00:20:39 [W] Partial features and for each one of the Deborah building blocks Dapper has more features that it provides on top of the base implementations that it took something too.
00:20:52 [W] Similarly, this is the get statement where we saved some State and then we're calling Dapper this the HTTP API to get the state back.
00:21:06 [W] It's also important to note that all of those calls are available via grpc as well and not just HTTP and we also have some sdks on top and really the lowest common denominator for in terms of Protocols are htsb so that we're inclusive to all Developers.
00:21:17 [W] It's also important to note that all of those calls are available via grpc as well and not just HTTP and we also have some sdks on top. But really the lowest common denominator for in terms of Protocols are HSPA so that we're inclusive to all Developers.
00:21:19 [W] Out there. Now. Those are some examples of the Dapper building blocks.
00:21:24 [W] We're going to talk about actors next we can't go into all the building blocks here, but we encourage you to check all of them out inside the Dapper Repository.
00:21:32 [W] So before we move on to actors, this is for example, what a map of our application for tracing look like inside the cluster.
00:21:44 [W] So you get tracing basically for free with Dapper. You just set up your tracing back and configure it with a simple demo and then the upper will show you the map for your application calls.
00:21:57 [W] What's nice about it?
00:21:58 [W] Is that unlike servicemeshcon truly traces between request response types of invocations dapper will
00:22:03 [W] Hook up your event driven messages.
00:22:06 [W] They're coming through external systems. That might not go through the servicemeshcon.
00:22:12 [W] That's that's kind of nice.
00:22:13 [W] So the next to talk about the actors building block for Dapper actor pattern is a computational model for concurrent or distribute systems.
00:22:28 [W] and which a large number of these actors can execute execute simultaneously and independently of each other actors can communicate with each other and they can create more actors.
00:22:39 [W] One thing which is unique about actors is that they are single threaded so one actor method can execute at any given particular amount of time so
00:22:46 [W] This mesh, so that's that's kind of nice.
00:22:50 [W] Okay, so the next to talk about the actors building block for Dapper actor pattern is a computational model for concurrent or distributed systems.
00:22:52 [W] and which a large number of these actors can execute execute simultaneously and independently of each other actors can communicate with each other and they can create more actors.
00:22:55 [W] One thing which is unique about actors is that they are single sided so one actor method can execute at any given particular amount of time so
00:22:59 [W] To tell em actors existed and their own language Frameworks like a car for Java and I cannot mat is the tort equivalent for it. And then they are other reliable active patterns available like all these in service for big actors.
00:23:06 [W] For Java and I cannot mat is the tort equivalent for it. And then they are other reliable active patterns available like all these in service for big actors.
00:23:09 [W] What Dapper does is it encapsulates the core functionalities of an act of framework in the Dapper sidecar, like turn-based concurrency actors timers reminders and State Management and distribution and failover.
00:23:15 [W] So that users can write their actor Services services in any language of their choice. They just need to talk to
00:23:22 [W] upper side car over HTTP or grpc and diaper will take care of all the core functionalities of an actor system and dapple can can scale up or scale down your active instances as and
00:23:34 [W] Any language of their choice?
00:23:35 [W] They just need to talk to that per side car over HTTP or grpc and Dapper will take care of all the core functionalities of an actor system and dapple can can scale up or scale down your
00:23:36 [W] That scale up or down your services.
00:23:40 [W] So Dapper has a placement service which takes care of Distributing your act instances across multiple parts of your service of your service and as they come up and down a Dapper will redistribute their active instances across these parts that it's a very powerful
00:23:52 [W] As they come up and down adapter will redistribute their active instances across the spots that it's a very powerful programming model for iot devices and anticipate systems.
00:24:00 [W] Yes, so we can actually if you think of drones for example, you could model the Drone as a pod and then you'd have maybe if you have a thousand drones you'll have a thousand thoughts. But with the actor is you can actually host millions of
00:24:12 [W] Actors you can actually host millions of actors inside of a single container, which is really powerful. Really. Okay.
00:24:21 [W] Let's stop talking now and show some demos.
00:24:23 [W] So I'm going to be sharing my screen.
00:24:28 [W] Okay, and here we have Visual Studio code and we're going to see a very simple demo about running Dapper locally and then on kubenetes with binding so let's say I'm in ogs developer and I want to start getting events coming in from Kafka.
00:24:49 [W] This is my node app here. And this is extremely simple as you can see. It's just no GS.
00:24:58 [W] My application code is very lean knows decays know libraries nothing here.
00:25:00 [W] Really? All we have is a simple web server that listens to some end point called sample topic and then we're printing hello from Kafka in the body and just sending back a 200 response what could be simpler than that? Really? I'm not tying into any
00:25:15 [W] Be a long-running type of application.
00:25:19 [W] So this really meets me as a developer where I am.
00:25:29 [W] And so I'm listening to sample topic here. And the only thing as a developer that I need to do to start getting events is just write this really simple the upper component, which is a seared a but also works outside of kubenetes and here we have the
00:25:36 [W] Pick which is the endpoint that were listening on here and here we have some metadata about how to connect to Kafka and some configuration options.
00:25:47 [W] So I will go over here to my terminal with my node app and I'm going to use the Dapper CLI to allow me to run both Dapper sidecar and my applications.
00:26:04 [W] This is the developer facing tool that's really good for the inner develop stage.
00:26:11 [W] So I'm doing Dapper on and I'm giving my application and ID here and I'm telling my telling the upper which Port map locations listening on and then I'm just launching my node application. So this will on.
00:26:19 [W] Number one time and my application side by side.
00:26:22 [W] So we can see that we're running and we have both the Dapper logs and the application logs written to the same session window and I'm going to do the same thing here for the python app.
00:26:35 [W] And the python that is currently extending events to Kafka also through the upper and we can see this here really simple python application and we can see that these this has the debris or L here.
00:26:52 [W] So the python application is just having a really simple Loop and it's calling Dapper on Local Host calling bindings and calling the sample topic name.
00:27:01 [W] Python up sending messages to a very slim node.js application. If we go back here. We can see that we are getting the responses back. Now. Let's say we want to deploy this thing to creep in at ease and we've already
00:27:22 [W] Applications so we have the same Theory which were you going to deploy to kubenetes? And here we have kubenetes manifests.
00:27:33 [W] So this is a regular Community deployment and the only thing we need to do is annotate the deployment and say hey, we want a Dapper enable it and then Dapper will inject the sidecar into our pods.
00:27:48 [W] So we have the same for the node.js and the python application really simple configuration.
00:27:56 [W] So the way to get started with gap really is you can install it with Helm on cribben Eddie's, but if you just want to install it in Dev test mode you can do that / in it.
00:28:03 [W] - - kubenetes and battle install the upper on tour cluster
00:28:08 [W] and so we can see that it's all running and if we take a look at the prods and we'll with them to come up and everything seems to be up and running and we can use the Dapper CLI.
00:28:26 [W] See that we have the latest version of the app running and control plane is healthy.
00:28:32 [W] So that's all it takes.
00:28:32 [W] really now. The only second step is to deploy everything onto our kubenetes cluster.
00:28:40 [W] So we're in the deployment folder here.
00:28:43 [W] Either we have Kafka installed inside of our tough Canaan space and if we take a look at the products that we have here, we can see that the driver pods running and
00:29:07 [W] Going to so we have two containers Insider pods one for the Dapper sidecar and the other for the user app. And now if we take a look at the logs for the node app.
00:29:19 [W] we can see that the same code that was written on our machine just because containerized and it's talking to Kafka and if we take a look at our components we can see we have our sample Poppy componentconfig and
00:29:36 [W] I can just switch this simple topic to be for example instead of Kafka.
00:29:45 [W] It can be rabbitmq or any other of the support adapter components and then without changing anything in my code. I just get events coming in from the system that I can figure to represent ever.
00:29:55 [W] So I'm going to be strimzi Shinning over to a month.
00:30:03 [W] I'm stopping my screen share here.
00:30:06 [W] Let me start shooting my screen now.
00:30:07 [W] Okay, is it visible now?
00:30:15 [W] Yes, and I don't is very sounds good.
00:30:21 [W] So I'm going to demo the next two building blocks for diaper.
00:30:23 [W] One of them is actors. So Deborah provides a first-class support for language sdks to write your actor applications.
00:30:36 [W] is an example using C sharp SDK, but we have language SDK is available for Java and Python and and more are more on the way.
00:30:41 [W] So insatiable, you would write your actor by writing an interface which contains methods for your actors. And this case it's called I demo actor it contains two methods save data and get data if we look at the actual actor implementation.
00:30:55 [W] Now you just Define your class demo actor deriving from our Base Class and implementing the methods inside this item actor. If we look at the methods called save data and get data you can see that save data is interacting with the state manager to save the state
00:31:11 [W] It's using State manager again in the getdata method to get the state.
00:31:17 [W] So what it's doing behind the scenes is that it's making calls to their death aside car to save the state using the configured state store for for Dapper and to configure a state store is the familiar component. Yeah, Mel.
00:31:31 [W] It just says that use redis as the state's tool for actors and upper side cover start using it now how to make calls to the costume director service from a client servicemeshcon.
00:31:42 [W] It's pretty simple.
00:31:47 [W] You just create an actor proxy and tell it that you want to talk to an actor ID and you and you make a call to a particular method and this gets calling it making calls to save data and to get data and to run this service you integrate with
00:31:58 [W] Like creating your web host Builder.
00:32:05 [W] You just say dot use actors and dude and then you register your actor type.
00:32:10 [W] This will configure the actor SDK runtime to talk to depe sidecar and bring the whole functionality of factors to you.
00:32:15 [W] Now, let's try to run this and we'll run this using our Dapper CLI. It's just saying Dapper run poured is 3500 for diapers application code is 5000 and then it's going to just run the actor.
00:32:32 [W] Of us.
00:32:33 [W] So once the actor service is running you can run the client application, which I just showed you.
00:32:40 [W] It's just going to make the calls to actor sidecar active service using the Dapper sidecar and then invoking those two methods as these actor Services can be written in any language or divert allows for cost language invocation.
00:32:53 [W] This is running. You can run the client application, which I just showed you.
00:32:54 [W] It's just going to make the calls to actor sidecar active service using the Dapper sidecar and then invoking those two methods as these actor Services can be written in any language or debar allows for cost language invocation.
00:32:55 [W] This case I'm going to show you invocation of the actor method using HTTP.
00:33:00 [W] This could be any language of your choice.
00:33:11 [W] So it's going to make a call to local depe sidecar over Port 3500 and the saying that invoke this save data method for demo actor type and the actor IDs ABC and once it does that it's going to save the state into the active
00:33:16 [W] Our demo actor type and the actor ID is ABC and once it does that it's going to save the state into the active using deficit car and then you can query the state using using the getdata method
00:33:23 [W] You can query the state using using the getdata method here.
00:33:27 [W] So it's going to query the state back from the active site curve.
00:33:29 [W] So the next building block I'm going to show you is as pub/sub from from Dapper with pub/sub. You can have your application subscribe to a topic and other application Public Image
00:33:42 [W] From from diaper with pub/sub. You can have your application subscribe to a topic and other application Public Image to that topic and a subscriber will get notified.
00:33:49 [W] So in this example, we have a node a very simple node.js application.
00:33:54 [W] It's just telling the upper.
00:34:00 [W] Hey, I'm interested in topic a and topic V and these are the routes on which you should invoke me whenever there is an event for that topic. Similarly. There could be.
00:34:03 [W] Python application in this case.
00:34:05 [W] It's a python application telling Tapper. Hey, I'm interested in topic A and C and these are the routes on which you should invoke me whenever you see a message for those topics. Now. Let's run this node subscriber
00:34:20 [W] They could be a python application in this case.
00:34:20 [W] It's a python application telling Dapper. Hey, I'm interested in a topic A and C and these are the routes on which you should invoke me whenever you see a message for those topics.
00:34:21 [W] Now. Let's run this node subscriber using deficit are
00:34:22 [W] Using data CLI and then run the python subscriber using the upper cioth. I now to to send messages to these topics.
00:34:33 [W] I have a very simple react Form application, which is going to send a topics too busy going to send emails to these topics.
00:34:41 [W] take a look at this.
00:34:43 [W] The server application which is publishing the events to publish the events using the upper. You just make an HTTP call to this publish and point and then you give it a topic name and and the body of your of your message
00:34:59 [W] Is publish and point and then you give it a topic name and and the body of your of your message and it will be sent to the diaper sidecar which it will in turn invoke your subscriber applications.
00:35:07 [W] Says the web frontend for the react form.
00:35:22 [W] I'm just gonna send a test message to this topic a so let's goes to the react form. It publishes the message using the using its own Dapper sidecar.
00:35:26 [W] So if we go back to our python subscriber and note subscriber, you can see that they both have received the messages for for topic a this is the note subscriber and this is the python subscriber. That's all from
00:35:39 [W] All right, so stop showing and go back to the slides.
00:35:42 [W] Yep.
00:35:48 [W] Okay, and so we invited to join the Dapper community over on GitHub gather YouTube.
00:36:02 [W] We're pretty much everywhere.
00:36:04 [W] just join us open issues download the software. Try it and yeah, keep in touch with us.
00:36:14 [W] We really want to on board as many developers as we can to Dapper and with your help have it really solve all the problems of distributed computing.
00:36:20 [W] We'll open it up for questions now.
00:36:22 [W] Thank you all.
00:36:24 [W] so you're
00:36:36 [W] You were pretty much everywhere.
00:36:37 [W] Just join us open issues download the software.
00:36:38 [W] Try it and yeah, keep in touch with us.
00:36:39 [W] We really want to on board as many developers as we can to Dapper and with your help have it really solve all the problems of distributed computing will open it up for questions now, thank you all.
00:36:40 [W] so you're
00:36:41 [W] It will enhance solution with strict latency requirements and is s GDP or grpc calls to a sidecar on localhost going to be concerned.
00:36:49 [W] Yeah.
00:36:50 [W] it's a good question.
00:36:53 [W] So for that we are first of all, we are going to release a performance benchmarks for Dapper pretty soon.
00:37:00 [W] So we'll know the exact latency and processing added latencies for Dapper if you were just having your
00:37:07 [W] For example publisher message or go to another app directly or through the upper.
00:37:18 [W] We know today that the network cost of calling into the upper is about six hundred microseconds and we can also share that under load of 1000 our requests per second
00:37:27 [W] Sage or go to another app directly or through dapper.
00:37:28 [W] We know today that the network cost of calling into the upper is about six hundred microseconds and we can also share that under load of 1000 our requests per second
00:37:28 [W] Dapper signed the card will add four point two milliseconds end-to-end Network latency.
00:37:40 [W] Meaning the application calls to Dapper Dapper calls to Dapper on another VM.
00:37:46 [W] So a network cop and then Dapper causing to the second app and all the way back. So it really didn't the answer is it depends on your latency requirements, but what we're seeing so far is pretty good.
00:37:54 [W] Thank you, Don.
00:38:00 [W] So they could you please provide the guidance of provide a glimpse of what depe needs to know about its back ends. Say diaper needs to understand that back and access transaction or two phase commit
00:38:09 [W] Discovering the capabilities of the component it's talking to you.
00:38:15 [W] Okay, Liam.
00:38:28 [W] can we still access native apis with services? Like of course, we limited by the interface you're limited by the interface, but Dapper provides sort of Escape hatches into specific features. So if you actually go
00:38:42 [W] Isn't take a look at the specifications that we have for the different components.
00:38:53 [W] You'll see that it's very easy to add very feature specific stuff.
00:38:58 [W] So you don't have this lowest common denominator denominator stuff. Do you have plans for actor relationships or topologies among? You probably won't take this one.
00:39:07 [W] Yes.
00:39:12 [W] Yeah, so Dapper follows the reliable.
00:39:13 [W] Sorry virtual actor model coming from Orleans or service of reliable actors. So you should be able to create actors from within actors that can give you sort of a child parent relationship there.
00:39:25 [W] What is the governance model of dapper?
00:39:32 [W] That's a very good question.
00:39:37 [W] So currently we're actually building a governance model now which were going to announce in the next I want to say.
00:39:44 [W] I want to say the next month at least announced the plans for it.
00:39:50 [W] But if you check out the Dapper announcement blog from October of 2019, we made a
00:39:54 [W] commitment for open governance and to donate the upper to a foundation. So that's something that we announced and we intend to follow up on that.
00:40:04 [W] So for local development Dapper CLI, when you do diaper in it, it sets up your local development environment and it sets up a local Red is instance running and in Dhaka container, which can be used for local testing in your Dev environments
00:40:34 [W] Can we expect to 1.0 release?
00:40:39 [W] Yeah, that question comes up a lot by the end of the year calendar year.
00:40:45 [W] So yeah, we're shooting for I would say the October November time frame something like that.
00:40:56 [W] Everything's open. If you go to the Dapper organization page, you will see projects.
00:41:02 [W] You'll see the Milestones anything that's marked as P1 needs to be done before the 1.0 release.
00:41:05 [W] So it's all really it's all out there. And again, we'd love for you to come and help us because the sooner we get those items done. The sooner we can get 1.0 and so far we've seen an amazing participation from the community.
00:41:20 [W] So we need to start wrapping up.
00:41:26 [W] We will be on the serverless slack channel to continue the discussions.
00:41:30 [W] We'd love to talk to all of you there.
00:41:34 [W] Yeah, so there's no no more questions.
00:41:44 [W] can wrap it up there.
00:41:47 [W] Thank you all thank you for watching and thank you for participating.
00:41:52 [W] Thanks everyone.
