Escaping the Jungle - Migration to Cloud Native CI/CD: NFYQ-3860 - events@cncf.io - Tuesday, August 18, 2020 7:45 AM - 80 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] jungle
00:00:28 [W] jungle jungle jungle jungle jungle
00:00:38 [W] what do you think of when you hear the word jungle is it wild animals poisonous insects impassable Woods
00:00:51 [W] Danger lurking in the dark or is it maybe Welcome to the Jungle like an that Guns N Roses song.
00:01:04 [W] Well, that's probably if you're as old as I am well for us at automated software in the last couple of years Jungle begin began to signify a certain
00:01:16 [W] Michael if an IT organization stage that any successful company has to go through and also many unsuccessful ones, but who wants to hear these stories, right?
00:01:31 [W] The world is full of sad stories as it is, so we'll be talking about the successful ones.
00:01:35 [W] and
00:01:38 [W] well, how does one get into the jungle if the the thick why am I talking about this right?
00:01:49 [W] So I forgot to mention.
00:01:50 [W] I'm a consultant and we as a consultancy that what we do is we help organizations optimize the way they deliver software and we often get called in when
00:02:04 [W] Itself in a jungle. So let's first see how do we get ourselves into a jungle?
00:02:19 [W] Well, as any great adventure it all starts on a on Still Waters on a sunny day.
00:02:26 [W] We're probably start up right and we've succeeded in gathering a team of motivated individuals and we want to move fast and to deliver fast. So we provide
00:02:35 [W] add our Engineers with autonomy to choose their stack to make their engineering and Architectural decisions to move fast and break things.
00:02:49 [W] And so we have autonomy and we don't even need to build any agile processes because we're inherently Edge.
00:03:01 [W] over right anybody I need to speak to is just a slack message reach away and
00:03:05 [W] Well, we're all aligned to that same urgent release to the same unachievable deadline that will unsurprisingly blow but still somehow deliver that functionality that the customer needs
00:03:20 [W] All works out then in the end hopefully will succeed which we all know has a chance of one to ten of happening.
00:03:36 [W] But again, we're talking about successes here.
00:03:37 [W] We're talking about the good stuff.
00:03:39 [W] So we'll have success and at that point, we'll start experiencing explosive growth. So either we're profitable or we won the trust of our investors and
00:03:52 [W] and we get another fat round of funding and we start hiring like crazy and that's a great feeling actually seeing our small Forest trip rolling out into a grand adventure
00:04:06 [W] If they can arise ins and turbulent Powers powerful streams taken our small boat forward until as it is that is in the jungle movie. It reaches the waterfall and crashes down
00:04:22 [W] We find ourself in the jungle.
00:04:28 [W] Everything happens so fast, and now we're in the jungle Welcome to the Jungle and what happens in the jungle.
00:04:43 [W] We look around and we suddenly see we have all the languages and all the Frameworks and all the databases and all the message.
00:04:47 [W] He is in thousands of cloud services hundreds of cij jobs and the technical debt that were so eagerly accumulating in order to move fast is now piling all of our all around us. So why is being in the jungle?
00:05:01 [W] Scary. Well, first of all, it's now very hard to do the next thing because each time we want to choose to or a process to do something.
00:05:14 [W] It's very hard to decide because everybody wants to use their own and we spend weeks discussing these decisions and they always indecision causes an a lot of waste, right?
00:05:26 [W] And of course all these components that we've built out our now no need to be integrated and this integration is painful and well we continue hiring because the money is on the table, but onboarding the new employees is
00:05:41 [W] It's hard, but also after we've succeeded in hiring all those folks that know so much.
00:05:55 [W] There is so much to learn and our organization knowledge base is probably very scarce and chaotic and finally the worst thing we don't really have a Common Language inside the organization
00:06:03 [W] communication and collaboration very very hard
00:06:09 [W] So our knee jerk reaction in this situation would be enough of this.
00:06:15 [W] Hen turkey.
00:06:21 [W] Everybody should be aligned to the same tools same process same framework same language, right? No more madness, but you see this is exactly the point where we need to make the hard choices we
00:06:30 [W] balance point where we allow for maximum stability quality and Clarity over process in our systems, but without stifling that autonomy creativity and velocity
00:06:46 [W] Loud for the success that we're experiencing in the first place.
00:06:54 [W] So how does one find that balance point?
00:06:56 [W] How does one escape the jungle?
00:06:59 [W] Well the way to escape the jungle is finding what charity measures calls the golden path, by the way, if you know who charity measures is send a see to the session chat and if you don't know
00:07:11 [W] Is then do yourself a favor and find her blog and follow her on Twitter or Twitter handle is right there.
00:07:26 [W] And while you read it, follow me on Twitter to my Twitter handles at the bottom of the slide.
00:07:30 [W] So the charity has this great post. Actually she has this great way of expressing capturing and expressing the essence of what great engineering looks like so she has this post that talks about
00:07:41 [W] Has this great way of expressing capturing and expressing the essence of what great engineering looks like so she has this past that talks about building that golden path.
00:07:45 [W] So what's the golden path? How do you find the path that helps you escape the jungle?
00:07:57 [W] Well, the golden path is that way that makes it easy for the engineers and organization to deliver and build software, right?
00:08:00 [W] the golden path provides the answers to the questions of how we do things at their organizations how to build test package version deploying, you know how to read now the important thing to understand that the
00:08:15 [W] Now the important thing to understand that the golden path isn't the only path and of course our Engineers can challenge the path and try to find alternative paths because we want to be
00:08:27 [W] Being but the golden path does make it easier for the whole organization to work together.
00:08:38 [W] So how do we create the golden path?
00:08:40 [W] The golden pesky the grand great conceptual construct, but where does it get implemented?
00:08:49 [W] Well, first of all, we need to Define our delivery tool kit, right?
00:08:51 [W] So we need to get an agreement of what toolings we're using. We'll start with the, you know, defining what we use for salsa.
00:09:00 [W] Control Management then we need to Define what we use for each of the Frameworks build automation.
00:09:10 [W] And then what how do we package our products and how how we store them?
00:09:13 [W] What kind of binary positive were using for their distribution and we need to Define what continuous integration continuous delivery tooling to use and then we need to unify the platform for the deployment
00:09:25 [W] Decide how we store the configuration and secrets across our organization. So or components can be configured in the same way and then we want to talk about maybe, you know starting using servicemeshcon the
00:09:40 [W] The cloud native stack and now after we've defined all the tooling we need to wire them all together and that's when we start talking about the pipeline right?
00:09:56 [W] So here it is the proverbial ci/cd pipeline that takes our code from the ideas to the production that provides the tight feedback.
00:10:07 [W] Loops that allow us to create flow of changes throughout organization.
00:10:09 [W] Now one would say how is this different from ci/cd as we've always known it.
00:10:20 [W] Why is my top called migrating to cloud cloud knative ci/cd.
00:10:21 [W] How is this different?
00:10:29 [W] So you see the reason for this talk? Is that while helping those and organizations trapped in the jungle?
00:10:32 [W] We do see a certain pattern most of these organizations that find themselves in the jungle today.
00:10:37 [W] They started the life before the cloud native.
00:10:40 [W] Ecosystem exploded. So even when running on the public Cloud they mostly use the cloud as just, you know, infrastructure service without using all the benefits of scalability.
00:10:55 [W] The the the genomic qualities of the the cloud provides or maybe they did use platform-as-a-service something like Heroku look alike. But since then they've outgrown its
00:11:11 [W] by the way, why current path Solutions are limited in their abilities and how and if serverless will be able to solve this is a topic for a whole other talk, but
00:11:27 [W] Leave that aside.
00:11:33 [W] So what we're seeing is that in most organizations the attempt to escape the jungle and goes hand-in-hand with the need to modernize their stack for the cloud native landscape. So that's that's why I'm talking about this.
00:11:45 [W] So if we're talking about Cloud native ci/cd, how is different from usual ci/cd? Not non-cloud knative one.
00:11:57 [W] Yeah, that's a question for you.
00:12:00 [W] I have my own answers, but I'd love to hear what you think. Well for us we're saying the cloud native ci/cd is different because first of all, we want to see integrated with the platform that we're running on namely kubernative.
00:12:12 [W] And we want to see it utilizing the advantages of that scalable Dynamic platform using the dynamic agents and environments for build test deployment, etc.
00:12:24 [W] Etc.
00:12:40 [W] And of course in the end we want also to be able to decouple the delivery vent from the release event allowing for those stress-reducing release techniques such as blue green deployments Cannery deployments.
00:12:40 [W] Launches a be testing you name it?
00:12:43 [W] Okay, so we need to build and you unified pipeline for our Cloud native organization and we want to standardize the pipeline.
00:12:58 [W] How do we unify and modular system where we have a lot of Frameworks without you know, breaking the autonomy of each component. We standardize on an API. So exactly the same in the same way when
00:13:11 [W] By blend for a large organization that's in the jungle right now.
00:13:24 [W] We want to build a standard pipeline API and that's the model that we've seen working quite well for us in the last couple of years.
00:13:27 [W] We call it an agent model flow pattern or an AMS pattern, right?
00:13:34 [W] So what am I talking about?
00:13:41 [W] Well, I should note that the example here is very much reliant on
00:13:42 [W] on Jenkins existing shared Library functionality on and on it's goo goo vdsl capabilities.
00:13:53 [W] It's definitely possible to implement something like this with the other motor llamo based ci/cd tools that are slowly but surely catching up to Jenkins on their flexibility and keptn abilities,
00:14:04 [W] Today Jenkins with its groovy DSL provides the most flexibility and smart.
00:14:13 [W] Yes.
00:14:15 [W] You have to learn Groove in order to do this.
00:14:16 [W] Yes.
00:14:17 [W] you'll have to maintain your own infrastructure.
00:14:27 [W] These are all very important costs. But again, we're trying to escape the jungle here. The dangers are many so it may be worthwhile effort. Okay, so when building that started the pipeline API first thing we want to
00:14:34 [W] That we have a very standard and simple interface for each of our services.
00:14:42 [W] So in each of our services we have as a very simple Jenkins file.
00:14:44 [W] There's Jenkins file here.
00:14:48 [W] Basically just tells us what the name of the service that we're building.
00:14:49 [W] What how do we tagged this release?
00:14:57 [W] And here we start defining our agent right here.
00:14:58 [W] This is the agent definition and then we Define our model right which
00:15:05 [W] Which basically is tied to the product we're building and then we Define our flow and that's this object that we're calling here. This function called daughter service pipeline, which receives the definition of the agent and the
00:15:19 [W] the model and the definition of the service name and its tag
00:15:26 [W] So then we go to the agent definition again.
00:15:32 [W] We are using the Jenkins kubernative plugin.
00:15:34 [W] That's very powerful here that allows us to use a whole kubernative poddisruptionbudgets.
00:15:56 [W] Find our agent as a standard kubernative spot, but with Dynamic capabilities of templating.
00:16:04 [W] and
00:16:09 [W] right and then we go to the model definition. We've defined our agent and in the model definition. We're basically defining the API.
00:16:23 [W] That's where we Define the EPA. We're saying this product defines the following functions and that's what we have the function for build the test and deploy stage and maybe integration test stage though.
00:16:36 [W] For example, here. We see that for data products.
00:16:39 [W] We have this build stage that builds Java with
00:16:42 [W] and
00:16:49 [W] Right, and then there we go to the model definition will Define our agent and in the model definition.
00:16:50 [W] We're basically defining the API.
00:16:50 [W] That's where we Define the EPA. We're saying this product defines the following functions and that's what we have the function for build the test and deploy stage and maybe integration test stage though.
00:16:53 [W] For example, here. We see that for data products.
00:16:55 [W] We have this build stage that builds Java with with a maven command.
00:16:57 [W] You see and then if we want to define the integration testing for such a product will use Maven integration test command and if here's another product that's in node.js product node.js service
00:17:04 [W] Command and if here's another product that's in node.js product node.js service and for it the build function will look differently.
00:17:05 [W] But again, this is the same API that allows for clean definitions of build test deploy and other delivery stages that we want during our Pipeline and then after we've defined the model, we will Define the flow and that will
00:17:14 [W] Jenkins pipeline that defines the stage and the steps and in each of the steps will be in the end calling the build and test all the API functions of that model that we've defined earlier. Okay,
00:17:30 [W] And test all the API functions of the model that we've defined earlier. Okay. So that's the AMF pattern for you.
00:17:35 [W] Now. Let's talk a little bit about testing.
00:17:48 [W] You see have you heard about the testing pyramid? If you heard about testing pyramid send it t to the session chat if you haven't well, basically that's the model that says that you should invest the most of effort in your unit
00:17:50 [W] The most of effort in your unit tests then a bit of less effort in integration and even less effort in the end to end testing because it provides the least value, but the thing is that with
00:18:07 [W] You should probably not invest in end-to-end testing at all.
00:18:13 [W] From what we've seen we've seen many teams struggling for weeks on end trying to make their end-to-end testing work and investing a lot of hours in maintaining these tests.
00:18:25 [W] There are always very brittle and provide very little value. So instead we're suggesting and an approach that we've seen working much better, which is replacing the antenna.
00:18:37 [W] Testing with contract testing. If you haven't heard about contouring testing go and look it up online consumer different contract is a pattern that was first suggested by the thought weaveworks consultant and then further implemented inside
00:18:51 [W] Green contract it allows testing or services in isolation, but still ensuring that we're not breaking contracts between them and they do continue working when deployed together as one system.
00:19:06 [W] Now next thing after we've done the pipeline and we've decided decided on our testing strategy. We need to talk about how to deploy and for the cloud native ecosystem today.
00:19:19 [W] Helm provides a unified package management experience if maybe a year ago, it was still not maybe an and answered closed question today.
00:19:34 [W] It's much clearer with Helm graduating from the cncf.
00:19:36 [W] and well for the services that we're putting on the pipeline where now defining Helm chart templates, so each development team building a new service can scaffold a new Helm chart
00:19:51 [W] I'm of creating the service at the time of scaffolding the service skeleton own.
00:19:59 [W] It has a standard structure defines the deployment and in defines the configuration of the database connection the monitoring connections the message queue connections, and we have all of this already in place.
00:20:13 [W] It allows us also to define the standards of water services should include like instrumentation and database and manages meshmark.
00:20:22 [W] Excuse connections and also how the service should be deployed again the golden path.
00:20:31 [W] path. This is the easiest thing to do, of course, it can be modified, but it doesn't have to be now.
00:20:36 [W] finally
00:20:38 [W] after we've decided on the basics on how to build a paper by plan on how to test her code on how to deploy your code.
00:20:51 [W] We can start thinking of the next stage and that's providing those stress-free releases providing them maybe with servicemeshcon abilities
00:21:04 [W] All know that Canada releases can be made easier if we use the smart routing capability for capabilities of Ecco or linkerd e or console of the all of these enabled with the
00:21:20 [W] It's Peck.
00:21:24 [W] So we start thinking about that at a certain point, but it should be noted that servicemeshcon ings a lot more complexity into our Stacks.
00:21:32 [W] So definitely look forward to that start to defining those things start testing servicemeshcon.
00:21:50 [W] adding capabilities
00:21:52 [W] Test this on the side. If you really want a nice tool that would allow you to deploy different servicemeshcon and maybe buildpacks forms benchmarks between them check out naturally,
00:22:09 [W] Test this on the side. If you really want a nice tool that would allow you to deploy different servicemeshcon sand May build performance benchmarks between them check out
00:22:10 [W] Project of the layer of fiber servicemeshcon Unity that I'm proud to be a part of and well the next thing is of course something that you've met of you have been waiting for should I go for gitops
00:22:24 [W] When building my cloud native ci/cd, well gitops is a great approach.
00:22:35 [W] I tend to think it's nothing new.
00:22:39 [W] It's basically saying I'm operating my infrastructure based on what get says get as my single source of Truth and I built in the automation to make sure that whatever get says is
00:22:50 [W] Right. So it's very easy to say it's a bit harder to do than to say and we do have tooling for that today and the tooling keeps developing especially now with
00:23:06 [W] In with the flux project from weaveworks. So these two main leaders in the gitops thinking are leading the way and they're now working together and building something that they call the gitops engine.
00:23:22 [W] Worth looking into that steel very early stages of that and you'll still have to build a lot of your own custom tooling and hooking and processes especially processes around that.
00:23:38 [W] but that's a great direction to put at the end of your path so that when you get out of the Jungle, you'll have something more to do in order not to get back into the jungle because
00:23:54 [W] important thing to say is that even when you're out of the Jungle or even when think that you're out of the Jungle you can always go back the jungle is always calling now
00:24:09 [W] Get back into the jungle.
00:24:13 [W] We want to make sure that while we build the golden path.
00:24:19 [W] We also build in the map that will show us where to go next and that map will be allowed by building in inside the delivery pipeline
00:24:33 [W] X right. So if we are trying to improve the way we deliver software we need to be able to measure if we're actually improving anything.
00:24:47 [W] So we need to start with measuring, you know, the four metrics that the accelerate book recommends us to do which is lead time deployment rate meantime restoring changeful rate integrate guardrails such as security scanning and
00:24:58 [W] His lead time deployment rate meantime restore and change filler eat integrate guardrails such as security scanning and static code analysis defined test coverage thresholds,
00:25:03 [W] It's static code analysis you find test coverage thresholds Define how our code should be instrumented in order for it to be observable and manageable and once we have all of
00:25:13 [W] We can continue going forward.
00:25:17 [W] And maybe get into another jungle if we're even more successful but find a way out of that to the jungle. As I said is always calling.
00:25:32 [W] So Claude knative ci/cd is your way of speaking escaping the jungle. It's not that simple, but it's doable.
00:25:41 [W] There is a path that you can build.
00:25:48 [W] These are just the recommendations that we've seen working. And of course our landscape is changing all the time, and the jungle is always lurking around but together we'll find a way.
00:25:58 [W] Thank you for listening and I'll be happy to answer your questions now.
00:25:59 [W] And we're alive I suppose right.
00:26:14 [W] Okay, we're fully live now.
00:26:22 [W] Thank you everybody for joining.
00:26:23 [W] Thank you for listening.
00:26:26 [W] I hope this presentation spilled some light on how to start the migration to clone knative ci/cd and thank you for the good feedback.
00:26:38 [W] And we're alive I suppose.
00:26:44 [W] right
00:26:44 [W] Okay, we're fully live now.
00:26:45 [W] Thank you everybody for joining.
00:26:45 [W] Thank you for listening.
00:26:45 [W] I hope this presentation spilled some light on how to start the migration to clone knative ci/cd and thank you for the good feedback.
00:26:46 [W] Now the were some questions about gitops specifically Argo City and flux.
00:26:47 [W] The were some complaints about flux I can speak for flux developers.
00:27:02 [W] So as I said, the question specific questions about flux are probably better asked on flux GitHub repo. Okay now if there are any questions
00:27:09 [W] CD and flux were some complaints about flux I can speak for flux developers.
00:27:11 [W] So as I said, the question specific questions about flux are probably better asked on flux GitHub repo. Okay now if there are any questions
00:27:11 [W] Now I'll be happy to okay, so here is a and your questions.
00:27:20 [W] Okay.
00:27:26 [W] So Jack L is asking if I have thoughts on tekton as an API that crosses different pipeline to Ink.
00:27:27 [W] Well tekton is actually a very interesting initiative.
00:27:36 [W] I call it the whole trend of converting everything to custom resources and kubernative.
00:27:42 [W] At ease and then writing controllers for that.
00:27:51 [W] I usually like to call this the total cri-o ization of our industry, but well it is go it does go hand-in-hand with the kubernative way of doing things of course tekton is still
00:28:00 [W] It's very early stage.
00:28:04 [W] So if you already have a very complicated ci/cd process that you need to convert to the way the things done are in Cloud native way, I think starting right away
00:28:18 [W] Is not a very good approach. I would probably go to tekton for Greenfield stuff.
00:28:25 [W] So a soft Shapiro asks if I can repeat the name of the end-to-end alternative of talked about.
00:28:40 [W] Okay, I was talking about the consumer driven contract testing its its concept.
00:28:46 [W] It's an approach and well, it's implemented by framework called packed and in Java world.
00:28:56 [W] There's also Spring contract Library.
00:28:58 [W] So you can look into that now Chang haleem is asking if I've tried Jenkins X and how it Compares with tekton.
00:29:10 [W] know we we are not working with Jenkins X get Jenkins eggs and tekton are different from the approach that I've described in the presentation in that they're fully totally integrated with kubernative
00:29:24 [W] Now while the total and full integration is important for most of organizations currently in the jungle what we find ourself ourselves.
00:29:41 [W] Is currently in the jungle what we find ourself ourselves dealing with is a hybrid stackrox, so they don't have everything in kubernative. So there's
00:29:50 [W] Hybrid stick right so they don't have everything in kubernative.
00:29:52 [W] So there's usually a need to support stuff that's outside of kubernative.
00:29:55 [W] That's why for most of the projects where we've envisioned.
00:29:58 [W] And need to escape the jungle we didn't go with those totally integrated tools.
00:30:06 [W] Okay. So Philippi Santa Clara is asking at my company.
00:30:21 [W] We're trying to move away from Jank and despite the fact we do everything very similar as you presented what we need to move away from managing our infra. Would you recommend other ci/cd tools? Well,
00:30:27 [W] Yeah, that's an interesting question.
00:30:33 [W] You see we need I suppose we do need in our industry to start separating ci/cd MCD.
00:30:46 [W] So Jenkins was born as a continuous integration server and the CIA field itself is today becoming more and more commoditized.
00:30:56 [W] It's becoming much easier to build.
00:30:57 [W] Better continuous integration tools today and the recent introduction of get above workflows is a great example of that of how Microsoft took the the experience of the industry up until now and
00:31:13 [W] Some very important lessons in implementing this now what I recommend yes, I would recommend a lot of other see itools if you're using the gitlab stackrox, it all means go for for the gitlab
00:31:29 [W] If you're already on GitHub and you don't want to introduce Jenkins, yes, by all means go with a get of workflows. You may be missing some of the stuff that Jenkins has because Jenkins up until now
00:31:44 [W] The most evolved continuous integration server out there, but on the other hand, you won't have many of the much of the Legacy the Jenkins brings with it. Now if we talk about CD
00:32:00 [W] Did not SED solution.
00:32:07 [W] I tend to think that our industry currently lacks and mature CD solution for the cloud native World Argo City and flux and probably our Goro loads are all looking
00:32:18 [W] In a very important and right direction, but we still have a lot to learn about how CD is done correctly in the cloud knative world.
00:32:34 [W] And in fact, we've been working on building such a solution.
00:32:45 [W] So in line with that Paula filippelli is asking if tools like Flagger useful in my opinion and it says that they need are very basic.
00:32:49 [W] Amateur team exactly, right. So Flagger for those who are not available is a progressive delivery tool based on servicemeshcon caption. Ality based on the SMI specs. It can work with this Tiara linkerd
00:33:03 [W] Act and it does provide that important deployment strategy things like Rook blue green curry all all of those that we now call Progressive delivery.
00:33:20 [W] These things are still very hard.
00:33:26 [W] Even with the tool like Flagger or are Goro loads.
00:33:29 [W] It's very hard to Define and implement this deployment strategies most of the organization's we talked to have it on their road maps and it's always for the next year because of
00:33:41 [W] Define and Implement, these deployment strategies most of the organization's we talked to have it on their road maps and it's always for the next year because of the engineering complexity involved
00:33:43 [W] To exit involved we do think that this can be largely simplified and made more understandable, especially with all of the new layers of virtualization that we now
00:33:57 [W] on top of kubernative
00:34:00 [W] and what do you see as the cause for brittle end-to-end tests?
00:34:07 [W] That's the question that comes from Alexander Junger or yunior I suppose so. Well, the reason is very simple.
00:34:17 [W] We're Building microservices Systems.
00:34:19 [W] This is a lot of services they're all in fluctuating State and in constant flux, and it's very hard to arrive at a stable environment, right? We don't have a stable environment in our production.
00:34:31 [W] Our production is never stable because things are always changing.
00:34:37 [W] So how do we expect to arrive at a stable understandable environment in our end-to-end testing?
00:34:49 [W] So it's either we freeze that environment and it doesn't provide any indication of what production looks like what normal looks like or it has to be always moving and then it's very hard to to arrive
00:34:57 [W] How do we expect to arrive at a stable understandable environment in our end-to-end testing? So it's either we freeze that environment and it doesn't provide any indication of what production looks like.
00:34:58 [W] what normal looks like or it has to be always moving and then it's very hard to to arrive at something that works there and doesn't break with every new commit.
00:35:01 [W] So Bas Van Der bring said the jungle is very Lively environment, but we structure everything in Jenkins libraries and processes.
00:35:11 [W] How do we ensure that?
00:35:12 [W] We still have room for incorporating new Innovations instead of walking into the desert from far from what's going on in the rest of the world.
00:35:19 [W] Okay.
00:35:20 [W] That's also a good question.
00:35:24 [W] That's more of a question about the golden test.
00:35:26 [W] It said the golden path is not the only path.
00:35:29 [W] path to be challenged and much in line with the
00:35:35 [W] S-sorry philosophy. This is how like this is the the supported the easy way to do things that the organization doesn't doesn't mean that it's the only way we're free to innovate.
00:35:47 [W] We're free to suggest our own ways. And that means your engineers your team's can actually decide that there are not using the pipeline API that they're building and delivering things their own way, right?
00:36:00 [W] They won't get the support of a central team. They won't get the
00:36:02 [W] Out of this carefully crafted pipeline, but if they find a way to do things in a better way, those should be integrated into the golden path, right?
00:36:17 [W] So and well another way is by providing, you know, making that pipeline API very open.
00:36:22 [W] Too much time left, right?
00:36:30 [W] Okay, so I answered some questions.
00:36:34 [W] I couldn't answer everything.
00:36:40 [W] So you're all welcome to continue on the slack Channel, which is called.
00:36:43 [W] 2 Cube cons ci/cd on the cncf sled workspace.
00:36:50 [W] Thank you for all the wonderful questions and I'll be happy to continue this discussion and well, thanks again for coming.
