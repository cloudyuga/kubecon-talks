Panel: Ask Me Anything About Service Mesh: ZDVT-8584 - events@cncf.io - Monday, August 17, 2020 11:40 AM - 151 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:16 [W] Hi, good morning.
00:00:22 [W] Let me quickly introduce myself.
00:00:25 [W] My name is lenses on mobile senior technical staff member and IBM.
00:00:27 [W] I'm also it's still contributor today. We have an exciting exciting panelists.
00:00:35 [W] I'll let them introduce themselves then.
00:00:39 [W] Hello everyone.
00:00:44 [W] I'm danberg. I'm a distinguished engineer at IBM primarily focusing on our kubernative service as well as introducing and delivering servicemeshcon abilities into IBM cloud.
00:00:55 [W] Great, so then can you go next?
00:01:00 [W] sure so I'm spend Mawson.
00:01:05 [W] I'm a senior staff software engineer at Google.
00:01:11 [W] I'm a one of the founders of the history project with Lynn and Dan work on the technical oversight committee and steering committee with both of them as well and I've been interested in how servicemeshcon help
00:01:20 [W] Solve problems for Developers for years. So very excited to be here.
00:01:26 [W] Awesome.
00:01:28 [W] Thank you Christian.
00:01:31 [W] Yep.
00:01:32 [W] Hopefully you can hear me.
00:01:34 [W] It's it's good to see you.
00:01:35 [W] My name is Christian Posta.
00:01:39 [W] I'm going to field CTO at a company called solar dot IO where we focus on helping customers use servicemeshcon duction and kind of meet them where they are figure out what their challenges are and help them
00:01:50 [W] Successful and we have a few products that we've built to help do that and I've been involved in building distributed systems and an open source for quite a long time.
00:02:02 [W] Great.
00:02:05 [W] Thanks Oliver.
00:02:09 [W] Hi, I'm Oliver gold.
00:02:14 [W] I'm the creator of linkerd E & co-founder and CTO of a company called buoyant.
00:02:16 [W] I've been working on servicemeshcon.
00:02:23 [W] That's awesome.
00:02:27 [W] Thank you. Everyone.
00:02:28 [W] Let's go ahead.
00:02:30 [W] I'll start with some of our questions.
00:02:36 [W] So we have a few initial seeding questions were going to go through those first in the meanwhile for all the audience. Please go ahead and type your questions and I will prioritize them
00:02:45 [W] All right, initial questions and read out for panelists to answer them.
00:02:51 [W] So the first question is can you describe what exactly is servicemeshcon?
00:03:14 [W] Sort of historically you've had to build all of these kind of capabilities for managing multiple Services all interconnected together into your applications.
00:03:29 [W] So you have to build you know, routing and observability and security and all these other pieces in code and I was kind of the historical View and what servicemeshcon to do is they come in and provide that as an infrastructure layer, so you get all those capabilities
00:03:40 [W] having to make changes to those applications and then you can sort of decouple that operations from that development and you can push changes rapidly so you can reroute traffic or you know, add alerts on things and do all kinds of changes without having to
00:03:55 [W] Go and change your code.
00:03:58 [W] What so many other panelists wants to add anything?
00:04:03 [W] Yeah, I mean I'll be happy to go ahead and no no you go Chris. All I was going to say is for developers and Enterprise users.
00:04:19 [W] already have experience with things like an Enterprise service bus API management and so forth It's in my it's the evolution of
00:04:35 [W] out and containers kubernative were the evolution of our infrastructure and you know, it fits the model better by decentralizing the enforcement points by providing an API to enable automation,
00:04:51 [W] by providing an API to enable automation, but it is it is about connecting applications and solving things like security and routing like Sven said
00:04:59 [W] Then yeah, I was just going to add all these points are absolutely correct.
00:05:16 [W] One thing I was going to add which is similar to what Christian was saying is that a mash is really the ability to programmatically Define your policies and rules at the networking level. And I think that's a key aspect here is that
00:05:22 [W] Our programming these rules as opposed to coding codify in them directly into your application.
00:05:30 [W] and I'll just add a little twist on all these which I mean all these are right but I've used servicemeshcon Ali a pattern, right and it's a pattern for extracting a bunch of the kind of connectivity and communication reliability logic out of the application and you can have servicemeshcon
00:05:46 [W] Really a pattern right and it's a pattern for extracting a bunch of the kind of connectivity and communication reliability logic out of the application and you can have servicemeshcon are really good security or servicemeshcon Star really good observability or policy, but
00:05:52 [W] Get a security or service meshes that are really good observability or policy.
00:05:55 [W] But really what we're talking about is the pattern of having side proxies or Rich data planes that are programmable.
00:05:59 [W] Awesome.
00:06:04 [W] Let's go to our next question.
00:06:06 [W] What are some challenges in adopting a service match volleyball? Can you start answer this first you sure?
00:06:19 [W] Yeah. So as we were just talking about service meshes can do lots of different things and there's lots of value that your organization may get out of the service mesh and what we see frequently as folks try to adopt service meshes. They try to adopt all of the value at 1.
00:06:31 [W] They want tracing and monitoring and retries and circuit breaking and all and policy and they wanted just to play this all in one big Fell Swoop.
00:06:39 [W] And that makes it really hard and complex for organizations to adopt and so our advice is to be really incremental start with things like mpls and load balancing and kind of table stakes and then grow the set of problems you're solving with the organization
00:06:53 [W] Circuit breaking and all and policy and they wanted just to play this all in one big Fell Swoop. And that makes it really hard and complex for organizations to adopt and so our advice is to be really incremental start with things like mpls and
00:06:55 [W] They're in a lot of things at once.
00:06:56 [W] And you want once you add anything?
00:07:03 [W] Yeah, I mean, so what we see with our customers is exactly what Oliver said because it's both the capabilities like some servicemeshcon have a lot that it can do
00:07:21 [W] Makes some complexity, but that also creates a you know, a people problem how what part of the organizations which already have these silos need to be involved and if it's all of them that that makes
00:07:37 [W] A lot a lot more difficult. So that's a big that is a big challenge. Another one. Is that the idea that the servicemeshcon experiment and you just put it in your applications and and it just works
00:07:53 [W] again, what we've seen is these applications aren't exactly Cloud friendly and they don't you know, there are gotchas and there's not there's not the transparency that they expect and so there's there's some hurdles in
00:08:09 [W] the organization
00:08:11 [W] I'll add one thing one challenge we've actually seen in a lot of companies is actually that they have a lot of this stuff in a rudimentary form and their own home brewed way.
00:08:28 [W] So a lot of companies have something like a servicemeshcon be it's through libraries.
00:08:32 [W] Maybe it's through some proxies, you know, maybe it's a combination and I think one of the big challenges is migrating from that state of your own custom stuff that kind of does something
00:08:42 [W] Well and some things specific to your your organization, but not everything and migrating to one of the standard servicemeshcon.
00:08:57 [W] So that's actually a pretty big challenge is how do you how do you move that functionality over and how do you have kind of both running at once and that gets very very complicated.
00:08:58 [W] Yeah, interesting perspective in the interest of time.
00:09:07 [W] That's moving onto your by third question.
00:09:09 [W] How can you just decide if they need servicemeshcon not then I'm going to pick on you to answer that first.
00:09:18 [W] That's actually a good question.
00:09:22 [W] If they don't know if they need to use the servicemeshcon not they probably don't and the first thing I would say is don't use a servicemeshcon less you unless you know that you have a need for it.
00:09:31 [W] set of criteria some of it is that they already have existing code and they don't have a good view of either an understanding of how their services communicate or they just
00:09:54 [W] It's security model to ensure secure communication across those services or they just have a difficulty in managing rollout of new releases new changes and I did state that
00:10:10 [W] Testing it doesn't have to be existing.
00:10:17 [W] But the reason why existing is an interesting case is because you can adopt a servicemeshcon apply these at the networking level without modifying your your applications.
00:10:28 [W] But again, I wouldn't just jump into it servicemeshcon cuz it's a latest greatest Shiny Toy.
00:10:33 [W] Toy. You do need to look at what are the problems you're trying to solve and does the servicemeshcon fit those me.
00:10:34 [W] I have another opinion on that.
00:10:41 [W] So I think anyone needs a servicemeshcon spot the Pod communication that they care about and that is you know, it's production traffic between instances running your communities cluster II definitely agree that you should be really
00:10:53 [W] I have another opinion on that.
00:10:54 [W] So I think anyone needs a servicemeshcon spot the Pod communication that care about and that is you know, it's production traffic between instances running your communities cluster II definitely agree that you should be really
00:10:55 [W] Now you're getting into that but I think things like em TLS and load balancing our kind of table stakes and just in the way that you'd expect a browser to require TLS today, you know do a servicemeshcon be doing that just you know, connectivity between clusters securely.
00:11:09 [W] And that's important.
00:11:11 [W] And I want to really quickly generalize that a little bit more.
00:11:22 [W] I think it's not just for pods right any anytime you have lots of different Services talking to each other whether they're kubernative pods or VMS or you know, mobile apps or iot, right?
00:11:32 [W] Like that's where servicemeshcon be useful and we don't all solve all those use cases yet, but actually it really is when you have that sort of lots of things communicating with each other and I really like what Dan said, I think we want to make sure
00:11:44 [W] Don't think if you if you don't think you need a servicemeshcon don't need one.
00:11:51 [W] It's really if you have the problems servicemeshcon to solve you need one, right?
00:11:55 [W] So it's look at the look at the problems problem space and if there are things that you know, servicemeshcon Zara solving that observability security and traffic routing and roll out on all those other problems.
00:12:08 [W] If you have those problems, right servicemeshcon usable, if you don't have those problems, then you probably just have a monolithic application on your phone.
00:12:12 [W] No one should want servicemeshcon.
00:12:21 [W] Okay, great.
00:12:24 [W] Let's go through our questions.
00:12:29 [W] And just because we want all the question comes through this platform for now and then at the end we're going to take questions on slag.
00:12:49 [W] Here's a question from rule how shooter servicemeshcon and interconnected with API Gateway API Gateway serving each smash Ingress Gateway or a central
00:13:06 [W] Gateway serving multiple clusters Christian, could you take that first?
00:13:15 [W] This is definitely an area of our expertise at solo because like I said, we we meet people where they are, right and some people are able to adopt servicemeshcon day and some people are not and
00:13:28 [W] A pattern is something that is familiar with folks and as they start to modernize they you know, they want technology that fits better with the gitops model that's declarative.
00:13:42 [W] That's very flexible and extensible and so forth.
00:13:50 [W] So an API Gateway in general is going to be different than a servicemeshcon. Then it solves those those application problems getting access to applications and apis at the edge
00:13:58 [W] our boundary and so we've seen people to play for example are our API Gateway that's built on Envoy glue at the edge of multiple clusters and then Fed rate them, right,
00:14:13 [W] Glue at the edge of multiple clusters and then Federated them, right?
00:14:16 [W] but we've also seen this seems to be a more prevailing pattern. Now that folks are going to put the put glue or put their API gateways into centralized clusters and then route those to the leaf clusters, which would have
00:14:28 [W] Those to the leaf clusters, which would have the the servicemeshcon they may be using something like a simpler Ingress on on those clusters.
00:14:36 [W] So we've seen both folks who have an aversion to centralization are going the Federated model folks who already had their processes and you know their familiarity with the centralized model or going down that path.
00:14:49 [W] So it's just there's not a right or wrong answer for them.
00:14:53 [W] And we've even seen people doing both rather have like a centralized decentralized mayadata thumb body and then that is routing to sort of within each cluster Gateway is that then route to the actual application so you can have multiple layers.
00:15:10 [W] layers. Yep.
00:15:11 [W] Okay, great.
00:15:16 [W] I'm sorry.
00:15:20 [W] There's no way I can actually check if the answer was satisfactory.
00:15:23 [W] So in the interest of time, we're going to move on the next it was
00:15:36 [W] Is from guy Kobe's what are the criterias consideration that I need to take When selecting servicemeshcon Clemente ations.
00:15:52 [W] Certainly. He highlighted a few wines is still Kuma osm and this more link the
00:16:00 [W] I'm going to Oliver. Could you try answer that first?
00:16:06 [W] Yeah, you should use linkerd e easy. No, I mean I think you know, how do you choose any software you look at the community that surrounded it and you look at the kind of use cases that are
00:16:22 [W] Linkerd e our goal is to make it easy to install and get out of your way.
00:16:29 [W] So I don't think people should want to servicemeshcon to install linkerd you get in TLS get load balancing get visibility and then move on with your life.
00:16:40 [W] But you know, certainly I think there are the other servicemeshcon have lots of value that they can speak to more.
00:16:42 [W] Yeah.
00:16:44 [W] I mean, I definitely agree with you.
00:16:46 [W] It's like any any software.
00:16:52 [W] mean once you've done your initial investigation and narrowed the field down to let's say three options you're going to have to take them further.
00:16:53 [W] Test drive you put them through the paces test your use cases test to make sure that it fits your operations and development style at the end of the day.
00:17:06 [W] You have to evaluate and you have to be comfortable with the technology.
00:17:10 [W] It's I mean, there's it's hard to say is one better than the other the one that's the best for you is the one that works the best for you.
00:17:19 [W] So you got to give it a try just like you would with a car you're not going to go buy a car without test driving it. Why would you do the same with software?
00:17:22 [W] Okay. Good answer.
00:17:30 [W] go ahead and just add one little extra piece.
00:17:38 [W] I would definitely agree with actually everything Dan Oliver said these out at is that I would recommend looking at servicemeshcon that have actual production users and you know.
00:17:48 [W] Driving it. Why would you do the same software?
00:17:53 [W] Okay. Good answer.
00:17:54 [W] go ahead and add that just to add one little extra piece.
00:17:56 [W] I would definitely agree with actually everything Danielle versed because I would add is that I would recommend looking at servicemeshcon have actual production users and you know, maybe favor favor using
00:17:58 [W] Production users and have sort of a track record of actually being deployed in production and used at scale because as we've discovered, you know, it's really easy to launch something that that sort of ticks all the boxes. Right? Like we launched sto, you know
00:18:08 [W] You know point one.
00:18:13 [W] I remember how many years ago and it had basically all the functionality is to you has today and they've been waiting years has been spent making it scale making a production ready and making it actually able to meet customer needs at scale in production in real usage. And I think you know people
00:18:24 [W] That is and how much time is spent on making something production-ready rather than just yeah, it does all the features that you need.
00:18:34 [W] So yes, try it out use it that is incredibly absolutely important.
00:18:45 [W] I mean if people I assume people are and we work with but like I said, we work with folks who are going through these evaluations right now and they come to that conclusion, but from the outset, I mean there's a new servicemeshcon least every week, right?
00:18:53 [W] You can see it's like spent said through through sto and even look at AWS at meshmark.
00:19:23 [W] Those are real servicemeshcon.
00:19:33 [W] Yeah, these aren't really good at - I'm so glad you guys add them. You definitely want to drive a car that's stable and can survive on the highways for a long time.
00:19:46 [W] That's moving on to our next question.
00:19:58 [W] I think this is we are from Girish. We have Services across regions and across cluster.
00:20:03 [W] We want to try multi cluster is still feature.
00:20:09 [W] We need to specify service entry to talk to service across cluster. Can this be done at scale as we have?
00:20:16 [W] I happy Mariah can remember I've been since I go forward or do you want me to do yeah, go for it.
00:20:35 [W] I've been doing a lot a lot of work on Multi cluster on so this is actually so this can be done at scale. I think most people that are doing this at scale are using their own controller to write those service entries
00:20:50 [W] So this is actually so this can be done at scale.
00:20:51 [W] I think most people that are doing this at scale are using their own controller to write those service entries.
00:20:56 [W] That's something we actually are looking at right now and we're working with also the kubernative community on a project called multi cluster services to Define.
00:21:03 [W] You know how Services get shared across multiple clusters in a more scalable way than then, you know each company having to write their own service entry.
00:21:09 [W] Controller. So right now it's it's doable you if you have tons of services, you should write a controller that is basically copying those everywhere and configuring them because it's to doesn't do that out of the box today, but once I've done that
00:21:24 [W] A but once they've done that is done.
00:21:25 [W] It does scale and does handle the traffic but we are don't write your own control. This don't write your own controller.
00:21:38 [W] Well as we have a we have a project that so-called servicemeshcon that does exactly that for you and does other things in terms of federation. So there's there's an admiral from the into it folks.
00:21:47 [W] So there's there's some there's some things to look at for that.
00:21:48 [W] Yeah awesome project.
00:21:51 [W] Also note that linkerd e 2 8 and added a servicemeshcon component which basically is a controller that sync Services across clusters and let's use traffic between them.
00:22:01 [W] Wow, lots of things to explore in this space.
00:22:11 [W] Okay, that's moving on to the next question.
00:22:19 [W] I think this question is really really interesting.
00:22:22 [W] I want to know the answer to servicemeshcon flexible. But what you would not recommend to do with servicemeshcon.
00:22:31 [W] Business logic don't do business in Japan servicemeshcon.
00:22:42 [W] Now that's actually really good.
00:22:47 [W] That's a great answer.
00:22:48 [W] If you find yourself doing business level applications as an extension to the mesh. You're probably doing something wrong.
00:23:01 [W] That's gonna be a slippery slope.
00:23:06 [W] I know I know once you get into after yeah, once you find that hook you can use it for all kinds of bad behavior.
00:23:18 [W] Like so for example webassembly is coming to Envoy.
00:23:20 [W] Yeah, that's going to be that's going to be a slippery slope.
00:23:25 [W] So, what do you think today?
00:23:28 [W] You shouldn't use servicemeshcon or then they've taken it too far?
00:23:34 [W] So should what is the question like would they when have they taken it too far?
00:23:45 [W] Yeah, they've done too much.
00:23:46 [W] They are trying to make servicemeshcon of a problem that it wasn't intended to do and it doesn't fit well.
00:23:50 [W] Yeah, no, I completely agree with the business logic thing.
00:23:54 [W] Right?
00:23:57 [W] Because I mean you can you can write your you could write your own Services, you know, I don't even have you think we'd lost you audio Christian.
00:24:10 [W] I've been
00:24:13 [W] oh you're back.
00:24:16 [W] Yeah back now get lost.
00:24:19 [W] Maybe it's 15 seconds.
00:24:20 [W] Oh, okay.
00:24:21 [W] Yeah.
00:24:26 [W] I know. All I was saying is I agree with that the business logic thing is just that's going to be a slippery slope.
00:24:29 [W] I mean, this is the same thing that happened with the Enterprise service bus Technologies over 15 20 years, right?
00:24:39 [W] The the challenge will be you know, when you need to make a change to some functionality. Do I need to
00:24:44 [W] Get five different teams in and if I need to do that, then that's the wrong wrong path.
00:24:50 [W] Yeah, the servicemeshcon really be the common parts.
00:24:56 [W] Not the not the special part, right? Exactly. Exactly. Right and I think that one thing not to do with servicemeshcon rely on it as a you know, as an answer to all your problems, right?
00:25:09 [W] You still need a good distributed systems architecture.
00:25:13 [W] You still need to think about how your systems are laid out and how they're communicating right?
00:25:16 [W] Don't expect it to solve all those problems for you.
00:25:17 [W] Right?
00:25:18 [W] It's just it's just that common layer. It's not it's not solving a business problem.
00:25:21 [W] Yeah, I think these are really good answers. That's moving.
00:25:29 [W] We got a question 51 from her land.
00:25:34 [W] When you have a big Koster more than 100 nose and springboard microservices.
00:25:53 [W] Well, the memory is about 450 magalix per each of the microservices.
00:25:57 [W] First bring boot or for the proxy or what?
00:26:03 [W] What is the memory?
00:26:03 [W] Spring boots going to be a lot higher than that.
00:26:08 [W] Yeah.
00:26:11 [W] Yeah. I think we've was saying springboard microservices where the memory is about 15 is a reasonable cost for input or 459 right for each one.
00:26:22 [W] I assume that you know, the one thing I bring today and they're looking at least your link the next and the think about what are the resources they need to plan?
00:26:34 [W] Yeah, so now I just want to say a hundred nodes.
00:26:40 [W] He's not a big big Clapper is five thousand nodes 10,000 nodes.
00:26:48 [W] nodes is small if you're having problems with your current system at a hundred nodes, then yeah, you need to you need to switch to something that can scale that goes to my point about you know things that can can scale.
00:27:03 [W] This is pretty minor especially in the latest releases early releases the best you had had much larger memory footprint than they do now, but the latest it's actually really small especially in something like a hundred nodes you I think we can run a single control plane in
00:27:26 [W] Mm notes or something.
00:27:29 [W] So yeah, you barely even just talking.
00:27:32 [W] The benchmarks.
00:27:35 [W] I've seen the last the linkerd haproxy was running between 20 and 30 Meg's per side car and Envoy I think is probably a hundred ish in the similar use case.
00:27:50 [W] So there are I mean, those are the benchmarks I've seen so run your own for your application, please but we've tried to make our proxy really lightweight and small, but that's just a one data point.
00:28:00 [W] Yeah, and people do need to realize I mean even even with the small proxies and I
00:28:03 [W] Linkerd een sto both have fairly small proxies.
00:28:09 [W] It's the number of PODS you have in your system.
00:28:13 [W] I don't care. How many nodes you have. How many pods do you have running that are part of that meshmark because at the end of the day, it's it does add up.
00:28:19 [W] I mean it will have an impact at some level you're getting value.
00:28:21 [W] Yeah, we lost your four maybe five ten seconds. Then I guess I talk too fast.
00:28:43 [W] I was just gonna say it's really dependent upon the number of PODS that you have the end of the day because even with a small incremental addition to the performance the memory it adds up over time.
00:28:53 [W] you do have to account for it.
00:28:55 [W] Okay, so I think we have all of what you are also answer the question to right we have linked a perspective on this too.
00:29:15 [W] Yep.
00:29:16 [W] We've got a tiny proxy very small.
00:29:19 [W] Okay. Let me let me also just throw in. Let me just also throw in because it asks about the resource overhead is CEO and linkerd e but servicemeshcon in general versus the alternative.
00:29:28 [W] Is an interesting point right?
00:29:33 [W] Because especially for the job of folks.
00:29:37 [W] We're on Spring Booth. Are there alternative is to use something inside the library inside the framework.
00:29:48 [W] So spring would be spring cloud or you know in the past people have used a Netflix all assessed at bringing those things into the jvm and all their transitive dependencies and all the classes you load into class name spaces and all that stuff.
00:29:55 [W] actually an ends up being more overhead to do that then run.
00:30:00 [W] A servicemeshcon c and the point that I was nervous.
00:30:03 [W] Absolutely, absolutely.
00:30:09 [W] But the point that always make is you if you're going to run these large distributed systems in Cloud infrastructure, for example, kubernative.
00:30:19 [W] Best suits the resource constraints that you have and putting it in the application may not be the best choice. It might but it might not
00:30:38 [W] Okay, great.
00:30:44 [W] I think this answer all indicating, you know, the current leading servicemeshcon Market is a lot more lightweight than the memory required by the springboard microservices today.
00:30:55 [W] Yes, okay, that's moving our we might be able to take like two hours to more questions.
00:31:07 [W] Let's see question 6 number 62 from Stephen.
00:31:13 [W] How do you servicemeshcon?
00:31:17 [W] I'll take this one. If you don't mind, of course service can be complete and see by load mounting load balancing is a great tool and it can be very difficult to wire this in your application directly. Although the grpc
00:31:34 [W] Write these things internally. But you know, if you're talking to many pods or you say you have 10 to a hundred pods, you're talking to choosing the least loaded one is absolutely going to impact Lincoln seemed a busy system. So great great tool to use servicemeshcon or
00:31:50 [W] Choosing the least loaded one choosing the one that might be closer to you in terms of locality, you know trying to respond to a client when a request to one of the upstreams isn't returning.
00:32:07 [W] You might need to send out, you know a second request.
00:32:20 [W] So the mesh definitely does a lot of kind of application networking under the covers for you that can definitely increase improve your latency numbers the interesting thing about the points that you guys just
00:32:26 [W] Some of the questions and one of the questions was what's one of the gaps that servicemeshcon divides over and above kubernative itself. And and the one of the number one things for me is the load balance in anyone that's used Kudo
00:32:42 [W] Realizes that Kudo proxy is not really a load balancer at all.
00:32:50 [W] It's extremely Dom has no logic you can't control it. Whereas the servicemeshcon view a true client-side proxy load balancer.
00:33:00 [W] that is programmable different types of approaches for doing the load balancing just like what was called out here huge advantage over what kubernative gives you in the box and to be clear.
00:33:12 [W] We're going to kubernative doesn't stain men.
00:33:15 [W] We're talking about kubectl advancing. So certain HTTP request and it's respond taking this amount of time where everything else in the kubernative Z. Co system is just dealing with TCP connections, which is a really dumb
00:33:31 [W] Yeah, exactly.
00:33:34 [W] And it's perfectly fine, right because kubernative is is there to deploy applications and scale them and check their health and so forth communities isn't necessarily there to route a specific request to a specific table because it has certain of later or whatever exactly.
00:33:50 [W] Yep.
00:33:51 [W] Yep.
00:33:52 [W] Yep. Yep each has its own request.
00:33:54 [W] Go ahead for real quick guide to other ways that to other ways that actually they reduce latency that we've seen with production users.
00:34:08 [W] So one is that actually the the proxy movement ations of these systems are often better than the native language if you know, you're not using C++ natively and so we've actually seen immediately and seeing increases just by having a better implementation
00:34:17 [W] Action of like hb2 or being able to upgrade hb2.
00:34:24 [W] So the tunneling sometimes actually can increase improve latency.
00:34:26 [W] The other way is actually they will help you see where your latency bottlenecks are in your application and see where problems are occurring and actually help you reduce the overall latency of your system by finding those bottlenecks. So there's lots of different ways they help
00:34:39 [W] Yeah, that's really interesting fact. I think. Oh we saw people reports on Twitter that when they upgrade to servicemeshcon.
00:34:49 [W] They actually find out there latency improved with mutual tikv and everything from the mesh.
00:34:54 [W] Okay, I think unfortunately we're running out of the time.
00:35:04 [W] I want to take a minute to thank all the panelists for answer questions today really appreciated. Also. Keep in mind. We do have to - Cube Kang - servicemeshcon can you know
00:35:14 [W] Answer keep asking us questions for the next 15 minutes.
00:35:23 [W] We will be around after you apologize. They are just about a hundred questions coming in and we couldn't answer most of them.
00:35:32 [W] So we will take the conversation over to slack the cube can servicemeshcon. Oh
00:35:33 [W] Thanks, everyone.
00:35:35 [W] Thank you.
