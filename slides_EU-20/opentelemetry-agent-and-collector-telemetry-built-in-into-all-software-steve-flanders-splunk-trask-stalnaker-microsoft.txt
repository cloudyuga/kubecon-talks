OpenTelemetry Agent and Collector: Telemetry Built-in Into All Software: EZLA-6197 - events@cncf.io - Thursday, August 20, 2020 11:58 AM - 155 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:12 [W] Hello everyone and Welcome to our self.
00:00:59 [W] Hello everyone and Welcome to our session opentelemetry collector Telemetry built into all software.
00:06:18 [W] Thanks for joining us first off like to introduce ourselves.
00:06:22 [W] My name is Steve Flanders.
00:06:24 [W] I'm a director of engineering at Splunk.
00:06:25 [W] I'm also an opentelemetry collector approver and working in the observability and monitoring space for the last decade and was actually contributing to the open census project prior to it joining with opentracing to form.
00:06:38 [W] Opentelemetry and joining me is Trask.
00:06:42 [W] Hey, I'm Trask Sonic her.
00:06:45 [W] I'm a software engineer at Microsoft.
00:06:50 [W] I'm a maintainer on the opentelemetry Java instrumentation project. And I've also been in the monitoring business sort of well open source business at least for a decade
00:07:01 [W] Actually contributing to the open census project prior to it joining with opentracing to form opentelemetry and joining me is Trask.
00:07:03 [W] Hey, I'm trask's tonic her.
00:07:04 [W] I'm a software engineer at Microsoft.
00:07:05 [W] I'm a maintainer on the opentelemetry Java instrumentation project and I've also been in the monitoring business sort of well open source business at least for a decade
00:07:07 [W] Being open source, Java monitoring tool called glow root and enjoy that space so much that here. I am in opentelemetry world now.
00:07:11 [W] Awesome. So our agenda for today.
00:07:18 [W] I want to give you a quick introduction to what the opentelemetry project is talk a bit about the opentelemetry collector and how it fits into the observability picture. Then do the same thing around Auto instrumentation focusing primarily on Java that we will touch on other
00:07:31 [W] And do the same thing around Auto instrumentation focusing primarily on Java that we will touch on other languages as well and then really wrap it up with a demo showing you how to really get started with the opentelemetry project.
00:07:40 [W] So with that what is opentelemetry opentelemetry is a cncf project and its really looking to solve a pretty big pain point in the observability space.
00:07:52 [W] If you've heard of observability, you've probably heard of the three pillars of observability and being the different data sources that you have in your environment.
00:07:55 [W] Traces metrics and logs well for each of these different data sources.
00:08:00 [W] There are actually different layers to it.
00:08:06 [W] You have the API you have the implementation of that API all the data collection aspects and then things like wire formats interrupt formats in the like some of these things are actually language-specific.
00:08:17 [W] So when you start talking about instrumentation apis, they have to be written for each individual language where the agent and collector mechanisms have different deployment methods depending on the type of architecture that you're deploying.
00:08:25 [W] Into opentelemetry is really looking to solve all of these aspects.
00:08:34 [W] The idea is everything that you deploy within your environment to get to an entry data out opentelemetry as providing a completely vendor agnostic solution to to get that Telemetry data to the back end or back ends of your choice opentelemetry
00:08:44 [W] Not offer a back end though.
00:08:48 [W] That's where it kind of draws the line anything instrumentation data collection. Even things around semantic conventions are all included and then you can choose either an open source or commercial backend to send your data to now the opentelemetry project is currently in beta
00:09:02 [W] Languages there are a few that haven't reached beta yet.
00:09:08 [W] There's been an extensive focus on tracing to start.
00:09:09 [W] So that's quite mature.
00:09:12 [W] In fact, the specification has already reached its first stable release the metrics one is actively underway, and that should be wrapping up later on this year.
00:09:21 [W] It will also be stable by the time we get to GA and GA is planned for later this year. So a lot of active contributions going on now and again, this is really the joining of two other projects open census and opentelemetry
00:09:30 [W] Now another interesting fact for you opentelemetry is extremely active. In fact, it is the second most active project in cncf behind only kubernative according to the cncf dev stats.
00:09:44 [W] So let's talk about how you would deploy opentelemetry into your environment.
00:09:53 [W] So if we think about having one or more hosts each running one or more applications, and we want to send the data to one or more different back ends. The typical recommended approach would be to go ahead and deploy The opentelemetry Collector as an agent on
00:10:03 [W] That will allow you to actually collect host metrics automatically and also provides a way to collect to tracing information.
00:10:16 [W] Now that tracing information as well as application metrics can come out of opentelemetry client libraries.
00:10:20 [W] These are going to be language-specific and out-of-the-box are actually configured to send directly to the opentelemetry collector.
00:10:32 [W] So if you deploy it without configuration, you'll actually have Telemetry data being admitted for the auto interpretation libraries, which is pretty cool and then
00:10:34 [W] In addition, you can also deploy The opentelemetry Collector as a standalone service. If you want to handle more advanced use cases may be around protecting from a security perspective limiting the number of egress points or controlling your API tokens, or if you want to do more advanced functionality
00:10:49 [W] As tilby sampling and the case of a p.m.
00:10:53 [W] Now if you look at the opentelemetry collector as a single component that exists it's actually one binary that can be deployed in a variety of different form factors depending on your needs. It's really looking to make it easy and provide a vendor agnostic way
00:11:09 [W] It's it's really looking to make it easy and provide a vendor agnostic way to collect this data.
00:11:18 [W] So it actually receives many Open Standards today Like Jaeger proved Prometheus and Zipkin and I can export to both open source and Commercial back ends.
00:11:25 [W] So in a way, it handles translation for you it so it understands the format's it's receiving and how to send that out in a different format.
00:11:28 [W] In addition.
00:11:31 [W] It can be used to manipulate the data before it gets sent out. Maybe you want to do like pii redaction.
00:11:33 [W] Mmm, or you want to do metadata enrichment all this is made possible through the collector as well now.
00:11:41 [W] Why would you want to actually deploy a collector? Like why not just have the client Library send this data directly to the back end.
00:11:53 [W] The idea is really to offload the responsibility from the application for two primary reasons one is you don't want to have to implement it in every single language like trying to keep that consistent is really hard and even the implementations are going to change because their language specific
00:12:03 [W] They don't want to introduce too much overhead to the application.
00:12:10 [W] So you want to do the minimum necessary to gather the data that you need.
00:12:13 [W] That's why they're we recommend deploying The opentelemetry Collector as an agent. You can actually have the instrumentation pass off this data quickly and then have the agent handle this in a unified way and be able to handle things like buffering and retry compression
00:12:26 [W] All the things that you care about that could be additional overhead to your actual application.
00:12:34 [W] It's really the idea here is time to Value make it very very simple offloading of responsibilities and really providing a consistent experience end to end now if we think about the architecture of The Collector, basically, it has a notion of receivers how you get data in this
00:12:46 [W] End-to-end. Now if we think about the architecture of The Collector basically, it has a notion of receivers how you get data in this is both push and pull based as I mentioned it already supports many of the open source standards, including Jaeger and
00:12:53 [W] Already supports many of the open source standards including Jaeger and Prometheus has a notion of exporters which is how you get data out.
00:13:00 [W] And again, it supports both open source, as well as vendor commercial specific back ends as a notion of processors, which is a way of manipulating the data as it passes through the collector.
00:13:11 [W] So this handles things like batching and could retry but as I mentioned also pii redaction tail based sampling and other specific scenarios, now, what you end up doing is actually defining what we call pipe.
00:13:18 [W] Blinds in The Collector.
00:13:24 [W] So for example, I can say that I'm receiving traffic over iot LP.
00:13:29 [W] We've been going through a batch enqueued retry processor and an exporting and Jaeger as I mentioned.
00:13:29 [W] It handles that translation of data format for you automatically, you could then Define a second pipeline.
00:13:41 [W] Where again, maybe I'm receiving from oh TLP, which is opentelemetry, 'z format that is includes by default.
00:13:42 [W] That's what the auto instrumentation and other client libraries follow today, and I could have that then export to to different destinations iot LP and this
00:13:49 [W] Is Prometheus there's a lot of flexibility and choice via configuration.
00:13:58 [W] Which really nice about this is you don't have to actually go make code modifications to take advantage of these capabilities. It all happens in The Collector itself.
00:14:01 [W] There's also a notion of extensions.
00:14:10 [W] It's just a way of typically doing Health Tech tell checks and profiling but it's also a way of handling things in might be outside typical data flows for the Telemetry data that you're collecting.
00:14:13 [W] For both traces and metrics and the case of opentelemetry logging is just starting to pick up So eventually logging will be added as well to both client libraries and The Collector but it's still early for that. The expectation is that they'll probably be a beta later this year for it
00:14:39 [W] Tripp these are more community-based.
00:14:50 [W] So this could be vendor specific logic or it could even be open source software that only applies to a smaller subset of the the user base of opentelemetry, but it's a way of adding things that are outside the core functionality of opentelemetry as
00:14:56 [W] Again, you can see pretty rich adoption here.
00:15:03 [W] In fact in general two of the three major Cloud providers AWS.
00:15:08 [W] Sorry as your NGC PR already instrumenting the backend Services AWS is just getting involved right now as well with the project all the major vendors are also contributing a least exporters.
00:15:19 [W] If not other aspects to the project and you're also seeing broad adoption support from many end users as well.
00:15:24 [W] With that I'd like to turn it over to trash and you can tell you a little bit more about Java Auto increment ation.
00:15:29 [W] Sorry was muted.
00:15:52 [W] All right, so the goal of Auto instrumentation is to give you as much insight into your production system as possible with the minimum amount of effort.
00:15:56 [W] So is to get you up and going and starting to see what's happening in your app in the case of java and to enable the opentelemetry, Java.
00:16:08 [W] Instrumentation you just need to add this Java agent command line art to for example all of your microservices and maybe an environment variable to tell them where to send the data to.
00:16:24 [W] Get you up and going and starting to see what's happening in your app in the case of java and to enable the opentelemetry Java Auto instrumentation.
00:16:25 [W] You just need to add this Java agent command line art to for example all of your microservices and maybe an environment variable to tell them where to send the data to as Steve mentioned.
00:16:26 [W] Steve mentioned before by default. It will send to the agent The Collector agent that's running look if you're running that locally and just with that minimum amount of effort you get this
00:16:39 [W] Distributed Trace flow pipe sir in your back-end monitoring system in this case.
00:16:49 [W] It's a screenshot from Jaeger which is another cncf project. And so yeah, so you get a lot of visibility.
00:17:02 [W] So I did want to mention what we're doing in the opentelemetry. Java Auto instrumentation project is not new the Java.
00:17:10 [W] System has a rich history of codeless Monitoring Solutions. We've had commercial monitoring tools doing codeless monitoring
00:17:26 [W] a long time we have open source monitoring systems doing codeless monitoring for at least 10 years and more recently
00:17:41 [W] on a train tools have been open sourcing their Java agents, which has been really great because I like to have access to all the source code of any library or agent that's running in my production system
00:17:58 [W] They're not super unique in that way and and a special call out here to datadog who donated their open source Java agent to opentelemetry as the starting point for our work in this community.
00:18:13 [W] And lastly, I'd be remiss not to mention a couple of Open Source libraries that make this Auto instrumentation bytecode instrumentation possible in the Java World Asm
00:18:30 [W] all bytecode instrumentation Library that's been around forever and bite buddy higher level bytecode instrumentation Library built on top of a SM that has been around the last few years and
00:18:46 [W] Been widely adopted by most of these types of Auto instrumentation projects.
00:18:53 [W] So that brings us to opentelemetry the opentelemetry Java Auto instrumentation project and it is really I see it as a community dedicated.
00:19:10 [W] Dean and maintaining vendor-neutral Java instrumentation and also another important aspect of the work is working across
00:19:25 [W] Important aspect of the work is working across working with other opentelemetry communities other language communities to provide consistent plummet re across different
00:19:35 [W] Tree across different programming languages. So in that way I think is sort of the unique the new thing that opentelemetry communities are bringing to the
00:19:48 [W] Java Auto instrumentation and while we've been focused on tracing so far. Definitely. We are working towards having metrics support and then as Dave mentioned
00:20:03 [W] also locking capture with the same infrastructure
00:20:11 [W] so this is the list of all of the instrumentation all of the Java libraries that we have instrumentation for so far and so with auto instrumentation it's important to
00:20:29 [W] Using these particular libraries, we will instrument those at runtime via the Java agent and capture the cause the requests coming into those libraries the calls going out of those libraries what your jdbc SQL calls look
00:20:46 [W] via the Java agent and captured the cause the requests coming into those libraries the call is going out of those libraries what your jdbc SQL calls look like and so this is where we really
00:20:51 [W] Um, and so this is where we really think that the the power of the community coming together can grow this list over time supporting, you know as new versions
00:21:01 [W] No, as new versions come out supporting new version. So the more people we have the more vendors the more community members who are all working on this comment Auto instrumentation the more
00:21:14 [W] It that Java the Java users will get automatically out of the box.
00:21:22 [W] So one question you might be asking is you know Otto instrumentation is great.
00:21:32 [W] But what if I want custom Telemetry also and so I like to recommend starting with just Auto instrumentation out of the box.
00:21:43 [W] Try it out.
00:21:45 [W] That way you can start, you know, seeing Telemetry flow to your back-end sitting monitoring system, and then you can start to layer in
00:21:55 [W] Custom Telemetry on top of that or inside of that.
00:22:07 [W] So depending on the complexity of your needs. There's a couple of different ways to add add custom Telemetry into your application as well as I mean the the first the
00:22:15 [W] API is a full-blown Telemetry API and the auto instrumentation Auto correlates captures and auto correlates everything that's coming from the opentelemetry API.
00:22:30 [W] So those two projects blend really nicely together.
00:22:34 [W] and for sure more Auto instrumentation customization hooks coming for as we run into, you know as community members bring new use cases things that
00:22:52 [W] Forward to Growing this project and yeah hearing from everybody.
00:23:00 [W] So I wanted to end here with I think my favorite thing about the or at least one of my favorite things about this project is that you can take all of this great Auto instrumentation and and
00:23:17 [W] You to the backend monitoring system of your choice.
00:23:27 [W] So this way the this community is really focused like Steve mentioned on the Gathering side.
00:23:32 [W] not the backend monitoring side so we can really focus on having really great Auto instrumentation really great Library instrumentation, and then the backend monitoring systems systems vendors open source Solutions.
00:23:46 [W] Just need to provide their exporter for opentelemetry and that can either be directly for example on the Java side.
00:23:57 [W] You can have a Java exporter that sends directly to your back-end monitoring system, or if you're going through the collector that Steve talked about the backend monitoring systems.
00:24:11 [W] They only have to write their exporter once for The Collector and then the Java Auto instrumentation flows.
00:24:17 [W] To that back-end system same with other language instrumentations.
00:24:22 [W] And speaking of other languages so Otto instrumentation is growing.
00:24:35 [W] We've got a JavaScript Community python Community Ruby community and dotnet is just getting going. So this is a the instrumentation is a great way to
00:24:48 [W] Unity because I'm you know, you can take your favorite language your favorite library and go and see how you can contribute instrumentation for that particular Library if your favorite
00:25:03 [W] Has already instrumented go and test that out see if it works the way you would expect as an expert in that library and let us know if we got something wrong.
00:25:16 [W] wrong. So again, that's a great way to get get started in the community.
00:25:20 [W] Cool, and next up. We will do a quick download kind of show you how to get started with both Java Auto instrumentation as well as the opentelemetry collector.
00:25:36 [W] So to kick us off here.
00:25:39 [W] I'm actually going to start up a Docker compose file and while it is booting up, I'll walk you through exactly what it's doing.
00:25:47 [W] So what I've done is I've taken the spring pet clinic microservices repository and it actually contains a Docker compose file made up of multiple. Java microservices is kind of
00:25:55 [W] And in this architecture diagram that you see here, so it's going to spin up a variety of different containers.
00:26:05 [W] And what we've done is actually modified it to add opentelemetry Java auto-determination into it have it sent to an opentelemetry collector and have it forward that data to is it conserver so we can actually see it on the other end.
00:26:17 [W] So from a deaf perspective, basically, what we did is add a collector EML file, so you actually can figure The opentelemetry Collector.
00:26:25 [W] And in this architecture diagram that you see here, so it's going to spin up a variety of different containers. And what we've done is actually modified it to add opentelemetry Java Auto instrumentation into it have it sent to an opentelemetry
00:26:36 [W] Asian will send data out as so we're just receiving over iot LP. And then we are going to export to a Zipkin endpoint.
00:26:48 [W] That is a different Docker file that is running inside of this microservices based architecture.
00:26:56 [W] So that's just a one-time config for the collector again, if I want to add different processors, I can go ahead and do that here in this case.
00:26:57 [W] It's just a pretty standard configuration next up.
00:27:02 [W] We went through the docker compose file and as trust mentioned you base.
00:27:04 [W] Ali just add this Java agent flag, so you have to go ahead and tell it where the jar is for the opentelemetry Java agent and then specify what the service name is.
00:27:18 [W] So we also set an environmental variable. So for each of the docker containers, we added that Java agent flag and we added the environmental variables that we see these as different Java services in our waterfall view or service graph depending on the
00:27:30 [W] Using so you can see that for all the different Docker containers and we added the opentelemetry collector as another Docker container that gets fired up into this Docker compose.
00:27:44 [W] It uses the collector EML file that we just showed at the beginning.
00:27:50 [W] The only final thing is that all the docker containers containers that you're seeing in the docker compose actually get generated through this Docker file at the end where we have to tell it to go grab the opentelemetry Java agent jar based on the latest version
00:27:59 [W] In the opentelemetry repository today, so that's really the only changes here. You'll notice know Java changes.
00:28:08 [W] No recompiling of the code.
00:28:20 [W] We've just pulled down this jar specified the Java agent set the service through environmental variable and deploy The opentelemetry Collector and the net result should be that we see Telemetry data coming through our system.
00:28:24 [W] So let's go ahead and see if that's happening. So we are in as if can hear we'll go ahead and look at the service name and you can see that services are
00:28:30 [W] Are starting to appear already? We can go ahead and look for individual traces and you can see the traces are starting to come into the system.
00:28:40 [W] So here we have a discovery server or service that's calling a config service.
00:28:46 [W] You can see that this is actually using the opentelemetry SDK and we actually get some sun to conventions and meta data automatically provided for us.
00:28:56 [W] So you can see this is restful Services. We can see the status code we can see what's methods being used. So again some
00:29:00 [W] Be rich information if there were errors like 400 500 level errors. They would also show up here and as the app gets hit more you'll actually see that a variety of additional microservices will start to show up as you can see now if we actually have several calls
00:29:15 [W] And so each individual request no matter which microservices hits it'll go ahead and generate Trace data for that.
00:29:26 [W] So again, very simple to get started.
00:29:31 [W] You can take basically any Java application that's using one of the supported libraries that trash showed earlier go ahead and add the the jar and collector and you can go ahead and send this to your back-end or you can even log it locally and just see what data is being generated.
00:29:41 [W] It's pretty easy to extend this like if you want to add additional metadata, you can do that through Environmental.
00:29:45 [W] Tables in the auto interpretation itself, or as a configuration addition to the opentelemetry collector quick and easy.
00:29:54 [W] yeah, so we're Steve and I were both super excited to share the opentelemetry work that's going on with the folks with new folks and we would love to have you join
00:30:16 [W] Join the conversation join in the project whether that's as a testing it and providing feedback providing code.
00:30:32 [W] There's a couple ways to get started.
00:30:35 [W] There's a couple of get er channels.
00:30:39 [W] If you post there you'll find a bunch of a bunch of people monitor those bunch of friendly folks join a Sig if you go to this link you can
00:30:47 [W] Can see find your again find your favorite programming language or your favorite topic like logging or metrics?
00:31:01 [W] And there's weekly Sig meetings and there's and yeah and like I mentioned earlier instrumentation is a great way to get started I think biased
00:31:11 [W] Take your favorite language.
00:31:15 [W] Take your favorite libraries.
00:31:18 [W] Go test it out if it's there and provide feedback or if it's not there ask for help on how to get started and we'd love to have we'd love to see you.
00:31:27 [W] And that wraps up our talk.
00:31:36 [W] Thanks so much for joining us and we hope to see you in the vault in the opentelemetry project soon or trying it out and providing feedback.
00:31:43 [W] Thanks a lot.
00:31:44 [W] All right.
00:31:55 [W] Thanks so much for joining us for the talk.
00:31:56 [W] really hope that you enjoyed it see that we have a variety of questions that have come in already actually looks like a good mix of collector and auto instrumentation.
00:32:09 [W] So I guess I'll take the first one and then trust you can take the next one on Java.
00:32:11 [W] First one was asked how does opentelemetry compared with?
00:32:14 [W] Laughs both in terms of functionality support for a wide variety of receivers and performance.
00:32:24 [W] So Telegraph is an agent it focuses a lot on metrics though.
00:32:27 [W] It does have a pretty broad logging support at this point.
00:32:33 [W] It is from in flux DB. So one difference is it's not a open source Foundation type project today.
00:32:36 [W] It's under in flux.
00:32:37 [W] All right.
00:32:42 [W] Thanks so much for joining us for the talk.
00:32:42 [W] really hope that you enjoyed it see that we have a variety of questions that have come in already actually looks like a good mix of collector and auto instrumentation.
00:32:43 [W] So I guess I'll take the first one and then trust you can take the next one on Java.
00:32:43 [W] First one was asked how does opentelemetry compared with Telegraph both in terms of functionality support for a wide variety of receivers and
00:32:44 [W] Performance.
00:32:46 [W] So Telegraph is an agent it focuses a lot on metrics though.
00:32:46 [W] It does have a pretty broad logging support at this point.
00:32:47 [W] It is from in flux DB. So one difference is it's not a open source Foundation type project today.
00:32:48 [W] It's under in flux.
00:32:48 [W] It's not part of cncf telegraph is written in ghost. That's a similarity between the two and four opentelemetry. We're really talking about the collector here because the collectors separate from the client.
00:32:50 [W] He's the telegraph agent today does not support distributed tracing at all. So it doesn't actually receive span information where the opentelemetry collector actually focuses on traces and spend information. First now
00:33:03 [W] Between the two and four opentelemetry.
00:33:04 [W] We're really talking about the collector here because the collectors separate from the client libraries.
00:33:04 [W] The telegraph agent today does not support distributed tracing at all.
00:33:05 [W] So it doesn't actually receive span information where the opentelemetry collector actually focuses on traces and spend information. First now has pretty broad metric support and very soon.
00:33:08 [W] Actually you see some of the initial logging support has already been added since we recorded this talk, so,
00:33:11 [W] Actually fluent forward support already added right now and soon there will be Splunk heck support added as well in terms of wide variety of receivers.
00:33:25 [W] So Telegraph does have a very large number of input type receivers that are available today given that Telegraph does Focus primarily on the metric side of the house.
00:33:35 [W] It has a Prometheus exporter and opentelemetry collector has a Prometheus receiver so you could actually have a telegraph be in front of the collector.
00:33:41 [W] So Telegraph could collect some things. Maybe the collector does not
00:33:42 [W] At least the port today and then send that to The Collector. So you have a single egress point or a single way of kind of configuring how the data is being processed.
00:33:53 [W] But yes, there is some amount of overlap there. And those are some of the differences both projects have performance numbers.
00:33:58 [W] You can go take a look at the GitHub repositories for that and both have a pretty easy way of getting started.
00:34:04 [W] So would love for you to try out either one provide some feedback on it.
00:34:08 [W] Trask you want to cover the next one?
00:34:10 [W] Yeah.
00:34:16 [W] So, is there a Min minimum Java version needed for instrumentation.
00:34:20 [W] And so that's actually a topic that were discussing currently the way it's probably going the way it's going right now the SDK can be used on Java 7 and above the
00:34:31 [W] Tatian will support Java 8 and above
00:34:37 [W] Perfect. If you're interested in that Community conversation, there is a GitHub issue on it as well that you can comment on.
00:34:47 [W] Next question.
00:34:50 [W] Is is there an exporter available for Prometheus?
00:34:50 [W] Yes, absolutely. So there's both tracing and Metric supports you have for tracing you have Zipkin and Jaeger are the open source ones that are provided out of the box for metrics its Prometheus both receiving and exporting provided out of the box then
00:35:05 [W] Tracing and metrics.
00:35:08 [W] That's the standard way for the opentelemetry project as a whole and then commercial ones can be added on top of that now it is a very pluggable architecture.
00:35:19 [W] So any other one could be written.
00:35:27 [W] So for example going back to the telegraph conversation there could be an exporter added to Telegraph or an output plug-in they call it to support iot LP natively and then the collector could receive all the data that's emitted from Telegraph.
00:35:31 [W] Next one is on job again.
00:35:36 [W] Yeah, so this is a great question.
00:35:38 [W] How does Otto instrumentation not lose the context when the application switches threads when processing requests.
00:35:52 [W] Do I have to instrument my thread pools reactive flows manually somehow and so no you don't need to do that manually the auto instrumentation we instrument.
00:36:02 [W] Executor Services we instrument real project reactor.
00:36:13 [W] We instrument kotlin co-routines so that we propagate the context across all of those and maintain your consistent Trace even across multiple threads and then
00:36:25 [W] Ace when those threads send out requests to Downstream services
00:36:31 [W] and I find that that question is actually asked pretty frequently but it is handled for you automatically which is which is the right answer a question around how does opentelemetry work with servicemeshcon Sly Castillo and linkerd E.
00:36:48 [W] So it's gol incurred e basically kind of a side car model.
00:36:52 [W] It's a proxy that sits next to your application.
00:36:58 [W] What's nice about those projects is that they come pre instrumented? They have ways of emitting traces metrics and logs for you automatically and they sit.
00:37:03 [W] Between every single application so they can actually inspect the traffic that is passing through.
00:37:15 [W] Thus they know what your application is doing at least based on the data that it's sending out or the data that it's receiving in so from a opentelemetry perspective.
00:37:16 [W] That's great.
00:37:18 [W] You can actually configure these servicemeshcon or or proxies like Envoy to send their Telemetry data to The opentelemetry Collector and that will be received because they follow Open Standards like Envoy support Zipkin.
00:37:31 [W] I believe linkerd he does as well. So they all support some sort of Open Standards.
00:37:33 [W] The data out. One thing worth noting is though in the case of distributed tracing at least just having servicemeshcon not necessarily give you distributed tracing and the reason for that is something called context propagation, which is how you distribute
00:37:48 [W] In the case of restful Services is actually passing headers around so maybe using V3 headers or w3c Trace contacts headers.
00:38:03 [W] Well, if your application doesn't actually pass the context actually passed the headers that are being received and transmitted through the servicemeshcon.
00:38:18 [W] Must have context propagation in your application.
00:38:24 [W] There's no way to automate that process most apps today do have a way of supporting this or developers can pretty easily enable the functionality.
00:38:33 [W] So use these just a matter of making sure that that's configured properly, but do note that at least in the case of tracing unique context propagation as well.
00:38:38 [W] Next question is what is the future as I understand it vision of logging?
00:38:46 [W] Yes. So opentelemetry started with tracing as kind of the first big push and so all of the client libraries today offer tracing support metrics was then the secondary Focus that is being added to a client libraries and
00:39:00 [W] Well, basically the specs for both tracing and metrics are going to be finalized very soon.
00:39:07 [W] There's active conversation going on in the community specifically the specification cigs regarding this to get the first stable release of both regarding logging logging was not part of the initial scope though.
00:39:21 [W] It was always plan for the project.
00:39:26 [W] And in fact open census was considering it prior to becoming part of opentelemetry logging is a little bit earlier, but there is a data model that has been approved.
00:39:30 [W] So we actually do things through called odep's and they're basically design docs. You'll actually see a project called Otep on the GitHub repository for opentelemetry.
00:39:43 [W] And so the data model for logging the initial version is approved and available and an implementation of that is now available in The opentelemetry Collector.
00:39:52 [W] So as I mentioned you will now see a fluent forward receiver which is able to receive logs. You can actually Define a pipeline and you can export that logging data as well.
00:39:59 [W] So it's an initial implementation for logging given the focus of
00:40:01 [W] Getting to GA which will primarily Focus around tracing and metrics.
00:40:10 [W] We're actively working as a whole Community to get that finalized for Autumn or later on this year.
00:40:17 [W] So very very soon and the case of logging the goal would be ideally to have a beta version available of that.
00:40:25 [W] Clearly. One of the things that is missing today is client Library support for the logging aspects because again, the focus has been on tracing on metrics.
00:40:26 [W] There is a log Sig that is available.
00:40:29 [W] A log slack I get her Channel.
00:40:32 [W] Sorry.
00:40:33 [W] We're on Gator for those types of conversations and you can also join The opentelemetry Collector Sig as well as we have the implementation currently underway for the longing side.
00:40:43 [W] Next question.
00:40:47 [W] Can we somehow exclude sensitive data from collection like GDP grpc.
00:40:54 [W] I Phi related data.
00:40:57 [W] Yeah, so you can there's a notion of processors.
00:40:59 [W] We have attribute processors.
00:41:04 [W] So the key value pairs that you see on spans are called attributes in opentelemetry lingo and you have the ability of redacting them hashing them changing them removing them through configuration.
00:41:14 [W] So that's totally possible.
00:41:14 [W] There's also a notion of span and resource processors which are additional types of metadata and they offer some of the same capabilities as well.
00:41:23 [W] And it's also a pluggable system.
00:41:29 [W] So it's easy to add other hashing mechanisms or other ways to kind of manipulate the bait the data as well.
00:41:35 [W] So if there's something you think that is missing, please feel free to open an issue or of course pull requests. Welcome, but some additional support already exists today, and we are aware of many active users of the system that use it for pii reduction type you
00:41:44 [W] cases
00:41:45 [W] I think that one's for you to ask.
00:41:51 [W] Easy to add other hashing mechanisms or other ways to kind of manipulate the bait the data as well.
00:42:02 [W] So if there's something you think that is missing, please feel free to open an issue or of course pull requests.
00:42:03 [W] Welcome, but some additional support already exists today and we are aware of many active users of the system that use it for pii reduction type use cases.
00:42:04 [W] I think that comes for you to ask.
00:42:04 [W] Yeah, what is the performance penalty when can expect enabling Java instrumentation reason being some Enterprise apps Telco banking the latency most the latency times are Paramount.
00:42:07 [W] Telco banking the latency most the latency times are Paramount.
00:42:12 [W] Yeah, so we some of the vendors have done some internal benchmarking with their we don't have anything public published at this point.
00:42:21 [W] That's something that we still need to do that said the overhead is very dependent on the application being monitored. So if the
00:42:30 [W] The we strongly recommend you, you know, running your benchmarks with and without it to measure the overhead in your environment in your application. And if you do see
00:42:45 [W] Serve overhead definitely Post open an issue.
00:42:51 [W] We would love to look into that.
00:42:52 [W] Great, and I think we're at times. So we're actually able to continue this conversation on slack. So please join the maintainers slack Channel and will be available there to answer a few more of the questions that you have.
00:43:06 [W] Thanks so much for having us.
00:43:07 [W] We really appreciate it.
00:43:08 [W] Thank you.
