CRI-O: Development Process & How to Contribute: KMVK-7998 - events@cncf.io - Tuesday, August 18, 2020 6:52 AM - 96 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:53 [W] Hello everyone and Welcome to our talk.
00:07:30 [W] My name is Peter hunt.
00:07:33 [W] I'm a software engineer for Red Hat working on openshift. I primarily Focus my time on the project cryo and pop man and Kahneman and other containerd related Technologies.
00:07:41 [W] Hello everyone.
00:07:45 [W] My name is Irving chamonix, and I'm a senior software engineer on the opentracing no team at Red Hat. I mainly work on cryo and other container tools such as bodman Builder and Scorpio.
00:07:53 [W] Today we're going to talk about how one can contribute to open source projects.
00:07:59 [W] Getting started with contributing to open source projects can be very difficult due to how many different projects there are and narrowing your scope down to the cncf doesn't really help that much either.
00:08:12 [W] There's just so many.
00:08:12 [W] So to make it easier for you today, we'll show you how to contribute to cryo.
00:08:17 [W] So what is cryo crime is a lightweight container engine focus on making kubernative containerd deployments a secure and seamless as possible.
00:08:27 [W] Cryo implements the kubernative containerd runtime interface.
00:08:33 [W] About how one can contribute to open source projects?
00:08:38 [W] Getting started with contributing to open source projects can be very difficult due to how many different projects there are and narrowing your scope down to the cncf doesn't really help that much either.
00:08:40 [W] There's just so many.
00:08:40 [W] So to make it easier for you today, we'll show you how to contribute to cryo.
00:08:41 [W] So what is cryo crime is a lightweight container engine focus on making kubernative containerd deployments a secure and seamless as possible cryo implements the kubernative container runtime interface.
00:08:43 [W] Hence the cri-o and cry o the O stands for open container initiative, which means that cryo supports all Jose compatible images as well as all OCR complaint run times such as Carter run CG visor and zeron
00:08:46 [W] the cry development process and bodies that Unix philosophy which states that you should design programs that do one thing to do it well and to work well with other programs to that end cry uses a number of components under the hood
00:09:01 [W] the boat images as well as all oci combined run times such as Carter run CG visor and cri-o
00:09:02 [W] the cry development process and bodies that Unix philosophy which states that you should design programs that do one thing to do it well and to work well with other programs to that end cry uses a number of components under the hood
00:09:05 [W] Different areas of the container space such as storage image management and networking.
00:09:08 [W] This way each building block of cryo can evolve at its own rate while cryo picks features that best supports kubernative requirements.
00:09:16 [W] We have other tools such as Padma and bilder and Scorpio that are built on top of the same components to address adjacent problems in the container space. So even more open source container based projects that you can all contribute to.
00:09:32 [W] Now, let's look at the Open Source process.
00:09:38 [W] So now that you have picked a project to work on the next step is to learn more about it.
00:09:46 [W] You should start by always going through the readme as well as any contribution guidelines available.
00:09:47 [W] Then you should clone the repository and try playing around with the project in your own environment change some code around add some new test cases. Don't be afraid to break some things.
00:09:58 [W] Another good source of information on any project is blog post or Talks by the maintainers.
00:10:07 [W] We really love talking about our babies.
00:10:13 [W] In fact, the crier repository has a dog called awesome dot MD with the links to articles talks tutorials and just about anything cry related.
00:10:20 [W] So now that you understand the project a high level you have clone the repository you've played around it with bit.
00:10:26 [W] The next step is to find something to work on all the repositories.
00:10:30 [W] An issues page which has a list of tasks that need to be done.
00:10:32 [W] two two main categories box and features
00:10:39 [W] But our one-day program doesn't behave as expected.
00:10:44 [W] They are generally found when users Dusty project and the wild or in their production environments on the other hand features can be thought of as nice to have things that help make the project even better
00:10:57 [W] upon by committee discussions through either issues or Sig meeting meetings
00:11:03 [W] Speaking of features here are some cool things.
00:11:09 [W] We're working on for the near future that would precipitated by the community dropping the infra container where it is not needed will improve the speed of containerized workloads.
00:11:23 [W] We're also adding cgroup V 2 and user name space support as well as increasing our unit.
00:11:23 [W] test coverage other exciting work includes integration of lipid with cryo and potentially moving some of her component over to rust to improve performance and everyone is welcome to contribute to these features.
00:11:35 [W] Now circling back to the issues page most repositories will have some variation of a good first issue label on their issues these labels highlight bugs are features that the maintainers have determined are of low difficulty.
00:11:52 [W] So new contributors will easily be able to pick them up.
00:11:54 [W] Once you build up your confidence and competence, the next step is to look for issues that have helped wanted on them. These are issues that maintainers need help with and are actively looking for Community contributors to assist on
00:12:07 [W] Finally another useful test to build your familiarity with projects is fixing the documentation contrary to popular belief maintainers are not perfect and there will be a type 1 errors and postdocs next.
00:12:23 [W] We'll have Peter walk us through a full workflow for contributing.
00:12:26 [W] Hello again.
00:12:31 [W] I'm now going to walk us through a demo of choosing an issue to work on submitting a pull request and then having that pull request merged going to start off by trying to figure out find an issue that we want to work on.
00:12:44 [W] So, let's look at the crowd Repository.
00:12:45 [W] So we've got a bunch of issues here, but I think this one that I was originally on seems like a pretty good candidate reading you is not confident enough.
00:13:01 [W] I think it can make the written we were confident.
00:13:10 [W] So I will decide this it's labeled the good first issue and I'm pretending to be a first time so I can say I can take this.
00:13:11 [W] I'm a ba.
00:13:13 [W] maintainer would assign me
00:13:16 [W] So now that I've chosen an issue we have to now decide on we had we should probably read the contributing guidelines for how the project works so many projects have contributed in
00:13:33 [W] Because you're getting dot MD or some other file cry was no different.
00:13:42 [W] Basically, they talk about some guidelines to keep the style of your contribution in order with the rest of the contributions.
00:13:47 [W] So a couple of specific things that crowd has you do it's kind of similar to the kubernetes guidelines for contributing require you to sign up your commits, which gives us an auditable log of all the contributions
00:14:00 [W] as for contributing require you to sign up your commits, which gives us an auditable log of all the contributions that allows us to thank people who make a good contribution and also follow up
00:14:06 [W] Who make a good contribution and also follow up with people who have made contribution that there's an issue with we also require some other things like release notes or documentation.
00:14:16 [W] Release notes or documentation, which is for showing users user facing changes and we like when there are updates to the test that if there's a Code change to
00:14:30 [W] To reveal regressions and also test your new Behavior.
00:14:43 [W] So now that we've you know, kind of looked at the contribution guidelines, let's go through the process of opening a PR.
00:14:48 [W] So we're going to do this is my get account going to push it origin read me confident.
00:14:54 [W] So now that we've created the branch, let's go and open a pull request.
00:15:02 [W] and pull request
00:15:05 [W] So we're going to move go from my Fork to the master.
00:15:12 [W] I'm going to fill in some information here this the kind of this is documentation.
00:15:18 [W] This is called crowd specific but it follows the form of kubernative.
00:15:20 [W] He's in many other projects you should
00:15:24 [W] We got a talk about how we fix it.
00:15:31 [W] So let's keep a ref to our issue.
00:15:32 [W] fixes that and a release note maybe more
00:15:44 [W] And these tests theoretically should pass before we merge the code.
00:16:12 [W] So let's now talk about the process for merging.
00:16:13 [W] So I've put up my PR what has to happen before my PR gets merged.
00:16:22 [W] So the cryo itself has some getting criterias. Every other project does before PR can get merged.
00:16:26 [W] We have many different tiers of tests.
00:16:29 [W] So we have the validation test, which chatbots.
00:16:30 [W] Check doc updates.
00:16:36 [W] Make sure that the git commits are saying check for release notes and most of these tests are automated so are so we you know, we bought can just tell us when a contributor has
00:16:46 [W] And getting criteria as every other project does before PR can get merged.
00:16:47 [W] We have many different tiers of tests.
00:16:48 [W] So we have the validation test which check doc updates make sure that the git commits are saying check for release notes and most of these tests are automated so are so we you know,
00:16:49 [W] and
00:16:49 [W] then we have some unit test which tests some internals in cryo.
00:16:54 [W] It's good for unit.
00:16:54 [W] Test coverage.
00:16:55 [W] And then integration test which tests cryo with cry cuddle.
00:17:05 [W] these are good for testing and crowd specific features that aren't necessarily covered in the communities and to end tests and then we have our end tests which are really the meat and potatoes of our testing suite and those cover kubernative in open shift and then test to make sure that
00:17:14 [W] It doesn't break the you know Upstream compatibility and finally for a PR to get merged.
00:17:24 [W] We need at least two. Look Goods me on a PR as well as we need a maintainer to approve it.
00:17:32 [W] So I'm going to show a an example of a PR that has all of these criteria so notice we have the approved label here and it has the
00:17:44 [W] Also, I'm gonna hold cancel and look at me because we have 120 people and I myself an improver and person who sent it is also an approver.
00:17:59 [W] So we're going to set this and it also has passed all the tests.
00:18:03 [W] So we know it's a good change.
00:18:05 [W] So that's an example of moving from the a choosing an issue to tracking all the way through if we had actually merged this change, which I don't think we will then it
00:18:22 [W] Issue see it's linked here.
00:18:28 [W] And but we won't do that today.
00:18:29 [W] So finally the question would be how do we get our fixes into our distributions or you know Downstream, so an open source, we have a flow that goes from Upstream to Downstream or Upstream is like this GitHub, you know
00:18:46 [W] sir, where we push all the changes and then those changes are validated and verified and tested until they go Downstream when they're packaged for your distributions or
00:19:01 [W] Friend, you know kubenetes environments cri-o has an easy distinction between upstream and downstream Upstream is get made and get master. And that is the main branch
00:19:17 [W] Downstream is all the release branch has we have the release branches corresponding to kubenetes releases.
00:19:28 [W] So are 118 would be our latest Downstream release as of the time of recording this typically Downstream only gets bug fixes because we want to keep Downstream stable and not disturb current users of the downstream and then
00:19:38 [W] Give us a feature.
00:19:43 [W] We're probably going to try to wait until next release to get it in.
00:19:44 [W] So that is the end of our talk.
00:19:50 [W] Thank you very much for coming.
00:19:53 [W] We have a couple more resources here.
00:19:56 [W] We have our website and a couple places.
00:20:00 [W] We're always happy to please reach out. If you have any questions, we'd love your contributions.
00:20:05 [W] I especially would like you to get rid of all of my bugs and fix all of my typos in the readme.
00:20:06 [W] Thank you very much for coming.
00:20:07 [W] there any questions?
00:20:09 [W] And most importantly we look forward to your contributions. Thank you.
00:20:13 [W] Hello.
00:20:22 [W] Hello, good morning from the East Coast.
00:20:29 [W] Yeah, good morning, very early morning.
00:20:30 [W] I'm not seeing any questions in the queue a area. Yeah, I'm not going either.
00:20:38 [W] What?
00:20:43 [W] Well, so we got a question.
00:20:48 [W] What is it good PR, which is a good question and a good PR is any PR that you know makes so anything is a good PR pretty much.
00:21:01 [W] Things have fixed has issues or yeah, the any any sort of PR as good and will be reviewed and considered.
00:21:21 [W] Yes.
00:21:27 [W] We're always looking for people to help us better our project. So any in contribution is always welcome.
00:21:36 [W] There is a follow-up question, but if it gets into near ending issues, what do we do?
00:21:45 [W] mmm
00:21:47 [W] I think that's more it we may be operating in a hypothetical space right now.
00:22:03 [W] So I if I'm not really sure what we would do in that situation if we kept getting into never-ending issues.
00:22:11 [W] I mean technically all software will always have bugs so will probably always be working and it keeps us gainfully employed.
00:22:18 [W] So I guess we'll just keep working on it.
00:22:18 [W] And if and if you want to keep up and you can keep fixing stuff.
00:22:24 [W] Sitting in a hypothetical space right now.
00:22:39 [W] So I if I'm not really sure what we would do in that situation if we kept getting into never-ending issues.
00:22:40 [W] I mean technically all software will always have bugs so will probably always be working and it keeps us gainfully employed.
00:22:40 [W] So I guess we'll just keep working on it. And if and if you want to keep helping you can keep
00:22:41 [W] fixing stuff
00:22:42 [W] I love question.
00:22:45 [W] Should we use the same programming language that is used in the project or can we choose and which were comfortable? Well for the most part all the contributions should be in the language.
00:22:46 [W] The program is written unless you're adding a competent that requires another language.
00:22:46 [W] For example our project even though it's mainly in go we have some confidence and see so yeah for the most part project you have to write up the language that the project is written in.
00:22:54 [W] Yes for your future.
00:22:57 [W] Yeah to the current project as it is you could rewrite it if you want in a different language.
00:23:03 [W] Yeah.
00:23:05 [W] Sorry, I cut you off. Go ahead.
00:23:12 [W] There's another question.
00:23:20 [W] Okay, let me ask what you have in cryo to help me to start.
00:23:27 [W] We have a bunch of issues already on our issues page. And as we mention of the TOC if you go there you will see labels the good first issue label or help wanted so we would say start with those another good starting point is going to the documentation
00:23:35 [W] Sorry, I cut you off. Go ahead.
00:23:35 [W] There's another question.
00:23:36 [W] Okay, let me ask what you have in crier to help me to start.
00:23:36 [W] We have a bunch of issues already on our issues page. And as we mention of the TOC if you go there you will see labels the good first issue label or help wanted so we would say start with those another good starting point is going to the documentation
00:23:38 [W] So open PR staff fix that first as well.
00:23:42 [W] and I'm I've posted the link to that good first issues as a response to that question, and I think I've published it I tried to so but yeah, that's just on
00:24:06 [W] Help Wanted good first issue gags
00:24:10 [W] Let's see.
00:24:15 [W] Could you tell something more about possible transition to watch why when and how so this is this is kind of a lofty goal that we have and the why is because the
00:24:31 [W] Time handles handle some things that it would actually be kind of nice if cryo itself could handle. So the big example is when one of the children processes like
00:24:47 [W] So that are conmen which runs a container process starts the it would be nice if crowd knew when that process ended and
00:25:02 [W] And Linux and the parent process gets a Sig child, which says hey my child is gone for some reason so you can investigate what went what happened, but the go runtime eats all the
00:25:18 [W] That get passed to the program so we can't actually get that that Sig child. So we have to kind of work around it.
00:25:30 [W] It's my hacky waves so that it's basically the limitations of go language itself and rest doesn't have the similar limitations, but also has the memory safety and it's you know, the big
00:25:44 [W] Um so that it's basically the limitations of go language itself and rust doesn't have the similar limitations, but also has the memory safety and it's you know, the big hype language now
00:25:46 [W] When is it's we don't really have a timeline.
00:25:57 [W] It's kind of just it's probably gonna end up being a hobby project for the maintainers and anyone in the community until it reaches a sufficient level of stability and then we would investigate, you know,
00:26:07 [W] you know cryo V 2 that would take over but there is such a big ecosystem and go right now that is quite unlikely that it'll happen in the near future some good places that were thinking
00:26:23 [W] Go to system and go right now.
00:26:23 [W] that is quite unlikely that it'll happen in the near future some good places that were thinking of starting is we have a we have you know, Kahneman the container manager that monitor that
00:26:31 [W] we have a we have you know, Kahneman the container manager that monitor that you know, we pass we cryo ask on Mont create the containers that's currently written in C and
00:26:38 [W] And then C and a good it could be a good candidate to write rust just to get you know started but and there's a couple of other small things that we could change. But yeah, the it it's going to be incremental and
00:26:52 [W] Like they want it's you know, it's a lofty goal rather than like an imminent change that we're trying to make.
00:27:00 [W] Okay, the next question is what is cgroup V2?
00:27:10 [W] Well, it's the version 2C groups. It it essentially makes management Resource Management much easier containerd as you can do it with ruthless mode.
00:27:22 [W] We do have support for it with carbon and Builder and we are working on adding support for for cryo and kubernative is as well. And if you're interested more in this there's actually a talk on cgroup V2 and kubernative sat-7 in.
00:27:33 [W] 25 minutes by Giuseppe and the runtime Strack so that was 7:45 a.m.
00:27:39 [W] ET.
00:27:42 [W] not sure what time zone you're in. So definitely check that out.
00:27:44 [W] Yeah.
00:27:50 [W] Yep.
00:27:51 [W] When do you meet so we have a cryo contributors meetings weekly on Thursdays at 2 p.m.
00:27:59 [W] Eastern time? I think information on it is on our readme on the project, right Peter.
00:28:05 [W] Yeah, it's the the actual agenda and everyone its on we have a Wiki page.
00:28:14 [W] So I'm going to also post this answer save and answer with that.
00:28:22 [W] that. So that's that's the location of the the weekly meeting.
00:28:28 [W] Yeah, so feel free to come and see we talk about stuff that we're doing in the cryo land.
00:28:35 [W] And the next question any slack Channel? Yes, we do have a sec channel. So our primary select channel is in the kubernative slack. So Kate dot IO and it's hash cryo.
00:28:53 [W] um the the weekly meeting
00:28:54 [W] Yeah, so feel free to come and see we talk about stuff that we're doing in the cryo land.
00:28:54 [W] And the next question any slack Channel?
00:28:55 [W] Yes.
00:28:55 [W] we do have a sec channel. So our primary select channel is in the kubernative slack. So Kate dot IO and it's hash cryo.
00:28:56 [W] I'm cool.
00:28:59 [W] Yep, and every she's already posted one.
00:29:01 [W] I'll put a direct link.
00:29:02 [W] I think that should work.
00:29:02 [W] I don't know.
00:29:03 [W] Let's see.
00:29:05 [W] so
00:29:08 [W] Yeah, so and you can also come in ask any questions there.
00:29:13 [W] Next option would cry over play soccer or opentracing.
00:29:22 [W] Yes and opentracing for Dex.
00:29:24 [W] cryo is a runtime that's being used.
00:29:25 [W] Are there any other questions?
00:29:40 [W] Doesn't look like anything else is popping up.
00:30:00 [W] Yep.
00:30:02 [W] They're going to be crowd for Windows anytime soon and the we're open for contributions.
00:30:24 [W] So the the main development team does not have any plans to extend support for any other architectures other than Linux because the main set of contributors work for
00:30:34 [W] distribution Susan red hat but we would write now the code is kind of broken up between different architectures and we would absolutely accept any patches and work with anyone who wants to
00:30:50 [W] Is kind of broken up between different architectures and we would absolutely accept any patches and work with anyone who wants to try to extend for Windows support or you know, BSD support.
00:30:57 [W] We absolutely accept that.
00:30:58 [W] All right.
00:31:25 [W] Any last questions?
00:31:27 [W] Don't think there are any more.
00:31:46 [W] Yeah, I don't think so.
00:31:48 [W] Oh, that's yep.
00:31:49 [W] All right.
00:31:52 [W] Well, thanks for joining everybody.
00:31:57 [W] And yeah, please reach out on the Krauss like the crowd slack Channel.
00:31:58 [W] Oh, yeah, there was one quick crowd as a support different Arc.
00:32:04 [W] Yes.
00:32:13 [W] We are could well, so we support just Linux as an operating system family.
00:32:19 [W] Don't think there are any more I don't think so.
00:32:21 [W] Oh, that's yep.
00:32:21 [W] All right.
00:32:21 [W] Well, thanks for joining everybody.
00:32:22 [W] And yeah, please reach out on the Krauss like the crowd slack Channel.
00:32:22 [W] Oh, yeah, there was one quick crowd as a sport different architectures.
00:32:23 [W] Yes.
00:32:23 [W] we are could well, so we support just Linux as an operating system family.
00:32:24 [W] It would be not super hard to extend it for BSD, but it would need to happen windows.
00:32:25 [W] no support for we don't really have support for PSD either and we we support different anynines.
00:32:29 [W] any
00:32:31 [W] any CPU architecture or instruction set that golang supports? We also support so and I believe we do or should have test in 32-bit. So if that would be the one area that I
00:32:47 [W] remember they have support for BSD other and we said we support different any any
00:32:48 [W] Any CPU architecture or instruction set that golang supports?
00:32:49 [W] We also support so and I believe we do or should have test in 32-bit. So if that would be the one area that I would be concerned about us running, but I think we should they're just maybe some like
00:32:53 [W] After the oil but yes.
00:32:58 [W] Yeah, well yeah thanks everyone for joining and please, you know reach out in the slack Channel or come to our weekly meeting and yeah, please, you know help us work
00:33:27 [W] Is you know reach out and the slack Channel or come to our weekly meeting? And yeah, please, you know, help us work on proud on working on it and we are happy to introduce you
00:33:30 [W] Been working on it and we are happy to introduce you to the community.
00:33:31 [W] Yeah, thank you all and we hope you enjoy the rest of your quad.
00:33:37 [W] Yes.
00:33:38 [W] Thank you.
