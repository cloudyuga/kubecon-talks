Building the Next Generation of Release Notes for Kubernetes and Beyond: QBAJ-4037 - events@cncf.io - Tuesday, August 18, 2020 8:28 AM - 69 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:01:12 [W] Welcome everybody to my talk about building the next generation of release notes for kubernative and Beyond before we start with the actual topic, please let me introduce myself.
00:01:25 [W] So hey all I'm Sasha.
00:01:30 [W] I'm part of the kubernative community since early 2019 and I'm an active contributor to kubernative and also some surrounding projects like Rio and container and times. I started to contribute
00:01:44 [W] From Mystic release perspective. So I participated in the secret. He's shadowing program in the early of 2019 and then I decided to contribute to the release notes of kubernative.
00:02:00 [W] And yeah that bring me up to implement multiple enhancements on the release notes and you can reach me out on GitHub if you want or on Twitter or for sure, you can also feel free to contact me on good the official kubernative slick.
00:02:13 [W] So what I'm going to talk about today, so the first thing I'd like to discuss is why do we even need release notes so why they are necessary and how can they can improve the overall product or generally an overall software product
00:02:29 [W] Topic is to talk about how kubernative solves that issue.
00:02:38 [W] So kubernative is a big software project as you may know and we have a lot of changes per the recycle.
00:02:43 [W] And how do we do it in kubernative the third point I would like to talk today is that different ways of displaying relevant information to users so we can write release notes more or less like a book and but there are also some more enhanced
00:02:57 [W] Versions available for variants available how we can display release notes in the more in a better way for the end users?
00:03:06 [W] Then I would like to speak about what we can and should automate and kubernative automation is a big Topic in kubernative because the project is so huge then I would like to speak about how to improve the tools for the future and what we already improved
00:03:22 [W] kubernative and more advanced topic like that is how we can utilize machine learning and natural language processing to make the kubernative release notes even more on a higher quality level or bring them to a higher quality level
00:03:38 [W] Point I would like to discuss with you today is how we can how we fight technical depth and the kubernative to release notes.
00:03:45 [W] This is always an ongoing topic and yeah, we always fight Legacy code from a day-to-day perspective.
00:03:51 [W] So why do we even need to release notes?
00:04:01 [W] So generally it would be nice to document user facing changes for a release and to improve the overall user experience.
00:04:07 [W] So what now we could ask what is the user facing change? So we have to speak about critical bug fixes, like see bees which are initially embargoed also notable feature additions for sure
00:04:18 [W] You to add them to release notes duplications and removers are very important to add them to the release notes. So then we can let the user know how to
00:04:29 [W] How do actually what has been removed from the release if the output format of an API changes, this is also worth mentioning in the release notes. For example, if the user has to take action on any change any code changed and we
00:04:45 [W] Parts as well and dependency changes can also will release node.
00:04:55 [W] This means for example, if we update the Googles and kubernative from 113 to 114 or the minimum required Go version in kubernative, then this has to be documented as well that the user is aware of that. They have to take action or change the built environment.
00:05:07 [W] So that's my change now require only snowed and to answer that question.
00:05:18 [W] I would like to point you to their official contributors guide and kubernative and this lives in kubernative / community on GitHub and has a dedicated section about the release notes.
00:05:29 [W] So here we can see that the question does my pull request need a release note has been already answered and for example, cri-o
00:05:37 [W] Changes and they are already mentioned. API changes are definitely will also release mode and also fixes of vulnerabilities like cves or fixing some known issues are also part should also be part of a release note. What is
00:05:53 [W] To have a release note of for example tests or changes to build infrastructure, even if they would affect other contributors, they may not affect actual users of kubernative. So they don't need a cooler release note at all.
00:06:09 [W] But
00:06:12 [W] what what should be part of a release note now?
00:06:20 [W] So yeah for sure.
00:06:30 [W] I really snow needs to be a clear concise description of the change, but the contents of the release note actually differs a lot from the from for example a commit message or things like that.
00:06:35 [W] For example, we should include in an indicator if the change has been added changed fixed removed the or depreciated M or if we changed any feature majority like
00:06:44 [W] eating second to GA for example, and in the commit message, we would write it the other way around because commit message is usually applied to changes so we can say okay and I will add that feature with my comb it and
00:06:58 [W] We usually publish release notes after release.
00:07:05 [W] So then we would use the past tense and say okay, we added some feature and also add some different necessary information for the you for the end users.
00:07:16 [W] So end users can be users which actually consume kubernative from a developer perspective or it's a real end user or even also system administrators can be our users for of kubernative as well.
00:07:27 [W] Then we would like to include
00:07:29 [W] an indicator if a user action is required and if they're mentioned their actual affected API and configuration Fields CLI command line Flags or enhancements and additionally a link to relevant user information documentation
00:07:44 [W] Also, very very welcome.
00:07:50 [W] So we mostly right up caps for kubernative to actually Implement enhancements and there we can link just link the cap in the release notes and then user should be fine if he wants to get more information about the actual change.
00:08:02 [W] So release notes might be revealed directly, but the code change this is the optimal case, but how can we achieve that kubernative solves that issue by actually putting the release notes directly at the pull request.
00:08:18 [W] Approaches and generating release notes directly from commit message.
00:08:23 [W] We are not that that is fine at all.
00:08:25 [W] I tried it with other other projects and the Paradigm Shift between the commit message and a pull request is too different to actually apply it accordingly.
00:08:34 [W] So this is an example pull request which has a dedicated release notes block and I can show you actually a real life example, for example, if we go to kubernative kubernative.
00:08:47 [W] Just pick a pull request.
00:08:52 [W] I just picked mine which has been merged some time ago. And then we see. Okay. We add Zack come she a versions Kudo pots, but what has actually changed here we go.
00:09:02 [W] We can document it directly in line with the pull request and also use inline markdown. For example, we can link the cap here directly as markdown, which is pretty comfortable and we also can add some additional
00:09:14 [W] Pick up again down here, which will be used consumed in different parts of the tooling.
00:09:20 [W] So now we are able to have a dedicated release notes block and this allows us for Tool based passing and inline markdown and reviewing it directly at the pull request.
00:09:35 [W] How do we do it in kubernative?
00:09:44 [W] So release cycle usually goes around about three months. The 118 release cycle has a bit and extended and we cut different kind of releases so we cut pre-releases. We have release candidates. We may have
00:09:53 [W] And then we have a final release and then release cycle ends.
00:10:01 [W] So in the overall release notes process, we have multiple participants.
00:10:06 [W] So we have seek release the release notes team. And on the other side. We have the Zeke release release engineering Branch management team. The release notes team uses Krell creditors our newly built kubernative
00:10:17 [W] Engineering Branch management team.
00:10:18 [W] the release notes team uses Krell creditors are newly built kubernative release toolbox and greater contains his up Kuma and which is called Krell release notes and this tool produces Jason and
00:10:26 [W] Greta contains is up Kuma and which is called cradle release notes and this tool produces Jason and markdown which will be used by different consumers.
00:10:32 [W] So the chasing goes into the release notes website, which I will show later on and the markdown goes into the actual release notes draft.
00:10:42 [W] So for every release we recreate a draft which will be maintained over the all over the whole release cycle and at the end of the release cycle, we will finish up or fix up the draft for
00:10:48 [W] will be correct spelling or we correct the actual content or merge different parts of the release notes together and then we release release it on the overall and it took em in tation side on the website and in the repository,
00:11:03 [W] Use case driven approach you soak release notes will do most of the work for us.
00:11:09 [W] It's executed manually on regular on a regular basis.
00:11:17 [W] For example on a release cut and it passes the release notes block from the pull request.
00:11:18 [W] They're created change flux of command.
00:11:22 [W] that's more or less the same but it will be executed from an echo and ago is a bash script which runs in Google Cloud build the during a release cut and the release energy.
00:11:31 [W] just triggers the boot and Anna go will take care of generating. The release notes locks.
00:11:37 [W] React real change. Look.
00:11:38 [W] This produces a markdown and that markdown goes into the repository.
00:11:46 [W] So we have to update the change log file in the repository.
00:11:47 [W] We have to create a markdown or HTML file for the release announcement later on and that has to be done on different branches.
00:12:00 [W] For example, if you create a release for 118, then we have to update the release 118 Branch as well as the master Branch interestingly. The docs team is not part of this overall process right now, but in the future we are.
00:12:10 [W] I need to have something like Krill docks and this should put the official documentation on kubernative.
00:12:13 [W] cri-o.
00:12:18 [W] So for example, we could also automate putting the release notes on kubernative cri-o after a release, but this is not implemented right now to have an idea about the actual tooling how
00:12:28 [W] Then we have to update the release 118 Branch as well as the master Branch interestingly. The docs team is not part of this overall process right now, but in the future, we are planning to have something like corral docks and this should put the official
00:12:30 [W] Most of the tools live and kubernative release. So this is a repository Kate's iot / release and if we look at the contents of this repository, then we can see we have multiple commands inside. For
00:12:44 [W] And also the credits up commands like yeah Krell release notes or Krell change look.
00:12:53 [W] And everything is should be written in goal. And it's based on a local library rebuild. So this can be found in PKG that we can find different parts of the library, which for example gives us great cooling around the notes.
00:13:09 [W] All credit is really really use case driven, but we want to have maybe we want to use the release notes Tooling in a different kind of environment as well for that. We created the release notes.
00:13:21 [W] It's just called release notes.
00:13:23 [W] It's a single binary which create is able to mostly handle all of the features.
00:13:29 [W] We Implement incredible using Corel as well.
00:13:33 [W] And yeah, we can try it out. For example if rerun release notes.
00:13:37 [W] And we can see okay release notes the kubernative release notes generator.
00:13:46 [W] We can specify for example a branch and we can add automatically at the dependency report.
00:13:54 [W] We can specify our starter and revision which is usually the most important input for that tool and we can also have different output formats like Jason or go template go template will result in markdown.
00:14:01 [W] And we can also choose different GitHub repositories organization stand kubernative, which gives us the possibility to reuse the tool and different repositories if they use the same pull request template for sure.
00:14:17 [W] So yeah, we also have some other nice features like adding a table of contents has been added recently and we can also record the API in GitHub into a single directory and then later on replay them.
00:14:28 [W] Directory this is especially useful for testing.
00:14:33 [W] So let's try it out.
00:14:36 [W] I just prepared some commands for you.
00:14:38 [W] We now run release notes.
00:14:45 [W] We choose a repository path. Let's generate the release notes from 118 5 2 and 18 6 and we have to use the release Branch for sure because otherwise we would collect the commits from the master and that's not what we want.
00:14:54 [W] And we do skip the dependency report for now. I think this takes too much time and doesn't really
00:15:01 [W] Ali matter for now, because usually dependency don't change between petrol leases in kubernative.
00:15:07 [W] So here we can see we are cloning the repository they are collecting the shots and the log messages will indicate also if a PR got past and also if PR for example down here contains a
00:15:18 [W] And now we should be able to look at our release notes.
00:15:30 [W] So we now locally generated release notes for one 18.6 and we can see that we have the two is Ze fixed. And yeah some API changes and fix some bugs and Recreations backs and Recreation should be usually the kind of
00:15:41 [W] We fix for for pet releases.
00:15:45 [W] Then we can also do another demo.
00:15:53 [W] For example, we could choose the template the template output.
00:15:56 [W] For example, let me just
00:15:58 [W] engine right directory. Yes.
00:16:03 [W] And I were I wrote a template and my home directory.
00:16:12 [W] It just looks like this and yeah, for example if I want to change the project name to my custom project and add some additional information to a release and then I can just add it to that file
00:16:24 [W] I now range over the release notes that are also built built in functions, which can be used directly from the patrol directly provided by the tooling then I just print out in a range or kinds and then the
00:16:40 [W] So let's try it out.
00:16:43 [W] Usually we do the same we just passed.
00:16:49 [W] the input charts get the commits and then generate a release notes from that and if we now look at our generated release notes and we can see that we change the header that we added some additional
00:17:05 [W] Generate the release notes and we can see that we change the header that we added some additional information to the release notes and then they are comes they will release notes.
00:17:13 [W] So this is a pretty nice way for other projects to consume the consume release notes for example in cryo.
00:17:19 [W] We created a dedicated release notes site where we can see that release notes for example contain additional information like download artifacts on our side.
00:17:29 [W] Right, and yeah, for example when the release has been generated and stuff like that.
00:17:33 [W] So on last example, I have I would like to show how to use it for example for a different repositories.
00:17:46 [W] So now we use specifically GitHub or cryo on the repository cryo.
00:17:50 [W] We also choose the release Branch 118 a different repository path for sure. The required also should be set to empty in that case because we don't have something like it kubernative CI robot, which usually merges the pull requests and
00:18:03 [W] For example for a different repositories.
00:18:04 [W] So now we use spiffe Ida GitHub or cryo on the repository cryo.
00:18:04 [W] We also choose the release Branch 118 a different repository path for sure. The required author should be set to empty in that case because we don't have something like kubernative Ci robot, which usually mirages the pull requests and
00:18:05 [W] Notes from one 1802 118 to and yeah, we at a table of contents in this case and that case as well.
00:18:12 [W] So that's the same process.
00:18:23 [W] We generate the release notes directly from the GitHub API. We get some arrows about some POS which actually don't go it's just one PR which doesn't contain a res notes message.
00:18:27 [W] That's no big deal.
00:18:29 [W] That's no problem at all.
00:18:35 [W] It can be a problem. But usually we would go to the pr and ask the offer to fix up the release notes.
00:18:36 [W] And if we now look at our demo 3 dot markdown and we can see that we have our table of contents generated that we have to release notes for one 18.0 and we did for the changes to 118.
00:18:52 [W] In 1832 and if to one 18.0 and yeah, we also have changes by a kind sorted and some are some of them aren't categorized maybe the kind is not available in the tooling on the and this is nothing really special and
00:19:07 [W] On the and this is nothing really special and but generally we apply some pre formattings to the release notes.
00:19:13 [W] For example be uppercase the first character and we sort them by their alphabet but alphabetical.
00:19:19 [W] Here we have the dependencies as well now and for example, we can see that we change some dependencies between the releases and there are also some nice links your let's see if they work.
00:19:34 [W] For example, we updated lip pot from 1902 in 1922. And then we have a link where we can see OK this has been changed and that's a lot. So also those dependency changes can have potentially influence on our release our
00:19:46 [W] All right.
00:19:51 [W] So now let's just check out. Well, I mean, for example if you look at credit change lock and we have a nice documentation here and yeah, and the documentation is kind of necessary because
00:20:06 [W] Use case driven and we have for example create change log requires a repository to be available because it will modify the repository and it also requires some also does some
00:20:22 [W] Like we modified repository as already mentioned we change the change log inside the repository and we also generate an HTML file which will be later on used as release announcement and got a flex are not really that important
00:20:38 [W] And we also generate an HTML file which will be later on used as release announcement.
00:20:40 [W] And yet the flex are not really that important to us right now.
00:20:42 [W] We can just run Krell on one 18.6 and also specify our repository and then we can see that there are also some release No degeneration, but after that it's automatically generating a table of contents and it's also
00:20:55 [W] We can just run chronosphere 10.6 and also specify our repository and then we can see that there are also some release No degeneration, but after that it's automatically generating a table of contents and it's also
00:20:56 [W] Dependencies dependency changes and for example, if we look above then we can see.
00:21:05 [W] That it has it uses the master Branch for that.
00:21:17 [W] It's all checks out the master Branch it modifies the master Branch, then it will check out the release branch and also modify the release branch and those modifications will in during the release process will be staged on Google Cloud packet, and if we decide to release
00:21:25 [W] Then we just have to run then. We just have to run the release and those changed files will later on be pushed onto the actual into the actual GitHub kubernative repository. And then we have the then releases will be basically done.
00:21:41 [W] So here we are. I chose Bridge the time for their dependency retriever.
00:21:47 [W] We can see that it has nothing changed and now Chris seems to be done.
00:21:54 [W] What we now have here is we have a potential log HTML file, which is the reason how it's meant for one 18.6 and nicely formatted in HTML, and we also can go
00:22:05 [W] Is Repository?
00:22:07 [W] and we see that it's a comment on top of the master Branch now which updates the directory 41:18 6 release from an ago and here we can see that we reach an Oreo generated the table of
00:22:23 [W] And ago and here we can see that we reach an Oreo generated the table of contents which is necessary because we changed the added something on top and then down below we can see that there are release notes available here.
00:22:32 [W] They have been added to the files. We can also check out the release branch.
00:22:45 [W] And if we also see that this branch is one commits ahead of the actual remote release branch and we can see okay.
00:22:48 [W] We also added or changed the page lock on the release Branch release branches usually contain only to change logs for they are for their releases.
00:22:59 [W] All right.
00:23:01 [W] It seems that I have a little picnic issue.
00:23:14 [W] I'm not sure if it just can see my screen but I will just assume that and let's have a look at Krell release notes credit release modes is as already mentioned.
00:23:28 [W] It's should be indicated by some human and the idea is that we have two possibilities. So we want to update the release notes draft, which I have already mentioned and all we want to update the Reason notes webassembly.
00:23:39 [W] Side and both should be could be possible.
00:23:44 [W] A little technical issue.
00:23:53 [W] I'm not sure if it just can see my screen.
00:23:53 [W] But I will just assume it and let's have a look at Krell release notes credit release notes is as already mentioned.
00:23:55 [W] It's should be indicated by some human and the idea is that we have two possibilities.
00:23:57 [W] So we want to update the release notes draft, which I have already mentioned and all we want to update the res notes website and both should be totally portable.
00:23:58 [W] in the first case, for example, if we now let's
00:24:00 [W] let's just have a look at the release notes generation for the website and we can do something like release notes.
00:24:03 [W] It's beautiful repository.
00:24:09 [W] For example, Tendulkar create website PR and I have to create to choose a different organization, which is my fork and yeah to specify a tech. If we run this then I would now expect a little back which is not fixed yet,
00:24:19 [W] Let's just have a look at the release notes generation for the left side and we can do something like release notes speechify to report Satori. For example Tendulkar create website PR and I have to create to choose
00:24:21 [W] Only on my system but the interesting part here is that it will automatically create a poo it tries to automatically create a pull request that generates the release notes and Json format and also finds director right set of
00:24:34 [W] And then it will check out the website, which is based on angular and we have to run npm install to actually install the modules.
00:24:45 [W] Is can also take a while.
00:24:50 [W] So we're young.
00:24:59 [W] It just installed the modules it modifies the repository in the right way that we can add the release notes to the right files and then it pushes the changes and then it should create to pull request the pull request creation
00:25:12 [W] It worked with a pull request has been created and the release notes generation is not done now.
00:25:19 [W] We can have a look into the release notes website which lives in kubernative 6 release notes and if we look at pull requests and we can see that we have 16 seconds ago created the patch the release notes for one 18.6
00:25:34 [W] Those can go to that pull request and actually check out if everything works Express expected.
00:25:41 [W] So we just added the acid which looks like this.
00:25:45 [W] And we added the release notes for one 18.6 on top of all our all releases.
00:25:53 [W] All right.
00:26:01 [W] So we have different ways of how to expose information to users.
00:26:19 [W] And yeah, as always that we can for example, not only create markdown which is nice for reading text like a book, but we can also create a machine readable format like Jason and yeah with pool provides a
00:26:24 [W] Have different ways of how to expose information to users. And yeah, as always that we can for example, not only create markdown, which is nice for reading text like a book, but we can also create a
00:26:26 [W] So let me share my screen again. I think you missed this that overall demo. So we run credit release notes generated the release notes and then at the end we created the pull request down here.
00:26:40 [W] We'll just pull request is now part of
00:26:43 [W] of community 6 release notes down here.
00:26:48 [W] And how does the website look like if we?
00:26:52 [W] If we check that out, we can go simply on reading notes that Kate's that I owe and then we can see that we have our overall release notes website.
00:27:06 [W] This website is pretty easy to use. So it gives us a different way of usually of the choose the display format of the release notes.
00:27:19 [W] For example, we can filter them by kind we can select multiple kinds but we can also check out different releases. And for example, we have just one kind API chance.
00:27:23 [W] Inch or one 18.5 and we also have some nice links to the actually pull requests and that way we can also send over this kind of information.
00:27:37 [W] For example, if we choose the free text.
00:27:38 [W] quick search
00:27:45 [W] we can for example search for Kube ATM and then we could all release notes which are mentioned which I mention incubate diem.
00:27:54 [W] So then that is the website and what we can and should automate the big questions or the release engineering tooling already in the great Square change log, which I already mentioned and we still run the SQL.
00:28:13 [W] The release notes tooling and we have some multiple enhancements and they will on the way how we can actually bring a better way of automation to those.
00:28:23 [W] So we need to find a way to improve ultimate is around the release notes Generation by still being able to change single release notes and that can be done if we improve Implement something like
00:28:36 [W] Release notes from a comet or maybe change the text. Then we can run something like release notes which maps from a directory and then we can apply the mapping.
00:29:05 [W] We can also think of extending or adding another set of feature to the release notes.
00:29:17 [W] And for example for CV is usually Stevie is contain multiple information like when they got published what is their score and yeah, maybe some linked issues and this is also a good opportunity for example for a mapping
00:29:26 [W] Yes, and this to automate the release notes Generation by just providing the mapping and this gives us also the possibility to be able to add embargoed cve information or just make them public right before the release
00:29:42 [W] Ability to be able to add embargoed cve information or just make them public right before the release.
00:29:44 [W] There's also allows us how to change release notes during the release cycle and not only at the end and the kubernetes release engineering tool box will provide the foundation for such enhancements which is built in to react basically
00:29:57 [W] During the release cycle and not only at the end and the kubernetes release engineering tool box will provide the foundation for such enhancements, which is built into react basically made for use given driven workflows.
00:30:01 [W] And we can also utilize machine learning and natural language processing.
00:30:08 [W] I wrote a little blog post if you want to know more about this and there's a repository available which basically implements a binary classifier which can be tested as well and I can I can try to share it if
00:30:20 [W] This and there's a repository available which basically implements a binary classifier which can be tested as well and I can I can try to share it if it works.
00:30:21 [W] the for example that is the repository for the actual repository and we can just create a new test issue and if we look at rather
00:30:36 [W] U.s. For example back
00:30:40 [W] just release note and we put it here. This is just for demoing purposes.
00:30:48 [W] And we can see that about will pick up that information. And yeah, it's
00:30:56 [W] said that this release note qualifies as kind back for round about 90% And labels it as back and if we now change the release notes to just something else.
00:31:11 [W] Let me just release node.
00:31:12 [W] Just write it, right then we can see that about edits.
00:31:20 [W] It's comment and labels are directly removed to the label and we'll also just change the prediction.
00:31:27 [W] So we can also change it to none.
00:31:32 [W] For example.
00:31:32 [W] And if we can refresh the site then the bot should remove his comment.
00:31:38 [W] It's comment.
00:31:39 [W] Yeah, so the idea is now to use this kind of functionality to actually be able
00:31:47 [W] to train a machine learning model, which does also implemented binary classifier, but not on applying a label as kind of like kind bug but more or less using the fixing fixed up release notes from the mapping to be able to
00:32:02 [W] Testify on if a release notes needs to be fixed or not needs to be fixed.
00:32:08 [W] We would need roundabout thousand entries to actually train a model to have a data set which actually works but the idea is to bring it like run it over several release releases.
00:32:22 [W] entries to actually train a model to have a data set which actually works but the idea is to bring it like run it over several release releases let the release notes team applied
00:32:26 [W] Release notes team applied mappings and then we probably can use the release notes mappings for training machine learning models, which is pretty pretty future pretty future topic. But the idea behind this is pretty pretty
00:32:38 [W] Active and then that's mostly it fixing technical depth.
00:32:48 [W] Yeah, the kubernative release engineering just has a fair amount of cash based technical depth Insight. We plan to move from those batch scripts to go line to recording based implementation like we did for the release notes tooling. For example, we have the initial implementation of the release notes were based on
00:32:59 [W] And now they'll be completely based on going and the next steps would be to port and ago and parts of our release lab slip back to going to actually be able to test those parts of the code as well.
00:33:14 [W] So it's an ongoing transformation and as well as the implementation of features needs to present kanai's. So this makes us in general a little bit slower than expected.
00:33:23 [W] And that's it.
00:33:28 [W] I really hope you enjoy to talk and now I'm open for questions. Thank you.
00:33:30 [W] Hello everybody.
00:33:34 [W] Yeah, I am.
00:33:36 [W] I'm happy to answer any questions.
00:33:45 [W] I'm first of all, I would like to apologize for the technical issues we had so that looks like that the screen sharing was sometimes a little bit blurry or even on the existing it and if you would like to have a better demo about it, and I'm happy to help
00:33:51 [W] That and that's it.
00:33:52 [W] I really hope you enjoyed the talk and now I'm open for questions.
00:33:52 [W] Thank you.
00:33:52 [W] Hello everybody.
00:33:52 [W] Yeah, I am.
00:33:52 [W] I'm happy to answer any questions.
00:33:54 [W] I'm first of all, I would like to apologize for the technical issues we had so that looks like that the screen sharing was sometimes a little bit blurry or even an existing it and if you would like to have a better demo about it, and I'm happy to help
00:33:55 [W] Those know damn well after the talk, I will be around in Cube town community which is channel 2 and the cloud native and Computing slack.
00:34:06 [W] And yeah, I don't see any questions at all.
00:34:09 [W] So I wish you a nice Cube continent. See you then. Bye.
