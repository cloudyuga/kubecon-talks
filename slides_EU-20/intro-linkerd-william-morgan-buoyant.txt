Intro: Linkerd: YKSD-5019 - events@cncf.io - Tuesday, August 18, 2020 12:27 PM - 46 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:05 [W] All right everyone.
00:02:11 [W] My name is William Morgan. And this is the intro to linkerd e talk Kook on EU 2020 virtual.
00:02:25 [W] I've given this talk a bunch of times the previous crew comes but I've never given the virtual version. So we'll see how it goes.
00:02:27 [W] So this is an introductory talk about linkerd E. I am going to keep it up to date with the latest information.
00:02:43 [W] So if you are familiar with linkerd e hopefully you'll still learn something and this and if you're not if you are still struggling with the concept of what is a servicemeshcon, don't worry, you're not alone.
00:02:49 [W] I will try my best to address those questions as well before I get started just a couple things. I wanted to say the first is that
00:02:57 [W] linkerd e is the community project and that's a big part of everything that we do so, you know by virtue of while watching this talk you are just as much a part of the linkerd E Community as I am, so
00:03:12 [W] As well before I get started just a couple things.
00:03:13 [W] I want to say. The first is that linkerd e is a community project and that's a big part of everything that we do so, you know by virtue of while watching this talk you are just as much a part of the linkerd E Community
00:03:14 [W] All of my Powers invested in me as linkerd e, you know maintainer or whatever to now bless you with the ability to run linkerd e yourself to talk about it to understand it
00:03:27 [W] We have very active community on slack and get up.
00:03:40 [W] And in fact, these slides are going to be presenting are also available to you there on if you go to linkerd E dot IO you will see them on the community section. So if you want to give talks about linkerd e yourself all of this material is available to you.
00:03:43 [W] Okay, so let's talk about linkerd EXO linkerd e is a servicemeshcon.
00:04:13 [W] But that's that's where we are. And as such we've been in production for almost four years at this point and a very healthy community of folks just like yourself centered in the slack Channel and the GitHub repo
00:04:29 [W] Linkerd, he was actually the very first servicemeshcon checked. It was the one that introduced the term servicemeshcon the world which you know, I was going to be kind of regret at this point, but that's that's where we are and as such we've been in production for
00:04:30 [W] Israel weekly Edge releases if you want to try the latest and greatest features stable releases probably every two to three months and linkerd he's committed to open governance. And of course it's hosted by the cncf.
00:04:43 [W] So it has a neutral home.
00:04:46 [W] So we do our best to make this a full fledged open source project.
00:04:51 [W] And of course very many adopters in production use cases around the world, which we feel very fortunate to have
00:04:59 [W] So, okay. Let's talk about what linkerd e actually does. So linkerd e like almost every servicemeshcon.
00:05:29 [W] Characteristics about them the first is you know from the linkerd e perspective. Of course, we try and provide these to you in a very very simple and lightweight package when we focus on operational Simplicity, especially so our whole kind of go linkerd e
00:05:45 [W] And all of those features is a couple kind of identifying characteristics about them.
00:05:46 [W] The first is you know from the linkerd e perspective, of course, we try and provide these to you in a very very simple and lightweight package and we focus on operational Simplicity especially so our whole kind of go linkerd e is to reduce the amount of
00:05:47 [W] The amount of overhead mental overhead that you as an operator of a servicemeshcon have to have now the interesting thing about these features right is that these are all things that we could accomplish in the application right things like service level golden metrics,
00:06:00 [W] And monitor your success rate and your latency distribution and your request volume and can draw service topologies and things like that based on metrics data.
00:06:14 [W] You can do that in the application and that's kind of been, you know, the standard approach you can use a p.m. Or something like that but the value that linkerd e provides as it does this at the platform layer, so it doesn't matter what language the applications are
00:06:27 [W] Our Frameworks are using doesn't matter.
00:06:32 [W] You know what the developers do what linkerd e can provide is it consistent and uniform layer of observability across all of your services, and it does that at the platform layer now, there's limits to that of course, right? Like we have to treat the services as black boxes
00:06:46 [W] Even inside we can't tell you know this, you know, this Loop is happening 200 times a second or anything like that, but we can give you the golden metrics things like success rate and latency that use a platform owner.
00:06:58 [W] really need and again, we can do the uniform across the entire infrastructure same thing with the reliability features things like retries and timeouts right linkerd.
00:07:09 [W] He's not a complete solution to reliability.
00:07:10 [W] There's a lot more you have to do but we can do retries at the platform Level under certain conditions and we can do them in a way. That's uniform and that's what
00:07:17 [W] A parameterised and so on and security of course linkerd.
00:07:23 [W] He's definitely not a full security solution is whole lot to security but we can provide Mutual TLS in between pods automatically at the platform layer without developers having to do anything and I'll talk a lot about that because there's a really interesting security angle
00:07:35 [W] All you know if you walk away with nothing, you know else from this talk.
00:07:43 [W] I want you to understand that the servicemeshcon vitess a set of features and it provides some at the platform layer, which means that you as a platform owner, you know, who is operating the kubernative kind of ecosystem for developers. You're actually decoupled from what the developers do so the developers.
00:07:57 [W] Maybe another way thing is that developers are then freed. They don't have to implement the TLs you get to do it at the platform layer. Okay. And so why do you care?
00:08:09 [W] I think I started touching on this already in the previous slide, right?
00:08:16 [W] So, you know all those fancy features right linkerd e gives them to platform owners, right? The s.res The Architects the folks who are adopting kubernative, right? We give them those those kind of critical Primitives that you need for operating a large Cloud
00:08:24 [W] And we give them to you in a way that has no developer involvement.
00:08:34 [W] I made these slides on Google slides and they looked a lot better before.
00:08:40 [W] I like exported them to PowerPoint. You can imagine these things like lining up the visually so, you know another way of thinking about it.
00:08:41 [W] Maybe is that linkerd?
00:08:45 [W] He's is it's not so much a solution for technical problems.
00:08:48 [W] It's a solution for socio technical problems.
00:08:53 [W] We want to decouple the developer and the platform side so that both sides have ownership and agency.
00:08:55 [W] In their goals for what they need to do for their job. So maybe that's a little too philosophical.
00:09:05 [W] Okay. So how is linkerd e design, right? There's only there's a lot of different ways of building a servicemeshcon.
00:09:24 [W] Cases where we can't quite do this magically for you, but as much as we can if you have a functioning kubernative plication, you install linkerd e application should continue functioning right? Like we shouldn't be shouldn't break stuff and you should be able to get there without
00:09:39 [W] Configurations we try and get you kind of basic servicemeshcon tonality without you having to do any configuration.
00:09:50 [W] The other next design principle for us is ultra light.
00:09:51 [W] So we want this to be the smallest lightest possible servicemeshcon.
00:10:10 [W] All right, like it's not just about making the computers do crazy things.
00:10:16 [W] There's a human in there.
00:10:20 [W] No, possibly someone like you that's to operate this inquest understand it most of justify it to your peers plus the defendant when like people are sending out something broken.
00:10:27 [W] I think it's this servicemeshcon introduced right?
00:10:32 [W] So we have to reduce that operational complexity in every possible way and we've just asked you to a top kubernative which is like a huge mound of apis and so on, you know,
00:10:40 [W] Then want you to like double the amount of complexity and then finally the final kind of real core goal for linkerd.
00:10:47 [W] He's to be Security First right?
00:10:54 [W] So by default everything should be if not enhancing security should at least not be making things worse and I'll talk a lot about them and then in the next couple slides so linkerd he has a control plane written in go got a data plane written in Rust which we'll talk about shortly.
00:11:03 [W] 3 with 1 dot X going to tan X and some lessons learned that I wrote an article on a year or two ago, which you're welcome to read if you want some boring bedtime reading like almost every servicemeshcon link your D has a control plane.
00:11:19 [W] It has a data plan, right and that data plane is these tiny little proxies micro micro proxies in our case.
00:11:27 [W] it next to your application intercept the calls in between services. So when a talks be actually talk through to proxies right talks to the proxy on a and in the proxy on be
00:11:34 [W] and because of that because it's handling both the client and server-side linkerd. You can do cool stuff.
00:11:43 [W] We can upgrade your HTTP one calls to http to calls. We can initiate and terminate TLS and monitor things on both sides and so on.
00:11:49 [W] And there are a couple variations in this but this is very similar to how most servicemeshcon work.
00:11:57 [W] I want to talk briefly about the kind of data plane side of things.
00:12:05 [W] So linkerd e is a little unique in the servicemeshcon that we do not use Envoy boy is a cncf project.
00:12:08 [W] It's a proxy.
00:12:11 [W] It's great used widely in production linkerd E uses something that's simply called linkerd E2 - proxy as you can imagine. It's not a general purpose processor like Envoy you can't take it.
00:12:20 [W] To do with linkerd view we can have a security kind of foundation written in Rust which allows us to sidestep a whole class of memory of only be vulnerable teas that are often present in C and C++ applications.
00:12:49 [W] We can be super fast and super light, of course.
00:12:55 [W] We do have regular third-party security audits for the data plane, especially thanks to the cncf and it's built on this very modern asynchronous Network stack kind of the state-of-the-art networking and
00:13:04 [W] The rest ecosystem projects like Tokyo and Hyper and H2 and of course like all of linkerd 800% Open Source and a hundred percent awesome.
00:13:19 [W] And so if you are ever interested in learning what state-of-the-art rust Network programming looks like please come check out that repo and we'd love to have you get involved.
00:13:28 [W] I mentioned we had a security audit they wrote some really really nice things about us.
00:13:33 [W] No need to really go into the details.
00:13:34 [W] It's up in the GitHub repo. So check it out. If you were into that sort of thing.
00:13:40 [W] We had some benchmarks run.
00:13:51 [W] This is now about a year old. So there's been a couple different versions of linkerd EST Au since then and we're going to try and update this but at least as of coop con be last year huge difference in performance.
00:13:58 [W] I mentioned we had a security audit they wrote some really really nice things about us.
00:13:59 [W] No need to really go into the details, but it's up in the GitHub repo. So check it out. If you were into that sort of thing.
00:13:59 [W] We had some benchmarks run.
00:14:00 [W] This is now about a year old. So there's been a couple different versions of linkerd e and Castillo since then and we're going to try and update this but at least as of coop con he last year.
00:14:01 [W] Huge difference in performance.
00:14:02 [W] I think largely in part to the kind of micro micro proxy that we use but of course still still more expensive than not using a servicemeshcon.
00:14:09 [W] All right, you're always going to pay a cost.
00:14:12 [W] So we want to minimize a cost want to give you the features maximize the features and minimize.
00:14:21 [W] So if you search for a convoke inch marks, you will get all of the Gory details there and then kind of the most recent set of content.
00:14:26 [W] Aunt or set of features that we've been focusing on is this idea of multi cluster communication?
00:14:41 [W] So linkerd e actually provides this kind of seamless secure Communication in between pods, right?
00:14:50 [W] So I mentioned already I mentioned that you know, the moment that you install linkerd e TLS is enabled in between meshmark Z at least if they're speaking HD.
00:14:56 [W] It's enabled automatically and you don't have to do anything as part of that. Right? I think if if we go back to our let me go back to the architecture diagram you can see in there was actually this little thing called the certificate Authority which
00:15:11 [W] That whenever I think of if we go back to our let me go back to the architecture diagram you can see in there was actually this little thing called the certificate Authority which is going to issue certificates is going to send those to the proxies of proxies or
00:15:15 [W] With them it's going to rotate them. Every 24 hours are going to be tied in terms of TLS identity to the kubernative service account of the Pod self.
00:15:28 [W] So we have this really nice kind of zero trust model where the pods themselves are enforcing security boundaries and both ensuring that just confidential but although not just confidentiality, but also also
00:15:41 [W] The communication between them right and so with linkerd e 2.8 which was out last month when I go back to the diagram here. We extend that same model to cross cluster communication.
00:15:56 [W] So if you are ever in a world where you have to communicate between kubeedge clusters, it's not as easy as it should be and so the multi cluster features in 2.8 kind of met a couple design goals.
00:16:11 [W] The first was we wanted to have a unified trust domain across all the clothes.
00:16:12 [W] Here's what that means is we wanted the the same kind of security, you know Mutual TLS based security Primitives to extend to this communication because the communication with actually going to be happening over to the open internet.
00:16:26 [W] All right, and we wanted to do to have we need to have that so that you can have head erogenous clusters.
00:16:34 [W] So it doesn't matter whether the Clusters are in different networks different Cloud providers or on-premise or not.
00:16:38 [W] Everything should just work but at the same time separate failure to meet so unified trust domain.
00:16:45 [W] Separate failure demands of one cluster goes down.
00:16:48 [W] That doesn't mean that means that it doesn't require other customers also going down that way and providing a uniform model for doing this communication and way that's transparent to the application.
00:16:58 [W] So you as the application can make a call if you're a and I want to talk to be make a call to be and you are actually not exposed to weather.
00:17:07 [W] I can send a portion of your traffic to the local a in a portion to a remote a or you can split traffic across it to different remote versions.
00:17:21 [W] Sorry of B, and that's all done in a way that's transparent to the application. So super cool set of functionality there that I'm really happy about.
00:17:31 [W] Okay, so, you know it is
00:17:35 [W] I don't like talking about other open source projects, but unfortunately this
00:17:41 [W] Question comes up like all the time.
00:17:47 [W] So I always feel obligated to kind of address it head-on, you know, feel free to you know, add questions and and so on I'll do my best to answer it answer these in a way that is kind of honest and forthright
00:17:58 [W] These days especially come to linkerd E from this world.
00:18:13 [W] So they've their introduction to the servicemeshcon was sto and now they're coming to linkerd e and you know, I kind of want to know how these things compare and contrast the way I like to think about this as a kind of comes down to what you need and enough servicemeshcon. If you look at the themes of the two projects and
00:18:18 [W] The way I like to think about this as a kind of comes down to what you need and in a servicemeshcon, if you look at the themes of the two projects and trying to characterize its into this gracious away as possible, you know, there's a lot of features in this, you know, and it's you who wants to
00:18:25 [W] As gracious away as possible, you know, there's a lot of features in this, you know in the studio wants to accomplish a lot of things and they want to accomplish it in a lot of different environments.
00:18:29 [W] Linkerd e is kind of takes a very different Focus which is we actually want to do the bare minimum want to do the bare minimum that we think is necessary to build a secure reliable the route trust ready kubernative.
00:18:45 [W] He's a plication. So our focus is on being a small and as lightweight as possible and giving you just a bare minimum features in the bare minimum kind of complexity that we can get away with while still accomplishing that goal.
00:18:58 [W] also Focus very heavily on kubernative. So it is
00:18:59 [W] Currently not even possible to really run linkerd e upside of kubernative.
00:19:05 [W] You can obviously make calls, you know to non kubernative resources, like that's a fact of life for all for almost all of us, you know, unless you're in very new green fill environments and also means that were much more with much more focused feature set.
00:19:19 [W] His feature set. So we really try and do just the things that we the bare minimum to get away with accomplishing that goal some like I said happy to answer more questions about that both great projects.
00:19:32 [W] Okay, and that's really kind of the end of this introductory session.
00:19:45 [W] There's a lot more material on linkerd E dot IO, we've got a huge number of documents of docks and tutorials and blog posts and there's a like I said a thriving Community about
00:19:55 [W] Linkerd E de Ajo, you can hop in there and ask people, you know any time of day or night.
00:20:01 [W] There's someone in there. Well, you know, probably someone in there ready to help you out.
00:20:07 [W] We do have a set of mailing lists where we do kind of formal announcements we have monthly Community calls. Actually the one this month is happening.
00:20:19 [W] Well by the time you see this it will have already happened. But the August 1 will be happening kind of last Wednesday of August and formal third party security audience.
00:20:26 [W] It's audits. So we have a really friendly welcoming Community.
00:20:31 [W] That's one of the things that I'm really proud of and people always point out when they when they come and ask us questions.
00:20:40 [W] So please get involved and like I said, I want you to consider yourself a member of the community just as much as I am.
00:20:43 [W] This is a community project is hosted by the cncf and it is a servicemeshcon.
00:20:46 [W] It's for everyone.
00:20:48 [W] thank you very much. Again. My name was William Morgan and please ask me some questions.
00:20:54 [W] right
00:21:01 [W] Well, now you are getting the live William intellicus. The Lively has a hat.
00:21:14 [W] Looks like we got about 10 minutes for questions, which is great and I see a whole bunch of questions in here.
00:21:15 [W] It's like room so feel free to join me there and I'll continue this conversation even after the official Q&A period is over.
00:21:37 [W] So let me go through and answer a couple of these questions so first.
00:21:38 [W] thanks for for joining me for this.
00:21:43 [W] I know the virtual Farm it's like little funny, but I'll do my best.
00:21:45 [W] Okay.
00:21:48 [W] So Alec asks, if the need arises to change from one servicemeshcon another you need to rewrite everything or can you convert my grape easily?
00:21:54 [W] That's a really good question answer.
00:21:56 [W] It's a little different for four different servicemeshcon think for better for worse.
00:22:08 [W] It's easy to rip linkerd e out because kind of the whole point of you know, linkerd e that we do all the stuff without you having to change your application.
00:22:12 [W] So, you know, certainly from the code change perspective you can pull it out and like you shouldn't have to change anything beyond that.
00:22:18 [W] I'm hoping that you know, once you do that, you'll realize oh my gosh, you know all the TLs and load balancing would have professionally making things really good for us, but I'd say generally speaking the point of
00:22:27 [W] The servicemeshcon stew be you know kind of decoupled from the application.
00:22:34 [W] So hopefully it shouldn't be too hard to move from one to the other.
00:22:36 [W] So Alec. Hopefully an answer your question.
00:22:41 [W] Martin asks a really good one.
00:22:44 [W] The code change perspective you can pull it out and like you shouldn't have to change anything beyond that.
00:22:56 [W] I'm hoping that you know, once you do that, you'll realize oh my gosh, you know all the TLs and load balancing would have professionally making things really good for us, but I'd say generally speaking the point of the servicemeshcon stew be, you know, kind of decoupled from the application.
00:22:58 [W] So hopefully it shouldn't be too hard to move from one to the other.
00:22:58 [W] So Alec hopefully an answer your question Martinez a really good one.
00:22:59 [W] Um, yes, what are commonly requested features that linkerd e does not have plans to implement that doesn't have or doesn't have plans a moment.
00:23:02 [W] So that's yeah.
00:23:02 [W] That's great.
00:23:03 [W] I'd say one common set of features. We get asked for are things that belong on Ingress. So linkerd e does not ship with an Ingress layer. We instead ask you to like install one of the seven hundred different,
00:23:10 [W] Features we get asked for are things that belong on Ingress.
00:23:10 [W] So linkerd e does not ship with an Ingress layer. We instead ask you to like install one of the seven hundred different, you know, great Ingress projects.
00:23:15 [W] So things like I saw there was another question around y DC connect and things like that.
00:23:19 [W] all handled at Ingress and you know, I don't want linkerd e to do Ingress or any so many good projects for doing that. So that's one come
00:23:26 [W] an example we actually resisted distributed tracing for a long time because sounds like ass doesn't really fit into the servicemeshcon do distributed tracing in a way that you know involves no code changes, but eventually gave up and Implement that so, you know, I guess if you ask for something
00:23:41 [W] It doesn't really fit into the servicemeshcon do distributed tracing in a way that you know involves no code changes, but eventually gave up and implemented that so, you know, I guess if you ask for something enough times eventually Won't Give Up.
00:23:45 [W] So Martin.
00:23:46 [W] Those are two examples for you.
00:23:47 [W] Thanks for that question Rafael you ask how do I DC connect?
00:23:54 [W] So no, we don't support that.
00:23:56 [W] We don't plan to that.
00:23:57 [W] You handled that that I think wrestler.
00:23:58 [W] Okay, so, let's see.
00:24:03 [W] I'm going to run through some of these other questions here.
00:24:04 [W] Alejandro asks, how can someone write Integrations for linkerd?
00:24:12 [W] E2 - proxy.
00:24:13 [W] Are you planning on providing proxy wesam filters for that's a really good question.
00:24:26 [W] Yeah, so, you know linkerd e 1 dot X, I didn't really talk about this in the too much in this intro session. But you know the original version of linkerd equals on the jvm jvm was horrible in a lot of ways but one thing it gave us which is awesome. So I had a really nice plug-in model
00:24:32 [W] You know, we kind of lost that when we re-implemented things and rust, so if you want to do a data playing proxy and compiled language, like rust something like well as mm starts thinking really really really appealing.
00:24:48 [W] So yeah, I would say tentatively that's the way we would do it.
00:24:56 [W] it. And ideally we would do it in a way where we can make use of the same way as mm, you know proxy plugins that the rest of the world is using. So right now that's not in-toto.
00:25:03 [W] In linkerd E2 proxy, but it is on the road map. And if you want to get involved in like the very cool intersection of rust and wasm and servicemeshcon.
00:25:18 [W] Okay. So let's take a look here will spiffe e the taken on in the near future.
00:25:31 [W] This is a question from Rio will spiffe you be taking on the near future for the identity system with their svi deeds.
00:25:35 [W] We've been looking at the spiffe E project so far.
00:25:43 [W] it hasn't been compelling enough to really bite the bullet and implement it the way we've done identity, you know in linkerd E with all the mpls stuff so far as we tied to servicemeshcon.
00:25:48 [W] Only speaking of something that we are aware of and you know probably will be a topic of discussion.
00:26:09 [W] So thank you for that question Rio has very interesting question from them who asks can linkerd e also communicate with other servicemeshcon.
00:26:31 [W] Third and you know, they're all talking to each other.
00:26:37 [W] So I guess at the basic level.
00:26:37 [W] Yes, you know, you won't have the like em TLS stuff working probably in a really unified way. Like you'll have to treat this as like like the
00:26:52 [W] You know, they're all talking to each other.
00:26:53 [W] So I guess at the basic level.
00:26:53 [W] Yes, you know, you won't have the like em TLS stuff working probably in a really unified way. Like you'll have to treat this as like like the
00:26:54 [W] Medication will have to be done like through Ingress or something.
00:26:59 [W] I don't know you have to treat these all I guess it's like external.
00:27:01 [W] It's like separate clusters, which is a little different from like, you know, if you're running linkerd et multi cluster, but yes at its heart you can communicate with other servicemeshcon.
00:27:16 [W] Okay, so thank you for that question.
00:27:21 [W] Okay.
00:27:23 [W] Let's see. What else is in here.
00:27:26 [W] You folks have asked some really great questions.
00:27:26 [W] Reow reow asks. Will MTL us for TCP be supported.
00:27:34 [W] Yes.
00:27:35 [W] Yes.
00:27:37 [W] Yes, that's the headline feature in the 2.9 release which is the next release expected this year. So all of the fancy M tll stuff that I talked about so far is on by default for HTTP traffic grpc
00:27:50 [W] If you're doing something like Kafka or postgres or something, that's not a chibi than currently we can do until us until 2.9 chips, and then we should have that all sorted out.
00:28:05 [W] So thank you Rio for that question.
00:28:05 [W] Whoo-hoo.
00:28:07 [W] All right.
00:28:09 [W] I'm running through these things.
00:28:12 [W] Okay does linkerd e working openshift V4 of the question from / probably it should you know, there's no real dependencies that linkerd me has on anything beyond kubernative
00:28:23 [W] Things like the way you have your security policies and stuff configured makes it harder to install linkerd e but we have this command called linkerd e check - - pre and if you run that it will validate against the cluster
00:28:39 [W] Has everything that it needs and it'll cover like 95% of cases. So if you have a openshift fee for cluster out there run linkerd e check - sets pre against it and it'll tell you exactly what will happen. If you try to install linkerd e
00:28:55 [W] Alright, so thank you for that question.
00:29:02 [W] Let's see what else we have.
00:29:05 [W] How cumbersome so Gordon us.
00:29:08 [W] how cumbersome or not is it to debug issues that may pop up inside of linkerd e that's a that's an excellent question.
00:29:20 [W] One of the first things that happened when you install a servicemeshcon.
00:29:35 [W] That when you know, the angry mob is outside you your gate, you know, ask me what's going on.
00:29:42 [W] You can actually defend yourself.
00:29:43 [W] So, you know, the first thing is we have tools like linkerd e check and and so on the dashboard linkerd a dashboard itself shows you exactly what's happening on the in the control plane, you know status of everything. Actually the control
00:29:57 [W] The data plane, which means that the same tools we give you around metrics observability mpls and everything for your applications.
00:30:08 [W] Actually you can use those for the control plane itself.
00:30:12 [W] So we basically try and make it as easy as possible to understand the state of the linkerd E control plane because that's a big part of the operational burden right?
00:30:19 [W] You don't just install it on the new like okay everything works and things do break and you have to understand where that problem is.
00:30:24 [W] Is it somewhere in kubernative?
00:30:26 [W] Is it somewhere in linkerd E. Is it somewhere in the application?
00:30:27 [W] application? Mostly it's in the application. That's my
00:30:28 [W] We're deepness.
00:30:32 [W] Okay, let's see.
00:30:35 [W] I think we probably have time for one or two more. So let's run through here.
00:30:42 [W] So let's Terrace asks looking at the getting started guide.
00:30:47 [W] Okay. So if you go to linkerd E dot IO and I'm getting started. There's up like five step walkthrough.
00:30:50 [W] Do I need to manually attach linkerd e to each application it would just apply it to a current cluster and it worse. Yeah. So the way it works is just going to kind of a to snyk.
00:30:59 [W] Mesh location right in meshmark to add the data plane. And in order to do that, you can do that like one service at a time.
00:31:28 [W] You can even do it one pot at a time if you want, but that's what actually activates the servicemeshcon that application. So you have this way of doing things incrementally. So, you know, you said manually is it manually, you know, you can do it in a variety of ways we use annotations and proxy
00:31:31 [W] Can read Latin The Docks but basically you can do it incrementally. So hopefully that makes sense left-terrorists. Okay.
00:31:44 [W] Sounds like we're basically out of time. We have to view a sponsor message at this point.
00:31:45 [W] So we'll take a little commercial break.
00:31:51 [W] But once again, I'll be on the slack Channel and it to - koukin - maintainers, so please hit me up there. I'll be hanging out for the next 15-20 minutes and thank you for attending the linkerd E intro talk. I really appreciate it.
