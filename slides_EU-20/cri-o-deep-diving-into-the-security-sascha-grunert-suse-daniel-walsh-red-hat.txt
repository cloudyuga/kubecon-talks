CRI-O: Deep Diving into the Security: QRAE-4078 - events@cncf.io - Wednesday, August 19, 2020 7:43 AM - 45 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:01:42 [W] Welcome everybody to our cryo security deep dive.
00:01:48 [W] I'm Sasha.
00:01:50 [W] I'm one of the hosts today and I'm like maintainer of cryo and one of the presenters today and I'm happy to serve for you as well. And I also have then wash on my presentation who is also very well known for
00:02:03 [W] Run times like real and also some other container and times like pot man Skopje.
00:02:10 [W] Oh Builder and many more.
00:02:14 [W] So what are we going to talk about today?
00:02:19 [W] So first of all, I would like to talk a little bit about the basics of containerd security. So
00:02:20 [W] So generally we have to talk a little bit about how we want to have containerd Security in terms of actual kubernative and things like that after that.
00:02:37 [W] I would like to talk a little bit about how we secure container images and for example containers ining and containerd encryption then and after that we can speak about actual container security features like Linux capabilities seccomp.
00:02:52 [W] Selena works and also a farmer and after that we will give a little look out into the next namespace changes in cryo, which are yeah, one of the upcoming topics and container and 10 development.
00:03:07 [W] so basic containers security principles and first of all, yeah, we have to choose the right amount of isolation when it comes to securing a containerd workloads and this can be very hot because we have to deal with different kinds of layers of containerd security
00:03:23 [W] G in runtime slack run C and we have also Security in terms of for cry or for example, and on top of that. We also have to speak about containerd Security in conjunction with kubernetes.
00:03:39 [W] So we have to speak about features like how to utilize seccomp silly knocks and even a palm or to make ours a workloads more secure probably fault.
00:03:46 [W] So this basically means that containerd workloads have to run with the least possible privileges.
00:03:59 [W] So but this doesn't only apply to container to running containers and also applies to container images so they have to be secured as well and the container content for X for example the default execution parameters of the container
00:04:07 [W] Can be reduced to reduce the actual attack surface from a container on time.
00:04:18 [W] So Distributing container images should also happen in a secure fashion.
00:04:28 [W] So we have to deal with container and Corruption and also containers ining but what is actually a privilege container so we have I found multiple definitions of across different projects, like kubernative and Telco so
00:04:33 [W] Have most of the route capabilities on the host machine.
00:04:45 [W] So for example, if we speak about kubernative, then the pot sandbox shares the network Pit and the IPC namespaces of the host running privilege containers also disables features like a Parmer seccomp and Clinics capabilities at
00:04:52 [W] Of the host running privilege containers also disables features like a Parmer seccomp and Clinics capabilities at all.
00:04:59 [W] So you have to be aware that if we run containers and privileged mode, then we can't use features like a palm or seccomp it in the same the same manner.
00:05:02 [W] Privilege containers also Mount critical paths into the Container for example, the host devices and kubernative for example supports privilege containers by the pot spec so we can specify a
00:05:18 [W] But spec so we can specify a pot spec and containers privilege security context and then we can set the privilege to true.
00:05:30 [W] If we said just one container in the overall workload to 2 then the sandbox will also run and privileged mode at this is root caused by because the pots back doesn't have the privilege field and
00:05:38 [W] So what is the least privileged container we want to run?
00:05:46 [W] So restricting pot and containerd security context to a bare minimum.
00:05:52 [W] It's actually a good approach.
00:05:58 [W] So we don't want to share the host pit or IPC name spaces which are also off by default.
00:05:59 [W] So we are good to go.
00:06:05 [W] Then we would like to run the workload as non-root user and an unprivileged group. So this can be done by for example, if you put the container image, then we can.
00:06:11 [W] If I all set default is users that we don't have a need to actually run the containerd workloads root user.
00:06:21 [W] We also want to drop the necessary capabilities from the container and in the best case, you would throw a ball cap abilities from the workload, but that is not possible in every case because usually capabilities ban and
00:06:32 [W] The switch can be more Frank renewal adapted by for example, like features like seccomp.
00:06:38 [W] We also may want to disable the privilege escalation tufin pit that higher or privileges can be accessed by the parent process.
00:06:46 [W] This is on by default and I can just recommend to turn it off and then we can also apply a seccomp profile.
00:06:55 [W] So most container and times come with a default seccomp profile.
00:07:02 [W] But if we are able to actually specify a custom seccomp o file for our workloads, then we can drop even more capabilities or can also drop even more this calls.
00:07:07 [W] We can also consider adding a panda palmarosa Linux profile to the the actual workload.
00:07:16 [W] For example this kind of overlaps with seccomp.
00:07:20 [W] But if we speak about a palm or and we were able to yeah limit access to their four different paths inside of the container as well.
00:07:32 [W] And on top of that we can also enable root only root file systems read-only rootfather stems from a pot level.
00:07:34 [W] It's just a great security enhancement as well.
00:07:35 [W] And yeah all in all I must say that reducing the attack surface of a single workloads is more or less a trial-and-error approach so we can not be sure in every case that the workloads still works as intended if we just drop some capabilities for example
00:07:50 [W] So but there's more than just securing the workloads.
00:07:55 [W] Once cluster Os or namespace trolls and cluster oil bindings or namespace for the bindings to strip down the possibilities. The application has pale default.
00:08:15 [W] You also have to consider particularly policies which should go away in future kubernetes releases, but we don't have an adequate alternative foot so we can consider using Port security policies and we can also apply Network policies to the whole application
00:08:27 [W] The application all in all more secure beside that.
00:08:36 [W] We also have some other security hardening possibilities on a node level and kubernative for example container image signing features and and like enabled image signing cryo and and enabled image encryption in cryo
00:08:47 [W] And like enabled image signing cryo and it'll damage encryption in cryo willing to reduce that possible attack surface when it comes to man in the middle attacks. For example, then the container images can can can be encrypted as
00:08:55 [W] Tina images can can can be encrypted as well and we can also access the limit access to add City.
00:09:02 [W] For example, we can also encrypt Secrets at rest level and there are many more features which are a little bit out of scope of this talk for now. So let's focus a little bit on the cryo post back from the crowd will contain runtime perspective.
00:09:12 [W] And so the first thing the container images signing and encryption in cryo works out of the box.
00:09:19 [W] We added some the new configuration option which can be specified reality description. Please path is an option in which defaults to etc' cryo crease and if we put our keys into that directory then cry or
00:09:31 [W] The new configuration option which can be specified.
00:09:32 [W] We at the decryption Keys path.
00:09:33 [W] It's an option in which defaults to etc' cryo crease and if we put our keys into that directory then cry or support So zi image encryption. This encrypted images are usually visible.
00:09:38 [W] are a media type plus and Cryptid.
00:09:40 [W] And pulling signed images is also possible in cryo.
00:09:45 [W] So we have the container configuration and etc' containers and we can also enforce signing container images.
00:09:53 [W] We are policy policy dot Json.
00:09:59 [W] We just let me share my screen.
00:10:00 [W] I prepared a little demo for you.
00:10:02 [W] So here we go. What we see is that we have a single node kubernative cluster and we have a running running cryo on that window.
00:10:17 [W] This is my demo and then we have a running kubernative stick.
00:10:20 [W] So everyone Cube c2l
00:10:24 [W] Yet but then we can see that we have just running Cube D and S here.
00:10:38 [W] So let's take a look how containerd image signing works if we look into our registry Stark Tory on my local machine, then we can see that we have a default file which specifies a default six door for staging
00:10:46 [W] Stuff and we have a running running cryo on that window.
00:10:47 [W] This is my demo. And then we have a running kubernative stick.
00:10:48 [W] So if we 1 Cube c2l get bots, then we can see that we have just running Cube D and S here.
00:10:49 [W] So let's take a look how containerd image signing works if we look into our Registries directory on my local machine, then we can see that we have
00:10:50 [W] Have default file which specifies a default six door for staging this sixth or will be used signature storage.
00:10:54 [W] We used when we actually design those images so they will be put in there and we also have two other files where we can specify containerd Registries and signature storage locations, which are observed from an HTTP endpoint and for
00:11:06 [W] Store will be used signature storage we used when we actually design those images so they will be put in there and we also have two other files where we can specify containerd Registries and signature storage locations, which
00:11:07 [W] Open suse a.org. We have specified a signature storageos seat open suse of the old / 6 door.
00:11:13 [W] To enforce a policy like that.
00:11:19 [W] We can write a policy Json file. For example, we can specify that in that Json file where our transport darker specified and then we enforce on registry dot open suse a.org gpg and
00:11:31 [W] That key and the key path is can be distributed for example by the distribution itself.
00:11:42 [W] And in our case, it's the public key from registry dot open suse a.org and yeah, if we now put a container image from registry door opens user dot org.
00:11:50 [W] Then we can have a look if should succeed at all.
00:11:55 [W] And a couple of seconds.
00:11:59 [W] And we can also.
00:12:03 [W] Have a look into the cryo locks.
00:12:08 [W] And for example here we can see that it cry or automatically tries to access the signature storage and also download automatically downloads the signatures for the container images layer and this usually
00:12:24 [W] Seconds and now we are done.
00:12:30 [W] We downloaded the image. And yeah, if we for example now consider removing that image again, and yeah just for demonstration purposes, we move the
00:12:44 [W] Occasion and then we try to put the container image you can then it should fail because the policy that Jason would like to enforce the I copied it one second.
00:12:59 [W] I have to move it.
00:12:59 [W] That's not correct.
00:13:00 [W] Otherwise the file wouldn't move.
00:13:07 [W] So if you go into EDC containerless gpg, then we can see that we just have it as a backup image.
00:13:13 [W] Let me just remove the image again, and then we pull it then we usually should get an error.
00:13:21 [W] or hopefully this works.
00:13:22 [W] Yes.
00:13:31 [W] All right. So now we get an error message that none of the signatures were accepted.
00:13:39 [W] So the registry gpg keys or try doesn't work at all because it's not existing.
00:13:49 [W] But even if the GP G Ki is not valid or not valid for our signed image, then we would get a different or similar error message that it's not possible to download the image at all.
00:13:53 [W] Now, let me just move it.
00:13:55 [W] it. I can do it later on so
00:13:57 [W] then
00:13:59 [W] The next couple of days if we speak about kubeflow and Europe and previously this will be hand. It would be handled.
00:14:19 [W] We are put annotations and from 119 on we have dedicated field on the pot security context of on the security context on the container level.
00:14:31 [W] This means that we have now a security context then seccomp profile, then we can specify a type like runtime default or localhost or and confined and if you specify localhost, then we can also set the Local Host profile.
00:14:42 [W] To a local profile.
00:14:48 [W] So the local profiles will be looked up in the queue bled into the cupid directory, which should be usually Wallop kubelet.
00:14:52 [W] It's the cubed root and then / seccomp.
00:15:00 [W] So if we put the profile into that directory, then we can usually reference them directly.
00:15:04 [W] We are my profile name dot Json I can demo that for you as well.
00:15:07 [W] and
00:15:09 [W] we are now in the same cluster.
00:15:12 [W] So as already shown, let's just have a look at our seccomp example one the what we have here. We have deployment nginx deployment then we specify our security context and our
00:15:28 [W] His runtime default, so cryo ships a default knesset compro file, which is included in the Rook Rio binary and but also with some distributions distributed. We are a file called DTC
00:15:43 [W] Chase on well, this is a pretty pretty good seccomp profile, but you can see for example, we have some this calls which are allowed by default and not every application may need all those this calls to be executed in the
00:15:59 [W] But let's try it out.
00:16:04 [W] Just let's create our nginx deployment.
00:16:07 [W] And the containers are now in containerd creating state.
00:16:11 [W] and now they are running and if we won crazy tlps to get an idea about which containers are running so we have both here and everyone crazy TL inspect and then the cannot specify the container ID
00:16:29 [W] Can see that hole then we have a reverence to the whole seccomp profile directly in the inspect because usually the container and time like containerd on X like Rio pass down the seccomp profile to the underlying container and time, which is run see in that
00:16:45 [W] And then run C applies the seccomp profile.
00:16:53 [W] So that's this one.
00:16:53 [W] So this works pretty cool and let's just
00:16:59 [W] delete our deployment again because usually we can't change this or composed by on the fly. So we have to would have to recreate the workload and
00:17:11 [W] If we now look unto our second example, then I just did more or less the same but now we at the security context to our container, so we specify now a second profile from Local Host path
00:17:26 [W] now look unto our second example, then I just did more or less the same but now we at the security context to our container, so we specify now a second profile from Local Host path and we
00:17:28 [W] Our demo dot Json demo dot. Json is located in while cubelets seccomp Mo dot Json and it's basically the same to same as the default as the default profile.
00:17:43 [W] Just four bits are in deal on the other is just a Cisco to remove a directory.
00:17:49 [W] So it shouldn't be harmful for our nginx application.
00:17:52 [W] But let's just try it out.
00:17:53 [W] We just recreate the workload.
00:17:56 [W] Wait for the containers to be created.
00:18:01 [W] and yeah, then let's just
00:18:05 [W] X akin to our one of our nginx pots
00:18:11 [W] and here we are and now yeah, I'm root user inside it.
00:18:20 [W] This container but I usually should be able to for example create a directory directory test, but I'm not shouldn't be able to remove the directory again. Yeah, and now it says that the operation is not permitted because the second profile enforces that.
00:18:38 [W] And yeah, if we speak about seccomp at all, then it's not that easy to write those profiles at by hand. But there's a little nice fancy project called oci seccomp BPF hook which can be used or which is just the
00:18:54 [W] Shouldn't be able to remove the directory again. Yeah, and now it says that the operation is not permitted because the second profile enforces that.
00:18:55 [W] And yeah, if we speak about zettaset combat all then it's not that easy to write those profiles at by hand, but there is a little nice fancy project called OC is seccomp.
00:18:57 [W] EP a hook which can be used or which is just the general.
00:18:58 [W] Ozi hook which is supported by cryo at all.
00:19:01 [W] this oci hook can be used to trace this course and generate seccomp profiles out of the box so I can really recommend to play around with it and it works also where we will with pot men. And for example, if you run it with poddisruptionbudgets,
00:19:09 [W] Men's and you can specify The annotation iot containers dot trace this call and then some input is not necessary to specify input path, but it's necessary to specify an output path and then you will get the seccomp o5g no rate at into that path.
00:19:24 [W] So
00:19:27 [W] let's
00:19:30 [W] What other options do we have to actually secure our workloads?
00:19:37 [W] So the next thing I would like to talk to you about is a farmer.
00:19:48 [W] So a Palmer is still a better feature in kubernative. But we also try to also consider to move it to Chi a very soon maybe in 120 or 121.
00:19:51 [W] And right now we have to handle this via put annotations.
00:19:56 [W] So we have to specify and annotation at the pot level which is called containerd On a par moderate security datadog kubernative style and then we have to reference
00:20:00 [W] Containerd him and the profile rough and this profile ref can be runtime default.
00:20:10 [W] It can be also localhost / profile name like we do in seccomp and then we can also set it to unconfined which disables to feature at all.
00:20:21 [W] So the next thing I would like to talk to you about is a farmer.
00:20:26 [W] So a farmer is still a better feature in kubernative. But we also try to also consider to move it to Chi a very soon maybe in 120 or 121.
00:20:26 [W] And right now we have to handle this via pot and rotations.
00:20:27 [W] So we have to specify and annotation at the pot level which is called containerd On a par modsecurity datadog kubernative cri-o, and then we have to reference a container name and the profile rough and this profile ref can
00:20:29 [W] NB runtime default, it can be also localhost / profile name like we do in seccomp and then we can also set it to unconfined which this a this to feature at all.
00:20:33 [W] So I just would like to give you a short demo about that as well because I'm running on the system which supports a farmer and let me just
00:20:35 [W] Delete my sect come on Rook load and a Palma Works a little bit different and seccomp.
00:20:38 [W] So a Palma profiles are usually stored in memory and to
00:20:40 [W] I created a profile card containerd nginx and etc' a bar Modi and every profile in DTC upon body will be automatically loaded if I boot up the system because a bomber starts automatically so this profile looks like this and we
00:20:56 [W] Delete my second column will gloat and at all my Works a little bit different than seccomp.
00:20:57 [W] So a Palmer profiles are usually stored in memory and to
00:20:58 [W] I created a profile card containerd nginx and etc' a par Modi and every profile in DTC upon Modi will be automatically loaded if I put up the system because a bomber starts automatically so this profile looks like this and we can't only
00:21:00 [W] To can limit Network restrictions to the to the actual workload. We can also specify rudely root level permissions and can yeah also for example drop capabilities down here.
00:21:11 [W] So we have a lot of flexibility in that profile but it follows a dedicated syntax.
00:21:18 [W] So we also have to test it or created manually and there's also something like an app on the recorder, but I don't want to talk about this if the that point so this profile seems pretty pretty
00:21:28 [W] Well now let's just check if a Palma is running so we can run a a status and then we look for nginx. And then we there we can see that our nginx profile is successfully loaded.
00:21:41 [W] So if we now look at our app are more demo example, then we can see that we have The annotation here.
00:21:53 [W] We specify container Appleman security and our container is named nginx - CTR and that's the container down here.
00:21:57 [W] And we use the Local Host nginx profile.
00:22:03 [W] So let me now apply it at profile.
00:22:04 [W] added workloads
00:22:13 [W] check the containers running and if we inspect that container.
00:22:22 [W] This is pretty nice.
00:22:35 [W] usually we can also go into the let's just exact into our nginx container again.
00:22:40 [W] And if we look at you take another look at the profile, then we can see that we can't exercise.
00:22:53 [W] Yeah /bin.
00:22:56 [W] Yeah, so I'm just root into that in that container so I can I usually have Food level access. I can create directories like test and I can't go into bin and create their directories like test.
00:23:09 [W] Yeah, and it says permission denied and usually the audit log
00:23:14 [W] And do it fast.
00:23:16 [W] give us an indicator.
00:23:17 [W] Audit log give us an indicator about what actually happened on the system and we can add every Can See For example.
00:23:30 [W] There's an audit look for nginx, and we try to create. Yeah our root level directory test and this actually works.
00:23:36 [W] All right, so that's it from my demo for a par more and now I would like to hand over to Dan who speaks about capabilities.
00:23:47 [W] Okay, great job Sasha.
00:23:53 [W] As I should and then beginning of the talk talked about we really recommend that everybody run containers without being root inside of the containers.
00:24:04 [W] And you know for the most part, I believe that almost all workloads should be able to run without being root and that's probably the most secure way able to run it but in certain work, it's were certain workloads people need to be run as root need to have multiple uids
00:24:15 [W] Aynura need some of the route capabilities.
00:24:19 [W] So the idea of Linux capabilities is it divided the power of roots? So sort of everybody understood this route is being all powerful and many many years ago. The Linux route capabilities.
00:24:33 [W] Let us Colonel basically broke down Route into a whole series of different capabilities.
00:24:45 [W] So the the interesting thing about containers and this was sort of developed by dr. Elotl.
00:24:46 [W] Long time ago is they figured out that you could run almost all workloads by default with you know, just a small group of the capability. So the power of Route was broken into 37 different capabilities, but actually Docker sort of
00:25:00 [W] On 14 capabilities that are rare in four containers and we sort of you know lot lashed into that in most container engines now have settled on those 14 capabilities. The the problem with those 14
00:25:16 [W] Nobody knows what they are, right?
00:25:25 [W] So it's sort of you know, you you even even I who deal with this lat? I couldn't probably answer test and get all 14, right?
00:25:34 [W] So what I have done is I've actually looked and so here that here are the 14 capabilities that are allowed by default and most container engines.
00:25:42 [W] But when I sit down look at these look, what is the history of some of these you know, why why these on so for instance of this one is audit right and what it right?
00:25:49 [W] His ability to write to the auditing subsystem. So Sasha showed you looking at a pom or errors in an audit log. So this the audit right allows you to modify parts of the auditing system to be able to manipulate the auditing
00:26:01 [W] so, why would we have that on by default and containerless and it turns out that when containers were first becoming popular most people thought of most is virtual machines and what they wanted to do is they wanted to run SSH Daemon inside of them, but when they launched a container with
00:26:16 [W] Daemon running inside of it would blow up because the SSH Daemon one trust someone try to log into a system would basically write a record that said Dan Walsh logged into the system and that would be blocked because it didn't have water right so that got turned on by default for all
00:26:31 [W] And of course almost nobody runs this as H demon inside a container is now so but we still have that on by default. The next one. I want to look at is make node.
00:26:43 [W] So make note is a capability that allows you to create device nodes inside of containers.
00:26:55 [W] So so, you know, but again when we look at cryo and kubernative we're looking at running containers and production and you really don't want to allow containers to create random device notes.
00:27:00 [W] What we want is the container engine to create the device nodes and not allow them to just create
00:27:01 [W] Eight random device nodes on their own but we allow this by default. And the reason we did that is because originally people would doing lots of installs and builds and and certain packages.
00:27:15 [W] I believe from Ubuntu, you know, actually created device nodes during the installation procedure.
00:27:25 [W] And so really, you know, when we're running containers of production, we're not building container images will not installing RPMs where you know, so why do we need make note on by default? The next one I want to talk about is net raw and that Roger is a capability
00:27:30 [W] Any type of IP packet, so TCP icmp any type of IP packet can be created and then put out on the VPN and the problem with this is that it really gives an incredible amount of power and and has led to some
00:27:46 [W] Power and has led to some escapes where people were able to break out of the virtual private Network by forming packets and certain way.
00:27:55 [W] I'm and the real reason for that robbing on by default is that so people could actually execute the Ping command.
00:28:03 [W] So when I execute a ping command I created an icmp packet and and put it over so when I went into a container I'd want to create that.
00:28:08 [W] So again, it's an incredibly powerful capability that really we don't need on by default, especially
00:28:16 [W] for containers in production and and the Linux kernel has other ways of running allowing you to create icmp packet so you can continue to Ping so we actually, you know enable that by default in cryo instead of net raw and then the last one is
00:28:28 [W] Trude is a capability that allows you to create a true root inside of a container.
00:28:38 [W] But you know container is really kind of a super-powerful chroot.
00:28:42 [W] So why most people are creating two routes inside a containers?
00:28:43 [W] So why do we allow that by default?
00:28:45 [W] So so when in cryo what we've done is we've looked at this original list and we basically said let's let's get rid of some of these ones that are less less necessary and and we're able to run almost all of our containers without these four canonical.
00:28:59 [W] Capability so we can drop down to you know, just basically nine or ten capabilities that we run by default for our containers when you're running as root the next thing and obviously, you know in capabilities are fully
00:29:14 [W] Inside a kubernative you so if you do find a container that needs additional capabilities of something that is not allowed by default. Then you can you know, add those capabilities through your your kubernative.
00:29:26 [W] Gml file so we can override those if you need them, but really, you know base level we want to run everything is tightly as possible from a containerd point of view.
00:29:41 [W] The next thing I'm going to talk about is selinux and and selinux in a polymer are two ways of doing what's called mandatory.
00:29:45 [W] Free access control a control on systems one difference between the way selinux works and the way a pommel works is that at bombers controlling mainly what's going on inside of the container? And what selinux does is it wraps the external part of the container, but the really great thing about
00:29:59 [W] Is to just about every type of file system break out when the process is able to break out of the container and get to the host or attack other containers.
00:30:10 [W] It's been blocked by selinux out of the box.
00:30:15 [W] So it quickly people tend not to really understand what selinux is and few years ago.
00:30:22 [W] wrote a coloring book on that and I'll just go through it real quick and try to sort of explain what's going on with selinux and think of every selinux of labeling system. Every everything on the system has a label. So let's say there was a cat.
00:30:33 [W] Yes and a dog process and so we have a process type a type of a cat in the type of a dog and then I have food.
00:30:43 [W] So every object every directory file system everything on the system is labeled, you know with you know, a label and basically have label is cat food and we label one is dog food and then we write rules into the
00:30:52 [W] All that basically says allow a cat process to eat cat food and allow a dog process to eat dog food and the basic idea here is that everything that isn't allowed is denied and this is really exactly what an essay Linux rule looks like when written to The Container.
00:31:07 [W] So now if the cad tries to eat the cat food it's allowed to eat and if the dog tries to eat the dog food, it's allowed to eat that but when the dog tries to eat the cat food, it's blocked. So from a containerd point of view. This means that when I'm inside of my container I can do you know, we basically lost
00:31:22 [W] Sir process is being a containerd type and then we launched the content inside of the containers being containerd files. And we love write a rule that says a container can read and write containerd files if the container process broke out and tried to read the home directory or try to read
00:31:37 [W] Any other director in the system that content is in labor does contain a Content will contain a files then it will be blocked by default. And that's how selinux is blocking all the potential Escape. So file system escapes and and containers
00:31:53 [W] So those are sort of the hard-coded built-in tools that we talked about.
00:31:58 [W] Yes at cop capabilities selinux and a bomber and some of the other features that Sasha talked.
00:32:10 [W] Well, one of the things we're really trying to finally accomplish is actually to get using namespace.
00:32:14 [W] So I mentioned earlier that people want to be able to run root inside of a container or they want to be able to run multiple uids inside of a container. And so we have a pull request right now into cryo that hopefully will get in.
00:32:23 [W] Birds soon and will become a feature to allow you to specify a a an attribute that allows you to basically enable user name space.
00:32:37 [W] So what happens if you need root inside of a container, you know and what happens if you need more than one of your ID and and some use cases with this becomes important is things like building container images.
00:32:50 [W] So most people that do builds inside of kubenetes right now need to have root or need to have multiple uids inside of the container. So they nobl9
00:32:53 [W] Having to run privilege containers while the end up having to do things like leak the docker Sokka some other container engine socket in and basically break break out of confinement.
00:33:06 [W] Another thing would be you know, they're needing to launch multiple processes inside of the same, uid. So by enabling user name space username space allows us to map route and other uids inside of a container as non-root on the host
00:33:18 [W] what we've done and and cry or now with the latest poll request is to allow us to basically run different containers a different workloads that require root or multiple uids to be able to run as root inside of the
00:33:33 [W] Hey, no, but if they break out the treated as like Don rude on the rest of the system and we've enabled that from the top from the highest level, you know in in cryo all the way down to contain a storage and we've handling some of the re labels and images.
00:33:48 [W] So this is a really cool feature that's going to be coming very soon to cryo systems.
00:33:59 [W] So at this point, you know, we're racing to get this talked on and at this point we could open it up for any questions.
00:34:03 [W] Hello everybody.
00:34:11 [W] So here we are life and then kala. First of all, I would like to apologize for not uploading the slides just get but I did share the link in the select Channel and you can access them we are.
00:34:22 [W] Okay, then we have a couple of questions left.
00:34:28 [W] So one of the questions earlier was talking about basic talking about it exploit allowed because a cape guy can't make node and how you know, is this set in the TOC make node should really be turned
00:34:48 [W] Authors there's almost no reason for that to be on and if you need additional capabilities for your containers that you can specify that in the kubernative GMO file.
00:34:58 [W] Another question about what is the relationship between cryo and Padma in sopot man is a container engine for running.
00:35:09 [W] So to traditional what people think of as the darker workloads cryo is a DA is basically a Daemon process for running kubevirt.
00:35:16 [W] He's workloads.
00:35:23 [W] They both share the underlying mechanisms for pulling images and storing images.
00:35:25 [W] So they share a lot in common, but they both can run totally independent of each other.
00:35:29 [W] So the question I'm is there's a question on selinux.
00:35:57 [W] Is there a new selinux in tax for St. Louis configuration to distinguish between in container object processes and things outside of the container.
00:36:04 [W] So be in from a nested list point of view, we'd like to run all the contents inside of the container as a single label.
00:36:08 [W] We believe that this is the way microservices should be written. So we treat all content inside the containers one label and then
00:36:13 [W] And if they break out the treated as a as a container and therefore, they're only allowed to read containerd read and write contain a Content. Each container has a separate what we call MCS label, but basically it's a unique identify it for a specific containers,
00:36:28 [W] But right now we don't support multiple labels inside a containers.
00:36:38 [W] This is one big difference between a polymer and selinux and that bomber is is actually providing security separation inside of the container.
00:36:44 [W] whereas the Linux is providing separation outside of the container. So they work a little bit differently in that case.
00:36:47 [W] One question is what is the relationship between Daka and cry? Oh, so that's it.
00:37:01 [W] Look s the same as a as a dozen partner in the a cryo and Padma and she'll come in source code and dedicated libraries.
00:37:06 [W] So all the security patterns which apply to pot man should also apply to cry.
00:37:10 [W] Oh and there is not that big relationship to talk anymore. But for example, if we look at a default seccomp profile, then we can just say that historically it has been inherited by Telco. Yes, that's
00:37:19 [W] It's a historical relationship.
00:37:22 [W] The main comparison between Docker and and cryo is around container engine container images. So Rio in Dhaka both support what's called oci images and
00:37:38 [W] so you have the input so anything that exists add any container registry doctor I Omega dot IO out of factory is supported because as a standard around what a container images and also the way we launched
00:37:53 [W] Trainers. We also use a standard called the oci runtime specification.
00:38:08 [W] I am a both using right now for uncie for launching containers. So the way you containerless on the input and the containers on when you're executing with both run the same exact way between doctor and cry out. So therefore they can support all of the same content
00:38:13 [W] The Empire man as well.
00:38:17 [W] We've just been notified that we're running out of time. Now, we will be available on the slack channel to answer any other questions that people have or if we didn't get to a question here just a skit on the slack Channel.
00:38:29 [W] So thanks for listening and good.
00:38:32 [W] Bye happy to see you that.
