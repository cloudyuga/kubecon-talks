Kubernetes Patterns: EOOC-4560 - events@cncf.io - Tuesday, August 18, 2020 7:37 AM - 85 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:56 [W] Anyway come to this talk about Cuban is penance.
00:07:54 [W] My name is Woodland Hills.
00:08:01 [W] I'm a software engineer from redhead and currently I'm working on Clay native, which is a serverless platform on top of kubenetes all the patterns.
00:08:03 [W] I'm going to show you today are described in this book that I have written together with my friend billion.
00:08:14 [W] You can get a free copy of this book by following this link. This copy has been sponsored by red hat.
00:08:17 [W] So if we free download it as a PDF file you find all the patterns. I'm showing you today and many more also you find the
00:08:20 [W] The examples which you can try out just to illustrate how these patterns are working.
00:08:26 [W] Okay, so let's get started.
00:08:29 [W] First of all, let's talk a little bit about what patterns are patterns are really a very very old concept.
00:08:39 [W] They are older than 40 years and come from this original book by Christopher Alexander written in 1979 in this book because several example, and the scroll workers are describing a pattern language which can be applied on
00:08:53 [W] Extra. So what is a pattern in that sense of the classic a pattern always has a name a name is very important because patterns form a kind of a language which is interconnected.
00:09:09 [W] So you have patterns which are related to other patterns and they form a repeatable solution to a certain set of problems.
00:09:15 [W] So it's not a very concrete solution but kind of a solution pattern but you can apply in certain contexts. Here's an example of a pattern which is called City Country fingers and it describes how you
00:09:27 [W] Ed plan for a city so that the people in the city don't have to walk a lot until they reach some green.
00:09:31 [W] Of course. This idea has then been snapped a while, but in 1994 the gang of four picked up that idea and transformed it on the field of software engineering.
00:09:47 [W] So this was a very famous book, I guess everybody of you already heard about that. It's design patterns for object-oriented software and it is it contains all the this famous pattern that we all know and love like a Singleton like a factory like a delicate and
00:10:03 [W] Him anymore again.
00:10:05 [W] This pattern has a certain schema.
00:10:07 [W] They are described. They all have a name and they are formed interconnected kind of begin language.
00:10:12 [W] But just for very super brief recap. So the main ingredient for communities is the pot that's it's the atom of kubenetes and the pot is kind of abstraction over Kata containers
00:10:39 [W] And the pot is kind of abstraction over the containers and they are really describe the runtime contract for a container. So how containers can run within the project so sometimes you only have one pot one container in a
00:10:49 [W] Sometimes we only have one pot one container in a pot. But often you also have more of them. We will see a pattern which really use this concept in depth. These containers can share certain data on your network or rear disc.
00:10:58 [W] Then your code lies lives in such a port and is executed in the pot and around that you have tons of other entities, which allows you to do declare how the application is supposed to be running and you see here A whole
00:11:14 [W] This is important that you always declare what you want to have you do not tell communities to that and that and that step-by-step, but you declare a kind of a Target State you come to this concept in a little bit later.
00:11:26 [W] So now let's dive into the pattern. So we have two different pattern categories.
00:11:35 [W] we organized the 24 patterns in different categories. One of them are the foundational pedants. These are more or less.
00:11:39 [W] The intrinsic features of kubenetes. The reason for that is that cabinets itself as a platform is the implementation of certain patterns for distributed computing and we've really find some core Concept in the foundational category on
00:11:54 [W] We have structural patterns, which really take kind of the rotational Primitives and combine them into something new on top of that or little bit not really on top of that but little bit on this side.
00:12:10 [W] are the configuration of parents, which is all about how you can configure applications so that different techniques for that.
00:12:16 [W] We have the behavioral patterns, which is really describes the kind of application you are running.
00:12:26 [W] So whether it's kind of a stateful service or stateless application, whether it's running in the with a patch job or something like that.
00:12:36 [W] So this is all copy are combined in the behavior category.
00:12:39 [W] finally we have some kind of advanced patterns, which do it really fit in the other categories, but they have some more advanced concepts based on all of the other parents.
00:12:47 [W] I have example for every of these categories. So let's look at start.
00:12:51 [W] First with the foundational parents. So here we have like as I mentioned call for charity of humanities, like head probes which are very innocent life as checks.
00:13:06 [W] Particularly. The amount is about how you declare independence. He's like resource limits manage life cycle is how you can hook into the life cycle events for your pot when so that you get notified when it starts or but then stops and so on so but here we are looking at the declarative deployment.
00:13:19 [W] Vacations donations and also upgrades by configuration only Paddock clearing your storageos.
00:13:32 [W] So we have a core entity incubators, which is called the deployment and this is really all about declarative rather impulsive deployments before the deployment and the resource was introducing the Curious. All you could do was kind of
00:13:47 [W] Light up occasions or control which allows you to do certain things like avoiding updates.
00:13:54 [W] So in the words of deployment, you really say step-by-step. What should be done for a rolling update which means that you have a set of new copies of here set of old copies of your application a set of new copies and how you can really
00:14:10 [W] The old ones down and scale up the old the new ones and this is done step by step is mentioned.
00:14:25 [W] However with deployment that used this has been introduced a declarative way how you turn declare your deployment strategy by just saying, okay. I want to have a rolling update.
00:14:31 [W] I want to have this as my new image and now you please do this for me.
00:14:34 [W] Deployment kubenetes resource hold the tablet per pot so that our deployment can create new pots for you.
00:14:49 [W] It creates replica set on the flyer. So it's kind of a manager for your replica set. So we will see this in a second.
00:14:52 [W] It allows also for rollbacks to an older version. If you do not update and to several up to searches are declared within your deployment descriptor.
00:14:59 [W] Here we see now the different types of Technology of deployments are one of the role of deployment which is just about how you can create a zero downtime upgrade.
00:15:14 [W] So yeah this example you have version 100, which is the old versions you have three copies running in a replica set there which is managed by a deployment.
00:15:26 [W] Then you change the image reference within your deployment so that the target state which is now the neuvector.
00:15:29 [W] And then scales down the old replica set. So from 3 to 2 and scales up the new one from 0 to 1 and then continues until everything is the until you have three copies of your new applications version
00:15:56 [W] One in front of your thoughts.
00:16:04 [W] you still have a service and the selector of the service should point with it to both versions so that you always have the same.
00:16:08 [W] So that a user which goes over the service hits either version 1.0 1.1 so that there's no downtime for your application.
00:16:20 [W] Of course this kind of deployment doesn't work doesn't always work it. So your application really needs to be tailored for being able to being upgraded with a rolling deployment. For example, your back-end State like a database
00:16:32 [W] Application really needs to be tailored for being able to being upgraded with an erotic deployment. For example, your pick and state like a database need to be able to run with both versions. So the version 1.0 and 1.1.
00:16:37 [W] So for if you have a scheme upgrade between those versions you have to do this very carefully so that your database schema really can support both versions.
00:16:47 [W] The next one would be a fixed deployment. This is a little bit easier for from the so it's a bit easier for implementation side.
00:17:03 [W] It's because all your objects old versions are scaled down to zero immediately at once and the sooner the down then your new ones gets be good been scaled up so that you have a kind of a little bit of a Time gap between those versions or downtime and the service actually really
00:17:13 [W] To the new one after that.
00:17:15 [W] Then there are variation of both of those deployments.
00:17:23 [W] So these two deployments like fixed deployment in a rolling update deployment really supported directly by kubernative your the deployment and resource, but if you want to have some more sophisticated deployment strategies, then you can do that as well.
00:17:34 [W] Resource but if you want to have some more sophisticated deployment strategies, then you can do that as well. But then you have to manually by managing multiple deployments or you use a platform like caliph, which also
00:17:41 [W] Or you use a platform like caliph which also supports which is kind of a has a concept of a service creative service, which is a simplification of a deployment which also allows you to create these three strategies.
00:17:52 [W] I'm going to show you now. We are so-called traffic splitting.
00:17:55 [W] So for going to release you still have your old version 1.2 1.0 covered by one deployment.
00:18:05 [W] You create a new deployment with a new reference to the 1.1.
00:18:08 [W] And so we have both versions running the same time.
00:18:12 [W] However, the sultan service always look still points only to the old version then you have time to test your new versions and if you are fine with that, you can just switch up with one called the service over to the new version in the sense. So
00:18:23 [W] Kind of zero downtime and but you have an atomic switch also for this service.
00:18:31 [W] Now other variation of the Rolling updated the canary release where you say you make a rolling update, but you stop in the middle. So in this case, you just maybe have three replica set a replicas for you're old and you're all version, but then you scale up one pot with your new
00:18:47 [W] I was still goes to both of them but you have maybe 90 percent of your traffic then goes to the old version but only 10% of the new one so you can try out some stuff and say okay. I'm it's okay for me that you can scale up the new version make it a
00:19:02 [W] It's okay for me that you can scale up the new version make it a full volume deployment or you say no that's not what I wanted to have.
00:19:08 [W] Let's go back to the old version.
00:19:11 [W] This is easily done again using k- this is super simple to do if you don't use k- you can do this manually as well.
00:19:18 [W] So here's a nice diagram also from the book where you see how these deployments are working overtime.
00:19:28 [W] So on the x axis you have the time on the y-axis, we have the number of instances running.
00:19:34 [W] The blue one is the old version of the green dotted curve is the new version for all deployment.
00:19:41 [W] You have a graduate degrees of the old version and increase of the new version fixed apartment.
00:19:44 [W] You have a kind of a little Gap where nothing is running.
00:19:46 [W] Bluegreen release is you have a certain time that both versions are 1 and this is also important to note that for this case you need twice of the capacity for your application, which means your cluster must be large enough that your application can
00:20:02 [W] Poppies which can be on the show on maybe not for can I release you to kind of a rolling update which which should just stop in the middle like that?
00:20:16 [W] And then at the end you can decide what you want to do. Okay. This is all about the quality of deployment.
00:20:20 [W] Let's move on to the structural patterns for structural patterns is such a pain has actually something about how you can compose your application and can use The Primitives of communities to create different kinds of application.
00:20:37 [W] We will look in the most famous one, which is a sidecar and the sidecar container really is about how you can add functionality to an application without actually changing the application itself.
00:20:51 [W] This is all about runtime collaboration of containers.
00:21:00 [W] We have already seen in one of the slides at the beginning that in a pot. You can have multiple containers and these ports these containers can communicate which is each other either.
00:21:08 [W] We have a network. So we are Local Host and another certain product or if setup probably with a shared volume so that one container can write on this volume and the other one can read it for example.
00:21:19 [W] And as I mentioned all about separation of concerns, so you can compose your stuff and all the in this example for here. You see that the main container
00:21:43 [W] is an HTTP server which serves certain data from a disk and all the requests that come in just serve the dish so they make containerd just is as kind of aesthetic HTTP server, but then you can add a site the container which periodically poled some external storage like a git repository
00:21:59 [W] To change update the local data so that the next request request that comes in for the HTTP server gets the updated data.
00:22:12 [W] So with this setup, you do not have to touch the haproxy server at all and can add a new functionalities like updating when something changes directly by adding aside container.
00:22:22 [W] This is a good example how you can really enhance your application with Without Really touching it and one of the most prominent examples in this category are really servicemeshcon.
00:22:29 [W] He does this all inject some certain sidecar containers into your main application and then add new functionality like tracing and other things circuit petting and so on without actually really any change to your main container.
00:22:43 [W] Some let's have a quick look into two variations, especially say variations of the side cargo container.
00:22:56 [W] So first of all, the adapter this is all about how you can decouple the access to a container from the outside world, which means that you can add adapters depending on the needs requirements for certain systems here in this
00:23:07 [W] If I can or maybe containerd plication, let's assume you have certain metrics which you want to monitor. These metrics are written down at the file system and kind of a proprietary format, but you have a system like Prometheus which wants to get through this Matrix and
00:23:23 [W] It kind of adapter which on the one side which the metrics notable side exposed these metrics to Prometheus in the Prometheus specific format.
00:23:38 [W] And so they remain application doesn't know anything about Prometheus, but you can still connect to Prometheus from monitoring and if you change your monitoring system, like let's say you switch to Nadia's then you just exchange the adapter and still your application
00:23:50 [W] To know about this. This is about how you expose data in a uniform fashion to the outside and the Ambassador is kind of the opposite.
00:24:01 [W] It's just how to decouple the containerless s to the outside world.
00:24:05 [W] So it's describes how your container accesses the outside world.
00:24:05 [W] I'm inside an example could be a cache which you have locally either or you want to have a distributed cache and depending on your needs. You just offer kind of a eunuch API or localhost but exchange the sidecar container depending on the context.
00:24:24 [W] And so here you have in the upper picture.
00:24:29 [W] have a memcache d which is very locally your magnification just communicate over local also of a certain port and does not really know what's happening behind this port.
00:24:33 [W] Next now, let's jump now. Let's jump to the next category, which is about configuration and we have already very good direct support for configuration within communities for application developers.
00:24:49 [W] You can use config maps and secrets but also environment where your app is to configure your applications.
00:24:54 [W] Sometimes you need a little bit more if we have a complex scenario and I want to show you now in this example our configuration template works.
00:25:02 [W] This is also a pattern and it's here. It's about how you can manage large and complex similar configuration data similar in the sense that you might have deployment scenarios where you have different stages like
00:25:17 [W] Mint environment like a staging environment like a production environment and all of this have kind of similar configuration except for certain connection parameters, for example, like a database so you have a the development environment needs to connect
00:25:32 [W] extra parameters for example like a database so you have a development environment needs to connect to the development database the production environment of the production database and of course, you can copy over all this into your applications, but if you do it
00:25:41 [W] Of course, you can copy over all this into your applications. But if you do it now, if Li you have to create different images containerd matures for all of these application, which is not very very nice. But this pattern actually tries to solve
00:25:52 [W] choosing an init container and the container something which starts before you may not contain ourselves and let's assume this in the container contains a tempered processor you have in your image of effort configuration template, which means all the
00:26:07 [W] All the shared parts of this given there, but you have placeholder for the variables like the database connection URL and the Staple Center then would pick up all this configuration parameters from a conflict map.
00:26:21 [W] step a process of them would pick up all this configuration parameters from a convict map for example, and then puts it into the temple processor the table processor also picks up the template and then the
00:26:31 [W] The template and then the final configuration stored in a shared volume and what the main contenders just us it picks up this already processed configuration data and serves it to use it for itself for here.
00:26:44 [W] Good example could be JBoss or white fly which is in Java application server and here you see graphically so you have attended processor. You have the configuration templates the temperature would Mount Your conflict map as a volume.
00:26:57 [W] The templates which are coming directly from the in it containers image processing. It creates the processed images into the configuration file your main application Johnson just Mount and reads the configuration.
00:27:12 [W] And of course, the only thing you have to change for different environments, it's just different concept map volumes for different environments.
00:27:20 [W] So you would put another the cosmic web only those parts which are different for these environments. Here's how it looks like in the resources scripter. So you would have fear of deployment and you see the other container just picks up.
00:27:31 [W] up a kind of a prepared image which contains the templates the parameters themselves come from a conflict map name vitess flow parameters and the conflicts itself is written into an empty directory which then later on is mounted
00:27:42 [W] Containerd like here the whitefly and just uses the configure parameters.
00:27:58 [W] We have good example for this into the the for the so the book has an already prepared images which you can directly use for this kind of processing.
00:27:59 [W] Next let's talk about behavioral patterns.
00:28:02 [W] Here we are talking about patterns that have describing the characteristics of an application like a patch job or a stateful services.
00:28:17 [W] But also how service can find each other. We are Services covering or how Services can be exposed to the outside.
00:28:19 [W] This is what we are describing now with the service Discovery pattern and this pattern is all about how you discover and use services with kubenetes different variations.
00:28:29 [W] First of all, let's have a quick look to the outside to the non kubenetes world and how Services cover works there.
00:28:38 [W] So typically you have a producer.
00:28:43 [W] So this is the one who offers you service the producers who Justice service at the service registry like console for example, and then you have a consumer who needs to do an active look up to the registry.
00:28:54 [W] For example time name gets back a reference of this to the service and that it works the service in the first set.
00:28:57 [W] Sometimes there are agent involved which just that you have to connect to your services.
00:29:03 [W] How it was discovered reps there.
00:29:13 [W] So typically you have a producer.
00:29:13 [W] So this is the one who offers you service the producers who just us service at the service registry like console for example, and then you have a consumer who needs to do an active look up to the registry.
00:29:14 [W] example them name gets back a reference of this to the service and that it works the service in the first set.
00:29:16 [W] Sometimes there are agent involved which just that you have to connect to your services.
00:29:17 [W] With communities it's a little bit different because the service registry is really part of kubenetes itself.
00:29:18 [W] It's other the consumer already has a name as for the look of invoice lookup happens behind the scenes.
00:29:19 [W] So this is done by kind of a proxy.
00:29:20 [W] This is a either a real proxy or kind of a little proxy and you can imagine this. Is this the Canadian the community service which is used here around so in that sense the proxy also select the parts and evoke the
00:29:32 [W] On this lookup happens behind the scenes.
00:29:33 [W] So this is done by kind of a proxy.
00:29:34 [W] This is a either a real proxy or kind of a little proxy and you can imagine that this the Canadian in the community service, which is used here around so in that sense the proxy also select the parts and evoke the
00:29:35 [W] Look into the different kind of Discovery. So first of all, we have internal Services covering which is used by services or by application ports, which are running within the cluster. So every application is kind of dependencies, and these dependencies
00:29:50 [W] Within the cluster or out of the cluster if there are within the cluster you Chen can just call your dependencies.
00:30:02 [W] We are kubenetes service and the service is kind of a me load balancer for your pots and these pots are selected by labor selectors.
00:30:08 [W] You can have multiple servers that pot.
00:30:13 [W] There is also kind you can configure a session Affinity on RP address of the client pot so that the time portworx in certain appear to us obviously ends at the other and fixed spot.
00:30:18 [W] And various probes are really used to indicate that the service is ready.
00:30:29 [W] So you're if you call a service you only get through if the you only get to a pot that is ready and you get inverted appear address for each service.
00:30:34 [W] So you do our internal look up your DNS and then get back the internal virtual IP address of that service.
00:30:39 [W] If you won't have to access Services outside the cluster, so like an external system you can do this also with the community service. But in this case, you don't enter a label select under the service, but just either create
00:30:54 [W] Resource which has a list of IP addresses that should be used and this endpoint has the same name as a service.
00:31:10 [W] So this case if a request comes from a pot to the service, then the extent the endpoints are consulted and then just delegate it to the external system or you use a service of type external name there. You can just put
00:31:17 [W] Service, then the the endpoints are consulted and then just dedicated to the external system or you use a service of type external name there. You can just put in a external DNS name
00:31:20 [W] External DNS name which then is used all the time if you access the server, so this Services then kind of a proxy for this external name.
00:31:26 [W] so this was all about how your internal port scan access services, but of course, sometimes you want to expose certain service or through the outside so that our user outside of the cluster can access your service and here you have different possibilities the simplest one
00:31:43 [W] Services, but of course, sometimes you want to expose certain service or through the outside so that a user outside of the cluster can access your service and here you have different possibilities.
00:31:46 [W] The simplest one to configure is the note Port you just add the type not brought to the service and then every node in your cluster exposes this portal the outside world and directs you to the service and the service again, just dedicate
00:31:57 [W] The note port to just add the type not put through service and then every node in your cluster exposes this port to the outer world and directs you to the service and the service again, just delegate to the pods.
00:31:59 [W] If it is, of course, it's easy to configure other the drawback is that if of course you need to know that the port is available for you to expose so you have to manage certain portray ages for your services, which you want to expose on your cluster.
00:32:15 [W] Two for every servant in the cluster that you want to expose over the not port and also this port is not always stable.
00:32:30 [W] So sometimes typically you would get a random Port you can also pin this part of course, but this requires tons of management for you and also for a user running for example accessing your service.
00:32:37 [W] We are web browser. It's not easy. It's not so nice to to have to specify a port there.
00:32:42 [W] Then you have the other two possibilities to use elotl balancer on Ingress for
00:32:46 [W] And so this is kind of from service offered by Eero kubenetes provider typically also called provider and this is different from provider to provider.
00:32:56 [W] So load balancer is something which is outside of the cluster image of the cluster.
00:33:01 [W] They have different characteristics also, but what do you do for your service your crab Define the type load balancer and then you have a kind of a one-to-one relationship from a load balancer IP to your service there the alternative is to use in English, which is a kind of own resource entity.
00:33:15 [W] Which is managed within the kubenetes cluster you have English controller behind that in this English controller also exposes the increase to the outside.
00:33:26 [W] You can also dispatch to multiple services. This is not not not so easy with a load balancer.
00:33:30 [W] Here is the example of how you specify the Ingress as you see you can specify different context paths, which is a nice little that. You can really dispatch the different services.
00:33:42 [W] What you see is actually a short summary how you specify this on this service so that different types and different other specifications which you can use in which web to this different concept.
00:33:56 [W] So finally, let's have a look at it into the advanced patterns and these are patterns which are do not fit really well in the other categories, but they are described more advanced concepts like elastic scale, which is about nor total ports and vertical put autoscaler based on
00:34:13 [W] Based on current resource usage and also about image Builder which is allows you to create container images within a cluster.
00:34:25 [W] But for this talk, I've selected to control on operator which are very important concept of community itself.
00:34:29 [W] Let's start with the controller.
00:34:34 [W] The controller pattern is all about how you get from the current state to the Target stick.
00:34:38 [W] I already mentioned that curious is all about state to reconciliation, which means that it's a
00:34:42 [W] that you declare your state what you want to do and it's up to creditors to perform certain actions to get to this day.
00:34:49 [W] This works that it periodically observed the actors State and then analyzes the actual State makes it tough against the target set that you have declared in the cluster and if there's any difference then it
00:35:02 [W] And that form that it tries to decrease the gap between the actual and the target set and of course clearly this Gap get 0 so that it's there's a difference anymore.
00:35:16 [W] Yeah. So this is how this works itself.
00:35:19 [W] There are tons of controllers who are doing exactly this kind of loop or the time technically. It works that it connects the controller connects to the advisor for the club term controller is kind of in regular application running in the background and then
00:35:32 [W] Rocks that it connects the controller connects to the advisor for the club term controllers kind of in regular application running in the background and then observe the API server the this is by observing events, which are emitted by
00:35:36 [W] Price of about this is stop surfing events which are emitted by the FBI server. If that been there is obtained and the cluster depending on these events it analyzes whether it needs to act or not.
00:35:47 [W] not. If there are some extra required it again contact the FBI server and this API server, then works on behalf of this action talks with the note components creates, maybe Newports or does anything that the controller wants to do?
00:35:59 [W] As mentioned Chris itself has a tons of controller, but you can leverage this concept as well for your own applications.
00:36:05 [W] You just an example of of such a controller.
00:36:10 [W] You can write the control. Of course in any language here. We put a be using a shell script us to demonstrate that you can also use shell for that what you see here is kind of a curl which watches for events.
00:36:23 [W] So you currents the API server and then it reads the event and for every event in extract the event and checks whether the event has been modified and for example watches for certain conflict maps by knative.
00:36:35 [W] Even if such a conflict that has been modified it takes an action and this action in this example, which is also part of the books example, which you can download is to restart upward which has a certain label the points to this conflict web. So with this
00:36:50 [W] What are you can Implement a functionality which means to restart your pots as soon as its configuration changes?
00:36:57 [W] Coming now to our last pattern the operator.
00:37:06 [W] The operator is all about how you can encapsulate operational ollege into an executable software.
00:37:13 [W] It's a little it's a little bit similar to the controller. And in fact, it is based on the controller.
00:37:19 [W] So here's the definition of what is an operator is so first of all, we have this very nice quote from Jim.
00:37:26 [W] It's olinsky, which really I think brings it to the point and operator is a communities controller. So it's on top of a controller.
00:37:31 [W] but in understands two domains one is the criminal is to maintain itself like a controller does but also something else and this and by combining this knowledge between the three communities and this custom domain knowledge it
00:37:44 [W] The same way like a human operator would do when it had would have to operate the software.
00:37:50 [W] There is another definition which we also like quite a bit because it's very simple.
00:37:59 [W] Maybe it's too simplistic, but it's it depends but actually you also see an operator often as the controller plus something A New Concept which is called a custom resource definition and a custom research definition or C or D chart is
00:38:09 [W] Extend credit is with your own types and your own resource types.
00:38:25 [W] So here you see an example of an kubenetes resource definition which introduces a new type which is called config Watcher. And as soon as you have applied this custom resources definition to your kubenetes cluster you then can use a convict watcher.
00:38:30 [W] Can this accept it so you can use a Coffee Culture kind of content config Watcher and then you have a specific specifications Back Field, which is very specific to your own resource. And this resource encapsulate the your domain knowledge.
00:38:45 [W] To your own resource and this resource encapsulate the your domain knowledge.
00:38:50 [W] So for this example, which is based on the control example that we just have seen it's about operator running the background watching this custom resources as soon as it sees such a custom resource.
00:39:00 [W] It knows it has to watch the config map with the name webcam app config. And then as soon as this conflict map changes restart all ports, which match the selector here.
00:39:10 [W] Okay, so we can live now seeing controllers and operators and how do they compare to each other?
00:39:21 [W] This is a kind of also a kind of a one fuel on how you can categorize controllers operators.
00:39:22 [W] This is based on flexibility and complexity of this.
00:39:27 [W] So for example controllers, which is a more simpler concept that operators they are typically operate on standard resources like labels or also on config maps and other stuff you can configure
00:39:41 [W] Them with coffee bags as well.
00:39:45 [W] But if you have more if you have a higher requirement for your domain, then you probably move on to operators that are watching custom resource definitions, or if you want it even have a more complex and more flexible.
00:39:56 [W] You can create an own aggregate API, which hooks directly to the API server and that so that you can be accessible via the rest API directly from the API server.
00:40:07 [W] And I've now seen controllers and operators and how do they compare to each other?
00:40:17 [W] This is a kind of a sort of kind of one fuel on how you can categorize controllers operators.
00:40:17 [W] This is based on flexibility and complexity of this.
00:40:18 [W] So for example controllers, which is a more simpler concept that operators they are typically operate on standard resources like labels or also on conflict maps and other stuff you can configure them with
00:40:18 [W] To be distillations here these and applications here these installations here.
00:40:31 [W] These are really about how you can operate an application like Prometheus like a cuff cocozza like anything about that. You want to run your Kuma Nats cluster and how we will end this installations.
00:40:33 [W] It is described. The installation of your application itself. It also is responsible for the updates or the operator behind the co D. This is possible for updates and other operational tasks like backup and restore
00:40:46 [W] a good example is for example is Prometheus.
00:40:52 [W] So there is a CD which type of kind Prometheus and this is for installing a Prometheus monitoring system for you and all the dependent components to it.
00:41:03 [W] Then there were the applications here these and this is literally about the application specific concept.
00:41:13 [W] Where is the situation here D is really about installing something and taking care that it's really constantly running.
00:41:15 [W] The application should be is more about its.
00:41:18 [W] These applications yet. Another example is the service Market or which is there for registering kubenetes services with Prometheus so that as soon as you install a service config, so sorry servicemeshcon TOA then your
00:41:31 [W] This kind of Prometheus and this is for installing a Prometheus monitoring system for you and all the dependent components to it.
00:41:33 [W] Then there are the applications here these and this is literally about the application specific concept.
00:41:35 [W] Where is the Situation's here D is really about installing something and taking care that it's really constantly running.
00:41:35 [W] The application should be is more about in configuring these applications yet. Another example is the servicemeshcon.
00:41:36 [W] Monitor, which is there for registering kubenetes services with Prometheus so that as soon as you install a service config, so sorry servicemeshcon TOA. Then your purple Mythos server will monitor the service which is
00:41:40 [W] Wanted to the service which is referenced within the service monitor other example could be a Kafka topic which is also available if you use for example, the strimzi / strimzi freighter, and this would introduce
00:41:48 [W] If you are looking for operators, which are which are there you are there are there operator have is a very good starting point.
00:42:01 [W] It contains a catalog of available Raiders. It contains instructions how it can install these operators in your cluster and this catalog is constantly growing. So I really recommend to go to operator up dot IO
00:42:12 [W] If you want to create your own operators, you have tons of possibilities.
00:42:19 [W] There is you can of course write it in any language, but there are some Frameworks which can help you to create those most famous one is the operator SDK, which is also which you can find on GitHub
00:42:31 [W] to create operators of the golang language
00:42:34 [W] So this is all what I have for you.
00:42:44 [W] Thank you very much. And I hope you enjoyed the session you have seen some of the operators you find more the book that you can download.
00:42:47 [W] And yeah, I hope and show you the voter kubeflow Lon.
00:42:52 [W] Hopefully next time we can meet us in person again, thank you very much.
00:42:56 [W] So hello, thank you very much for joining the session. So unfortunately, we're a little bit over time or white.
00:43:06 [W] So but there was a lot of great questions here.
00:43:13 [W] I've picked three of them, but I will answer all of them on this election. So if joint afterwards in the section A this would be awesome.
00:43:15 [W] Then you try to give my best to answer everything.
00:43:20 [W] So the first question here was is whether a rolling update is always the best way to do deployment and yeah, of course if you can do a rolling update its obvious preferred over a fixed Supply.
00:43:29 [W] And because then you get zero down times, but unfortunately, it's not always possible because it depends that you're the old version of your application the new version of the application can run on the same time. And of course if you have a database schema change in between the version of this
00:43:41 [W] For you, but if you can yes, it's obviously probably the better solution.
00:43:52 [W] Another question was about how you can merge serverless architectures in the event driven programming with the traditional containerless application within kubenetes.
00:44:00 [W] First of all, you can already operate serverless kind of application of the think kubenetes on the container based level with Canada for example, but of course, you can also connect your communities applications and services with serverless application outside.
00:44:12 [W] Your cluster like with Amazon lender directly by connecting them together. We are actually TP or whatever whatever so there's a so actually you can mix and match the best Technologies. You want to have based on the protocol you are using
00:44:26 [W] And then there's our final question whether sidecar always been a sidecar also delivers business functionality technically a sidecar can also Implement any business functionality.
00:44:41 [W] Should not do but conceptually it's obviously the idea of a sidecar sweetie, but it adds some kind of auto connect things to debate main function.
00:44:57 [W] So if you keep your main application in a single new main container and separate all the other aspects, but you want to mix into your application. I think then that's the perfect fit for site.
00:45:02 [W] Yes. So that's it for now.
00:45:11 [W] Thank you very much again. As I mentioned. I have noted all down all the the question there and I will answer them one by one and this election as well and in
00:45:15 [W] The dedicated threat and so please jump over to the deck and we can continue the discussion over there, and then I wish you an ice cube Khan and enjoy the talks.
00:45:21 [W] Thanks.
