How ABN AMRO Switched Cloud Providers Without Anyone Noticing: DYSY-2193 - events@cncf.io - Wednesday, August 19, 2020 6:57 AM - 52 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:03:16 [W] I'll Welcome to our talk.
00:03:19 [W] We are happy to have presented last year about how we moved with ABN Amro Bank towards clouds by using containers and this year we have be that we can present again at this awesome event, and we would like to share
00:03:30 [W] How be an emerald Bank switched our providers without anyone noticing so in the backgrounds of my slide you see a beautiful landscape with clouds and a
00:03:45 [W] So very peaceful and this is actually what you hope for we are about to switch cuts that the one clouds and reflective clouds look more or less the same.
00:03:56 [W] So at ABN Amro Bank we switched from AWS towards Azure as a Target platform and well we can say that in practice reflection might look a little bit different than the original Baker.
00:04:11 [W] But before we start talking about that, I would like to introduce ourselves.
00:04:16 [W] I'm doing this presentation together with my colleague Mike Ryan is devops consultant in a team with an ABN Amro bank that is responsible for the men's containerd platform.
00:04:27 [W] I'm lover there's and I'm the product owner of that's a
00:04:31 [W] before we dive into the details of switching clouds.
00:04:38 [W] I think it's important that you know some background what ABN Amro bank is we had a third largest bank in the Netherlands and we are active in the financial sector and when you're active in the financial sector you're active in
00:04:51 [W] Sector so there are a lot of restrictions you have to deal with you have to deal with Auditors.
00:04:59 [W] You have to implement a lot of controls.
00:05:05 [W] And of course you should because we are responsible for a very sensitive data for customers and we have applications that need to be available 24/7.
00:05:10 [W] So yeah that is really important for us to keep on doing.
00:05:15 [W] Another challenge that we have is that we have 20,000 three plus employees. So we are quite a big organization.
00:05:22 [W] And so Bank, we already exists for a couple of hundred years and we started well, of course not started but we are right. Now a lot of our applications are on-prem physical data centers.
00:05:38 [W] At a certain point in time the bank made the decision to move towards clouds full of about first strategy where you can imagine that that has a big impact not only on the application was also the team's so what we did we started
00:05:53 [W] And transforming into devops teams. So that's different responsibilities than they're used to but also has a different mentality and they wanted to extend our skill set their knowledge level.
00:06:09 [W] So that was the first journey we need to take before they could actually go into clouds and we started with AWS as the first clouds and that clouds well was being prepared put a container platform top of that
00:06:22 [W] For I sure so we have about six hundred and eighty six teams within a video about devops teams. And those are all responsible for 2836 applications running.
00:06:35 [W] So the themes that were ready devops and ready to go to clouds often prefer to use containers to bring their applications towards squirrels or to build a new applications on the cloud and thing with containers
00:06:50 [W] Often prefer to use containers to bring their application stewards clouds or to build a new applications on the cloud and thing with containers is is very useful, but there are a lot of ways you can work with it.
00:06:56 [W] And also we saw that Humanities as a steep learning curve.
00:07:02 [W] So the bank decided it's important that we have a dedicated team that is guiding the teams on how to work with containers.
00:07:08 [W] So great best practices and also create the manage containerd platform.
00:07:11 [W] erm
00:07:12 [W] And the theme is God's got this Mike and myself are both part of the theme and well, it's important.
00:07:23 [W] Why would you actually have a dedicated team?
00:07:26 [W] So I will explain to you the vision and the vision it's like, okay, so we are building a solid containerd platform.
00:07:38 [W] Not do it himself or if you have about 600 themes that want to reuse containers and everyone would need to build their own mini contactor platform as well to become unmanageable as a company.
00:07:53 [W] You cannot control it and to will be a lot of Reinventing the wheel and that's something you don't want because then teams are wasting your time the valuable time. So therefore to be good if one team would build a strong foundation for the other teams can build on top of that.
00:08:07 [W] Also, we are responsible for lifecycle management.
00:08:10 [W] So the containerd platformer just mentioned excess of a lot of components and they need to be upgraded and patched so that we take care of furthermore.
00:08:21 [W] We create the first set of reusable components.
00:08:26 [W] So think about Helm charts Docker images pipelines.
00:08:26 [W] therefore modules just a concept of inner sourcing so that other teams can just reuse and built on top of that.
00:08:34 [W] As I mentioned earlier, we have this great responsibility and secure security and compliance.
00:08:40 [W] You're very important.
00:08:45 [W] So we need to make sure that containers are built on run in a secure way and also the three and force for example policies to make the Clusters compliance.
00:08:51 [W] Sustainability is also an important part of what the dedicated the dedicated team should do.
00:09:02 [W] It says a team with a lot of knowledge.
00:09:07 [W] Sourcing so it's on it seems can just reuse and build on top of that.
00:09:09 [W] Well, as I mentioned earlier, we have the great responsibility as computer security and compliance.
00:09:09 [W] You're very important.
00:09:10 [W] So we need to make sure that containers are built and run in a secure way and also the 3/4 for example policies to make the Clusters compliant.
00:09:11 [W] Sustainability is also an important part of what the dedicated dedicated team should do.
00:09:12 [W] It's just a team with a lot of knowledge.
00:09:13 [W] So therefore can also look into the future what might happen in future and see how these new developments can contribute to sustainability this can help with cost savings but also with saving the environment, how can you
00:09:17 [W] These new developments can contribute to sustainability this can help with cost savings but also with saving the environment, how can you do things more efficient and last but certainly not least. We do a consultancy your support So
00:09:23 [W] And last but certainly not least.
00:09:25 [W] We do a consultancy your support So for use cases that are present within the bank we can concealed share knowledge on how they should pick up a certain use case and we give support for the teams that are using our platform.
00:09:35 [W] So this is the component that over here mentioned.
00:09:47 [W] So when we started we first went to the drawing table and create the capability overview. So what capabilities were needed by teams to start using containers.
00:09:55 [W] we use the cncf landscape as model and then we started filling in the tools to fit this guy capabilities.
00:10:02 [W] And there we make a decision that our approach would be to be as Cloud not stick as possible because what that will help us if we need to build it for both clouds.
00:10:17 [W] So in this example, you can for example see we use Helm you start form nginx Opa twist lock. Those are all examples of great technology tools that you can reuse on both platforms.
00:10:28 [W] But choosing a gladness the tools can be very time consuming because you need to do a lot of market research you need to do proof of Concepts make a decision and implement it and yeah, we did not have five years for
00:10:43 [W] That should be done in Winder.
00:10:47 [W] So we needed to be a bit more pragmatic. And therefore we decided to also look into the cloud knative services just to see where we can speed up and see if the solution would be good enough.
00:11:00 [W] So there you see also some examples in this picture quickly going through it on the left. You see how we use it as a package manager manager from deploy the application of resources on to the Clusters.
00:11:11 [W] We use Azure devops to build a pipe lines.
00:11:14 [W] Example degree image Pipeline and pipeline held back in the Creator or a pipeline to create your gloucester's we use kubenetes as an engine of the platform.
00:11:29 [W] And then we use the manage services the knative services again as a n****'s on AWS and measure we use nginx as an English controller for layer foreign layer. 7 persistent storage is being filled with knative Services
00:11:39 [W] Porridge and invested file storage.
00:11:53 [W] Well, then runs on we use at the moment dogger. But yeah, we use the standards so that can easily be replaced by for example containerd e we use for networking the cloud native first Services Godsey and I
00:11:58 [W] Scouts for artifact registry we use the knative services a CR and TCR to capture our Helm charts and our Docker images, but on the backgrounds Nexus is running and that is actually our golden
00:12:14 [W] Of other registries are connected to the golden source.
00:12:18 [W] Then on the right we have a lot of security features. So press McLeod's compute previously known as stress doc be used for scanning our containers both on built and runtime we use Opa of Impala see agents
00:12:34 [W] Spółka see some clusters.
00:12:39 [W] clusters. We use hashicorp folds for our secrets management and on the right for logging and monitoring. We also used to knative services.
00:12:44 [W] so and then company makes the decision to move from one class to the other a comment imagine that has a great impact on on the company itself, but especially for teams that are already on AWS
00:13:00 [W] Let's move to AWS.
00:13:04 [W] And so they started to bombard and a lot of teams already started moving towards AWS and that also means that they are now getting used to a certain way of working and they also are consuming
00:13:18 [W] Out getting used to a certain way of working and they also are consuming the knative surfaces month that firm.
00:13:28 [W] So if you don't introduce a new platform Asher, then you either have to tell them to stop working on what they're now doing because otherwise they will need to rebuild a lot later
00:13:35 [W] Later on and yeah, that would of course be a lot of extra waste of time.
00:13:44 [W] But in real life you're gonna tell theme so just stop doing what they're doing and let them wait until you finish the platform.
00:13:51 [W] So here is where the containerd platform comes home base.
00:13:55 [W] We use a container platform as an intermediate platform where I think an onboard they can work their with containers they can get use to kubenetes and just keep on building and in the background.
00:14:05 [W] And we can do the heavy lifting and start preparing the new cloudevents or Kaiser.
00:14:18 [W] And when the time is ready, they can just all move towards Azure and the workloads that remaining can of course, we may not need a BS.
00:14:25 [W] I did actually work pretty well because an example is a small team with an ABN Amro and they were building on E KS community service AWS and well while we were preparing on the
00:14:33 [W] More finished and we could just easily migrate them with some help and well nobody can run into production on azure.
00:14:41 [W] So that's in short or abstraction layer.
00:14:50 [W] Looks like now I would like to use words to my colleague and my rhyme.
00:14:52 [W] Other virtual coupon people.
00:14:56 [W] I hope you liked our very smooth social distancing presentation Hanover.
00:15:05 [W] Yeah. So I'm one of the engineers in the strongest team helping to build out the cloud native platform.
00:15:14 [W] Now, this is a very high level overview of one of our deployment by points, please don't worry about looking at the details.
00:15:17 [W] The idea is that this is a 10,000 feet overview. This is the pipeline we created for delivering Helm based applications on a
00:15:24 [W] the u.s.
00:15:31 [W] Our customer teams use Helm for delivering their applications and Stratus users Helm internally for delivering the components of the battle.
00:15:35 [W] So this pipe line represents us building Helm chart delivering it to a kubernative cluster in a development environment performing some integration tests promoting it to an acceptance environment holding some more tests, and then finally releasing a final
00:15:46 [W] Of the helm job.
00:15:58 [W] We when we started building this we knew we would first Target AWS, but multi-cloud was always in our strategy so we knew we would have to go to as your at some point.
00:16:01 [W] We just decided to do AWS first.
00:16:02 [W] Because we had this mentality from the beginning we were thinking in very high level components of what we are trying to achieve for the business rather than thinking about specific cloud provider tools and how to use them.
00:16:16 [W] So we came up with very high level design and we're now going to play a game of Spot the Difference and look at our same Pipeline on azure.
00:16:24 [W] just go back and let everyone have a chance to see the differences here.
00:16:27 [W] Yeah, so you've probably noticed they are actually the same image and that's was a conscious design decision. We made from the beginning by thinking in these terms of high-level functions.
00:16:42 [W] We we could have compose them together in a way that would work across both clouds.
00:16:49 [W] So when it came time to implement this delivery Pipeline on Azure, we were using agile devops instead of code billed for commit and we were using
00:16:56 [W] we were delivering to an AK es hasta rather than to any case cluster, but fundamentally the pipeline's per person consumption Remains the Same so proud of elevators we could give them the same pipeline whether they're on AWS or astral and
00:17:12 [W] I got exactly the same.
00:17:15 [W] So let's look at a couple of examples of things that went well with the cloud across think approach and then other places where we didn't necessarily follow that and why
00:17:26 [W] So here is an example of one of the an excerpt from one of the pipeline's we use when we deliver an application to a kubernative cluster.
00:17:37 [W] We apply some Opa policies and opa is running inside our kubermatic cluster.
00:17:43 [W] The pipeline will reach out to the Target cluster over will validate what is about to be deployed and then it will either be accepted or four greats compliance rules.
00:17:51 [W] It will be rejected now when we look at the same style on azure.
00:17:56 [W] If you see conceptually it's exactly the same. We have Opa running inside our kubernative pasta. The pipeline calls out to Opa and everything continues working the same. So from the perspective of our of our compliance team
00:18:11 [W] Out there on we know that this rule set will be applied by pipeline.
00:18:16 [W] So this was one of the wins we found.
00:18:20 [W] And let's take a look at the actual rules.
00:18:27 [W] So this is an example of the rule.
00:18:27 [W] We apply for checking load-balanced policies on AWS as a bank.
00:18:34 [W] We do not want developers creating internet-facing load balancers for pretty obvious reasons.
00:18:44 [W] So one of the things we do is block the creation of public facing internet, but elotl balances this error message you see here refers to a specific control which has meaning within ABN, Amro.
00:18:51 [W] If somebody sees this error message, they can go into a central organization repository and look up. What does this rule code? Actually mean, how do I mitigate it?
00:19:02 [W] Why is it here? And so on so if the developer tries to deploy something that is non-compliant, we will fail the deployment and give them a very descriptive error message of why we've locked it so they can go and figure out how to get themselves unblocked.
00:19:16 [W] But this is how it looks on AWS. And now let's look at the actual side.
00:19:23 [W] Again, very similar on AWS.
00:19:27 [W] We are using an application load balancer and the ALB Ingress controller on Azure.
00:19:31 [W] We are using the nginx Ingress controller.
00:19:32 [W] I have a cloud and the only difference is The annotation that we're checking.
00:19:49 [W] So this lets us use the same compliance code base across both clouds, which obviously gives their security teams very happy. We could even take this further the OPA language Rigo's very powerful so we could
00:20:02 [W] We could even take this further the OPA language Rigo's very powerful. So we could moduli modularize this further such that we have one policy and the policy engine knows which Cloud it's on and then checks for the
00:20:10 [W] As which cloud is on and then checks for the right time.
00:20:11 [W] So we still have some deduplication what to do here, but we're very happy that we can have one policy set and apply it across both belts.
00:20:20 [W] So one example of where we did not follow this approach is with persistent storage.
00:20:37 [W] We started off with teams on AWS and they picked up EFS EFS provisioner to use an elastic file system from Amazon.
00:20:43 [W] This mounts a containerd mounts a volume into their container and then they can just access it from their application as if it were a local storage and now on the Azure side, we have something slightly different.
00:20:50 [W] Which is the Azure file system controller provision of sorry.
00:20:55 [W] From an application perspective these all the same you have a mounted volume, which will containerd can access application can go do its thing.
00:21:05 [W] Everyone's happy when it comes to deploying this.
00:21:08 [W] There are some slight differences, you know, the differences are only in the Yamaha files which are used to deploy you either say I want an F as volume or a DFS volume with some slightly different tags and annotations.
00:21:20 [W] Because the difference is quite minimal.
00:21:26 [W] It's not disruptive the teams to have to use one or the other we decided to stick with the cloud specific Solutions rather than picking up Cloud agnostic storage solution.
00:21:38 [W] Ization took the decision that all new workloads and the majority of existing workloads will be shifted to azure.
00:21:49 [W] It was suddenly less important for us to have a cloudevents tech solution.
00:22:01 [W] So we wanted to be pragmatic and say it actually makes sense. In this case for us not to do it clouded Gnostic and have each team pick the provision up that they need when it came time for a team to move from AWS to Azure.
00:22:07 [W] They needed to change the llamo describing which provision are they want to do to the poor?
00:22:11 [W] File storage, but they did not need to change their application to have it working because it's all mounted volume from the perspective of the container.
00:22:25 [W] So because of that we decided to separate this and use cloud specific storage on each cloud.
00:22:28 [W] Can that brings us to our lessons learned?
00:22:38 [W] So we learned a lot of lessons here and then how to distill them down into three?
00:22:39 [W] The first one is no matter how wonderful kubernative is and it is very very wonderful.
00:22:46 [W] It is not magical you will need to do some work to get things working across Cloud you won't be able to just lift and shift something from as your to AWS or vice versa without spending a ridiculous amount of time in building your own abstraction layers, which is not
00:23:00 [W] Good return on investment for us.
00:23:13 [W] So our perspective is better to take advantage of kubenetes as much as possible, but still acknowledge that we will need to have some clouds specific things in the platform at various points.
00:23:17 [W] The second option second lesson learned is to be pragmatic. There are millions of different choices in the crown knative landscape.
00:23:23 [W] Many of them all perform the gold and some people have different opinions of others.
00:23:33 [W] We needed to really just be pragmatic and think what do our teams need.
00:23:35 [W] What is the best way most sustainable maintainable scalable way or us to meet those goals without getting hung up on technology choices?
00:23:43 [W] The final lesson is one believe we mentioned in our last one, but it's worth repeating also made from the start.
00:23:58 [W] We did a lot of automation from the beginning but not 100% aiming for one-hundred percent automation.
00:24:01 [W] It's like aiming for 100 percent coverage on your test results a laudable goal, but you get to ministering returns as you get there.
00:24:12 [W] However, we did realize that we may be a little bit too far on the side of manual things. Despite having
00:24:15 [W] Lots of automation. We still had a few things around testing which were manual and over time the
00:24:21 [W] Way more sustainable maintainable scalable way or us to meet those goals without getting hung up on technology choices.
00:24:31 [W] The final lesson is one.
00:24:32 [W] I believe we mentioned in our last one, but it's worth repeating also made from the start.
00:24:33 [W] We did a lot of automation from the beginning but not 100% aiming for one-hundred percent automation.
00:24:33 [W] It's like aiming for 100 percent coverage and your test results a laudable goal, but you get diminishing returns as you get there.
00:24:36 [W] However, we did realize that we may be a little bit too far on the side of manual things. Despite having a
00:24:37 [W] support summation, we still had a few things around testing which were manual and over time the
00:24:42 [W] Cost of doing those manually started to add up. So with hindsight we could have a better automate those but that's always going to be a balance when doing something like this you could spend six months also eating something and have a beautiful automated system that nobody is using
00:24:44 [W] You could spend six months also eating something and have a beautiful automated system that nobody is using or you can have an 80% automated solution that has customers on it. And we we chose for the second one.
00:24:46 [W] So that brings us to the end of the presentation.
00:24:49 [W] We look forward to answering your questions. Thank you very much for listening.
00:24:51 [W] Cool stuff. So thank you everyone for watching and some of the questions are coming through answering those now.
00:25:05 [W] So one of the questions that came through a long tube, it's verbally is how did we decide to move to Azure and do we have any guarantees about where data is stored the decision to move to Azure was a strategic decision taken the higher levels of the
00:25:23 [W] So one of the questions that came through a long tube, it's verbally is how did we decide to move to Azure and do we have any guarantees about where data is stored the decision to move to Azure was a strategic decision taken the higher levels of the company.
00:25:24 [W] Data storage will be within the EU. So we're not sending data to the US.
00:25:31 [W] Okay, and another question is why did you choose as your for your go-to cloud provider and not staying with AWS or migrating to GCE as your and AWS were already always Target platforms.
00:25:52 [W] GCE hadn't really been on the radar. So it wasn't really a potential Contender when we were deciding to switch and as mentioned this was a management decision to go towards azure.
00:26:05 [W] So Gap deter came down then we need
00:26:08 [W] To implement it that's why we good.
00:26:09 [W] Okay, and the next question is a great presentation.
00:26:24 [W] Thank you.
00:26:31 [W] How much of your application landscape is currently in containers. Now, do you have a plan for this?
00:26:32 [W] Yeah, so right now is still well that there are not a lot of workloads yet in containers because we are migrating from own brand towards the cloud as well.
00:26:47 [W] So all workloads on-prem there are still containers and most of the workers.
00:26:49 [W] Our brooms do so it's only a small percentage right now.
00:26:53 [W] A great presentation.
00:26:55 [W] Thank you.
00:26:55 [W] How much of your application landscape is currently in containers large. You have a point for this? Yeah. So right now it's still well that there are not a lot of workloads yet in containers because
00:26:56 [W] Okay, and the next question is using your containerd platform.
00:27:09 [W] Are you still able to leverage Cloud specifics as offerings or are you building everything on top of is VMS?
00:27:11 [W] Perhaps a k3s eks, we try and be pragmatic here if the cloud provider offers a service that does what we need. Then we do not want to rebuild that the whole purpose of our team is to prevent other teams from Reinventing wheels.
00:27:24 [W] So if we are then going to go and invent our own wheels, it's pretty hypocritical and under
00:27:28 [W] The benefits so we make great use of the cloud provider services.
00:27:38 [W] So for example, the basic ones being storage. We use a lot of that where we just plug into dumb storage, but also SAS application Level things if they do the job.
00:27:48 [W] Well, they fit our needs then we're not going to build something and run it ourselves just to say that we have
00:27:49 [W] Okay, the next question is did the teams have to migrate from AWS to Azure, or did you just do that transparently AKA? How did they know about it or is it all abstracted away so last year we gave a talk called from Cobalt II kubernative going to use this and we had
00:28:08 [W] Asset application Level things if they do the job. Well, they fit our needs then we're not going to build something and run it ourselves just to say that we have
00:28:10 [W] Okay, the next question is did the teams have to migrate from AWS to Azure, or did you just do that transparently AKA? How did they know about it or is it all abstracted away so last year we gave a talk called from kobol to kubernative kubernative and we
00:28:13 [W] There was no COBOL code examples and I have to confess we told a little lie in our presentation title.
00:28:18 [W] Some people notice that we switched fabric guide us and yeah, we practice a setup of devops teams.
00:28:31 [W] So it's up to the devops team to migrate to the new Cloud. Our job was to facilitate that as much as possible and to make sure that the environment they were landing on in Azure was a similar as possible to the environment. They left on AWS and destroy
00:28:39 [W] And do as many things we could to ease that Journey. So for example providing the same compliance tool in file storage connections, and so on that they were used to on AWS.
00:28:54 [W] So there was still some work involved for the teams and especially if they were using cloud provider services. So if they were using S3 on AWS, they have to rework their applications to get it working on Azure, but if they were just using Dom storage attached
00:29:04 [W] Was no rework required. So it really buried on a case-by-case basis.
00:29:10 [W] Okay, and another one why you selected kubenetes / VMS, can you give some thoughts on how much resources can be saved between the two approaches and how to select one over the other so in terms of
00:29:30 [W] Is over VMS? Can you give some thoughts on how much resources can be saved between the two approaches and how to select one over the other so in terms of benchmarks, I can't give good numbers or a good benchmarks and comparisons on the
00:29:34 [W] I can't give good numbers or a good benchmarks and comparisons on the internet. Our view is that containers and much more lightweight and efficient when people are building on containers and BMS.
00:29:46 [W] they tend to deploy more frequently more quickly and less painfully and we see the industry moving towards containers rather than v m so we don't really want to be stuck in VM land when everyone has moved to containers.
00:29:59 [W] We also find them Frankly Speaking for myself personally.
00:30:00 [W] Here I find BMS quite a pain to you.
00:30:04 [W] Sometimes when I'm doing development of infrastructural things because there's lots of waiting time with containers. I can spin up and scale up a lot more quickly.
00:30:11 [W] Okay, I think that's brings us to the end of questions.
00:30:21 [W] So thank you all so much for listening Laura and I are closing words.
00:30:29 [W] Thanks for listening and the great that we could share a story and puking again.
00:30:33 [W] So thank you all so much for listening Laura and I are closing words. Thanks for listening and the great that we could share a story and pukin again.
