Episode IV: A New Network Service Mesh: PPTQ-8047 - events@cncf.io - Thursday, August 20, 2020 7:43 AM - 42 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:04 [W] Hello, I'm Frederick outs. I am the head of edging for structure and da Ki.
00:02:10 [W] Hello, this is Nicole Guam. I'm technical lead in the office of the CTO for Kuma conch.
00:02:20 [W] So today we're going to go over a few topics the first one for those who of you who are unfamiliar with what is Network servicemeshcon
00:02:51 [W] So Nikolai, can you describe a little bit about what never servicemeshcon?
00:02:59 [W] Yeah, that looks like this mesh is different things to different people when it was designed.
00:03:15 [W] We project was targeting the developers operators and network function vendors point of view.
00:03:20 [W] view. So from developers perspective, it makes developers live seizure because they just ask for connectivity and they work with high level Primitives.
00:03:31 [W] Working on we have integration with multiple cncf projects and and we'll discuss what we've what we've been accomplishing.
00:03:35 [W] So Nikolai, can you describe a little bit about what network servicemeshcon?
00:03:35 [W] Yeah, that looks like as much is different things to different people when when it was designed.
00:03:36 [W] We project was targeting the developers operators and network function vendors point of view.
00:03:37 [W] So from developers perspective, it makes developer fly seizure because they just ask for connectivity and they work with high level Primitives.
00:03:39 [W] They don't have to bother with the terms of networking which usually is complex and how to to work with from operators per perspective.
00:03:45 [W] They you actually again you can conceptualize about these small details that that that usually The Operators have to deal with so
00:04:01 [W] Working which usually is complex and how to to work with from operators prepare perspective.
00:04:02 [W] They you actually again you can conceptualize about these small details that that that usually The Operators have to deal with so
00:04:04 [W] Lifecycle management of the of your workloads. You can also easier isolate them. You can easily monitor.
00:04:18 [W] So that's that's that's also a one of the goals for Network servicemeshcon when it started and from Network function vendors point of view here.
00:04:27 [W] We have an example firewall vendor.
00:04:33 [W] You can actually focus on the functionality on the business logic of your function. You don't have to
00:04:34 [W] to worry how it connects to the rest of the world which typically was with a big problem back in the days now with Cloud native and to Network servicemeshcon snorts all
00:04:49 [W] But overall if we have to complete this light Network servicemeshcon.
00:05:04 [W] So one of the things that we've been working on a network servicemeshcon.
00:05:37 [W] Network servicemeshcon
00:06:06 [W] Ation and authorization work. So it ends up being the same code base.
00:06:12 [W] Quality of system before we ask other people to go and build on that API and we ensure that people who learn how to build the network services that
00:06:35 [W] Who learn how to build the network services that are integrating and firewalls and also makes it very easy for them to come back in and contribute because once they understand how to build a network service then they understand how the
00:06:45 [W] stand how the internals of it work and how does the authorization work of course is details that they may have to read but it's a it's a much it's a much simpler pattern and they understand the architectural pattern with
00:06:59 [W] and how to write in Everett surface itself
00:07:02 [W] So this is the network Services API and so we have everything is that we do is a grpc API.
00:07:18 [W] So we start off with at the very top.
00:07:23 [W] What is the network service and it comes down to two primary calls.
00:07:23 [W] We have a request and a close a client can make a request for service and a client can close their service and simultaneously the same thing is true about responses.
00:07:33 [W] One of the things that we have done as well is what we when the connection when a connection is established.
00:07:43 [W] We return a connection object.
00:07:47 [W] And so that connection object gets passed through the system if gathers context like a snowball and once the system has enough context to complete the the establishment of that connection that same connection
00:07:58 [W] returned back all the way back to the user which includes information which may have IP addresses DNS may have ethernet information if you're dealing with out to may also have information about
00:08:14 [W] Through with cryptographic tokens to demonstrate that you've gone through a specific set of firewalls.
00:08:22 [W] You've gone through certain VPN or so on and this also by passing this cryptographic though construe. It also gives you the capability to reason using your off your authorization system can reason about what's within those those tokens.
00:08:35 [W] Our the API is a little bit richer than what we showed here. But these are the the core apis that represent the the heart of an assembly.
00:08:51 [W] I would like to outline one very important thing here in the API.
00:08:56 [W] It's the path and the path segments on the left.
00:09:01 [W] left. So this is a relatively New Concept that was introduced recently to get on Tori something already, but
00:09:07 [W] was kind of new to nsmcon.
00:09:13 [W] It is inspired by some of the more lower level networking Concepts but is is brought to this new high-level grpc API much easier to consume much easier to process
00:09:23 [W] It gives you an idea. I like from a vendor like network service vendor point of view when you get this part you like the the implementation knows where
00:09:39 [W] this pocket or does actually it's connectivity is going to pass who are the other players in the system if you need to know that and for people that have built networking Solutions in the vectorization world
00:09:56 [W] Service function chaining or as we prefer to call it service composition here in nsmcon tonight to improve Mountains information that you can give it on time.
00:10:10 [W] So here we have a very basic example.
00:10:21 [W] This is an example of a grpc client and the client is connecting to a network service manager and is making a request for a network service and so you can see the
00:10:35 [W] Been created using this D standard grpc path. We ask for the name that connection has been established with spiffe E and Spire which we'll get into soon and you can see the request has been made and the response is a
00:10:51 [W] From grpc as a connection or an error as to why the connection failed in the top you can see the general flow of how this ends up looking you see a request coming from from the
00:11:07 [W] Client those two nsmcon will for thy request to the network service and they will configure the data plane in order to make sure that the Pod and the network service are capable of communicating with each other.
00:11:23 [W] What's key here though is that nsmcon does not sit in the data plane?
00:11:28 [W] It's in the control plane.
00:11:33 [W] So it is that does not slow you down in the data plane if you have a faster data plane that you want to bring in also when?
00:11:37 [W] We conceptualize here when we say nsmcon the plane when we talk about control plane its key thing to mention that it is a distributed one.
00:11:53 [W] It's not a central. It's not like the traditional sdn software defined networking control planes.
00:12:01 [W] planes. It's a distributed one very much in the concepts and inspired by the concept behind Cloud native the same is for the data plane. It's not
00:12:08 [W] Single entity.
00:12:12 [W] We are probably not going to go into details.
00:12:16 [W] You can go and check out our docks and see how it is implemented. But essentially it's a distributed one.
00:12:18 [W] Have here what's called a network service.
00:12:49 [W] We call it a chain. So the chain in the case of a client when that client was called saying I want to connect to something the connection goes through a series of microservices that literally follow the exact same grpc API.
00:12:57 [W] That we showed you before and so each so we have authorized as a as a grpc service said ID and he'll and so on but they don't connect out to the outside world.
00:13:13 [W] They simply reuse the API mechanisms itself if the actual API interfaces, so these are all internal services that are within the process.
00:13:26 [W] So the system will run it through an authorized service and an asset ID surface.
00:13:27 [W] He'll service and each of these have been component.
00:13:33 [W] I sized and have been isolated from each other and that connection object passes through each of these before it gets emitted to the nipple servicemeshcon, which then runs it through its chain which includes the authorized the token generator doing Discovery.
00:13:47 [W] I like running through the Kinect which then itself goes through to the end point which then itself goes through the entire set of things that are like authorized monitor making sure that the there's a timeout for the connection and and so on
00:14:02 [W] Which is the additional the additional functionality which represents your network service, which is the thing that configures your firewall or configures your data plane.
00:14:18 [W] And so this so this pattern is followed over and over again.
00:14:31 [W] And and so what we said that we were normalizing and make and making it follow the same pattern like we we really doing that like this is this is a
00:14:33 [W] is a pattern that allows us to to make sure that we have things that are easily isolated that we can easily test. We can reuse in other components. You can compose the things that you want or don't want to leave out the things you don't want
00:14:48 [W] Out a network service that that allows you to also replace portions. I give you don't use the same authorization that we use.
00:15:00 [W] Maybe you have your own set your own service. If you can write that that microservice or if your vendor provides one in the future, then you can plug that in and off you go.
00:15:10 [W] interesting fact this whole idea started back in 2018 and Cube con Seattle where we were trying to design the very first version of the SDK and then we ended to put so good design that we
00:15:25 [W] the whole project should be slowly migrating to to to the idea of chaining component of
00:15:36 [W] Cool, so we have here an example of some code that we pulled out.
00:15:52 [W] So this code what it is is is journaling specifically so it's not this not I am as the example says on the top.
00:16:01 [W] It's journaling. And so what we're doing is we're we're taking a result from iPad and if you look in the there
00:16:07 [W] First step is creating the new server and that new server is now living within the within your your service your employment.
00:16:19 [W] Then when the connection goes through this the very first thing that it does is you can see on the right hand side about five or six lines down.
00:16:27 [W] you see this connection comma are is equal to next server requests. And so what that is doing is its forwarding it's it is
00:16:37 [W] Evaluating the rest of the week of the request first and setting it through the chain first and when it gets the response back because it itself as a client.
00:16:49 [W] So when the connection comes back with that's been resolved as a client then it's going to look at the information.
00:16:55 [W] What connection paths do you have?
00:17:11 [W] And it's going to then publish that to maths. And so this specific one was designed so that we could have iPad and you could use Whatever item you want and then you could stick a journal on top of it so that if your iPad never fails then you can using
00:17:14 [W] Let's Replay that set of decisions through your iPad and get you that resiliency in an easy way without having to to mix together the journaling and the ipam together.
00:17:27 [W] So it makes them split up.
00:17:28 [W] It's them out of the nice way that allows you to have the same mechanism the same set of code that interacts with any form of iPad that you that you want.
00:17:43 [W] And so we wanted to show this as an example of the the API and how
00:17:44 [W] How simple the API itself can can be and as a working as a working example?
00:17:51 [W] So Nicholai, we have this virtual L3 use case that we've been working with.
00:18:10 [W] Can you describe a little bit for us?
00:18:11 [W] Yeah, it's violently turns out that it's a this is a very very common use case and once it was shown we got a really big interest
00:18:27 [W] The talking to us. So the virtual layer 3 is effectively being able to build a distributed virtualized 3 connectivity
00:18:43 [W] For example for things that are that you can build high level like interconnection of higher-level servicemeshcon.
00:19:13 [W] Things the basic idea is that you build out a set of small Network servicemeshcon.
00:19:27 [W] You have kind of a Gateway, which is not really the Gateway that you you would see in the traditional kubernative Saint or other setups it effectively so it's a very transparent.
00:19:38 [W] One but as you can see here on the picture, okay, it's a router but effectively the idea is that it consumes the other remote routers as services.
00:19:53 [W] It consumes the other remote routers as services.
00:19:57 [W] So it's a kind of like a servicemeshcon of servicemeshcon.
00:20:00 [W] You have your own network servicemeshcon sewing your clusters and then the interconnectivity in between them is again a kind of network servicemeshcon.
00:20:17 [W] But also a control Clan one like it's not that every each and every service in cluster one will see each and every service in Coaster to it's only the members of the particular servicemeshcon Securities settings.
00:20:34 [W] Dalton station said it set of this effectively allows you to build a set of such virtual let three networks that can interconnect all these
00:20:50 [W] The same time they can work in parallel as if as if this connectivity doesn't exist.
00:20:59 [W] So the workloads out leaving one of these virtual are 3-1 see like the services won't see the other than services and this actually unlocks a lot of a lot of other use cases
00:21:12 [W] In people that are building much more complex Solutions and I'm short feathery can can give better examples here, but essentially everyone that was trying to interconnect
00:21:27 [W] And distribute Services have have stumbled Obama upon the obstacles of how to interconnect.
00:21:37 [W] What's the IP of this of these data center was the submitted in the other data centers are there conflicts which DNS I use nsmcon tweet this you effectively get a unified view cross Data Center.
00:21:52 [W] Network and your workloads can consume the same DNS server, etc, etc. So that's kind of the high level overview for what this is use case is about
00:22:06 [W] And a quick note, so we have a core DNS plug-in that we've linked in here.
00:22:17 [W] So we are our community created this plug-in that's called a fan a plug-in that's designed to to take multiple DNS service servers and allows you to make a call to
00:22:27 [W] Man has the fan out the request to others and found them back in and you can control that dynamically. So you can add and remove servers as you add and remove networks within your within your system.
00:22:43 [W] And so the what are the next steps that we are going to accomplish in the near future is the injection of that DNS into information into Network servicemeshcon.
00:22:54 [W] We already have something to pass the DNS configuration in and out but making sure that it works within the veil three use cases.
00:22:58 [W] So that we solve not only the L2 and L3 use case of getting that connectivity or specifically the L3 connectivity in this scenario.
00:23:13 [W] But we also solve for the DNS problems that the release give the tools to solve DNS problems that are part of a complete L3 solution.
00:23:17 [W] One addition that I would I would like to add here is when we say clusters.
00:23:26 [W] It's not necessarily only Big Data Centers. You could be an edge the deployment of for workers and zettaset.
00:23:33 [W] So it's a kind of a way to unify your distributed infrastructure.
00:23:34 [W] So it's not necessarily connecting big deployments. It can be too small a large number of small deployments.
00:23:40 [W] Okay.
00:23:44 [W] I would like to hear yes when we say clusters.
00:23:58 [W] It's not necessarily only Big Data Centers. You could be an edge the deployment of for workers and zettaset.
00:23:59 [W] So it's a kind of a way to unify your distributed infrastructure.
00:23:59 [W] So it's not necessarily connecting with deployments.
00:23:59 [W] It can be too small a large number of small deployments.
00:24:00 [W] Okay.
00:24:00 [W] so part of how we accomplish this though is that we also want to make sure that we accomplish what we described before but also ensuring that we also maintain a good level of security and so
00:24:01 [W] Of security and so we start with the same cryptographic identities that the application servicemeshcon juice and when we say application meshmark mean L4 and I'll serve in there talking
00:24:13 [W] Notes, they are manipulating HTTP. So never servicemeshcon course is primarily on layer 2 and layer 3 and you'll see a little bit more in the soon.
00:24:25 [W] We are layer 2 and layer 3 identities that that get a test that and get at it and the idea behind that is that we can cryptographically identify one service to another and so we can cryptographically identify.
00:24:39 [W] the thing that controls your firewall the thing that controls your VPN and make sure that when they can communicate with each other that not only do they know who they are, but that we can then build that policy on top of them so that we have a cryptographic
00:24:54 [W] There are who they are who they say they are and we use Spire which is the reference implementation of spiffe e for that.
00:25:02 [W] I think about did so this is a pretty revolutionary use of the whole spiffe e and Spire of course is a concrete implementation of a runtime because we are actually more the tradition when it was designed
00:25:18 [W] dot dot dot dot it's used in other projects is that you actually do this authentication on the higher level as you said there for seven, but here you were actually doing a lot much much lower level the connectivities level and
00:25:34 [W] Effectively. This is of this is a new way of using the whole concept.
00:25:43 [W] And so when we look at how this ends up working and so we have this broken up into two slides.
00:25:53 [W] So the first part is we have this separation of control plane from your data plane that we mentioned before so you have something that you have your pod that has your application. You have your firewall and point the controls your firewall your intrusion detection
00:26:06 [W] That that allows you to control your intrusion detection system and etcetera Etc. Does you to go down for the team?
00:26:19 [W] So there's a separation between control plane and data plane that exists here when we start looking at how to do this.
00:26:28 [W] How do we integrate spiffe e what would looks like is something that looks like this every major service gets an identity. So the firewall has an identity or Juju detection system as an as an identity, so
00:26:37 [W] When the Pod makes a request for secure corporate intranet axis that the these are the identities that the operator can say the system must Traverse through in order for that service to be rendered in
00:26:52 [W] to to be successfully connected
00:26:56 [W] Point well, the interesting things here is that actually some of these can be Hardware accelerated or even implemented in Hardware so effectively we can say that with nsmcon lock the ability to
00:27:15 [W] TV on hardware-accelerated resources
00:27:20 [W] Yeah, and possibly in some scenarios not only bring it down to the hardware to for that performance, but also in the in the future it should be possible to
00:27:37 [W] If you're running your network services on in kubernative itself, you should be able to actually tie them down to the TPM module until you can verify the hardware that it's running on act indeed came from you as well.
00:27:52 [W] So there's a lot of really interesting work that's going on in spiffe E that that is above and beyond this.
00:27:56 [W] It's Cutting Edge.
00:27:59 [W] So there's new work that's going on with transitive identity. And you work that's going on towards how to how to Federate spiffe e trust Ami
00:28:07 [W] He's together. So there's a lot of more interesting work that's coming out of this and we're hoping that hoping but we're in the process of helping them work out what some of those things look like. It was well within those communities.
00:28:19 [W] And so finally when you do the connection, this is what it ends up looking like from at the station perspective perspective.
00:28:31 [W] You have your app your VPN Gateway those of those have their spiffe identities.
00:28:36 [W] You have a trust between the two organization. So it gets you this gets you the ability to multi-organizational trust with with spiffe is Vivian Spire for your for your workloads.
00:28:45 [W] So the the last thing to really tie these things together is open policy agent. And so I pulled an example from the repository and with from nsmcon what this policy is doing is
00:29:05 [W] Stocking exclude the tokens that come in. So we're talking the represents the identity of everything that's gone through our the token has expired. So if and what we do is we run them through a through a thing that says tokens
00:29:20 [W] Run them through a through a saying that says tokens expired must be false.
00:29:26 [W] And that's the last line in the go code that you can see here.
00:29:31 [W] And so this allows us to create that policy using something that's declarative and create Advance policies that are backed by data backed by databases and are able to be changed over time in a controlled
00:29:41 [W] Policy becomes pull requests and so this and this so this is making use of open policy agent, which is another cncf project spiffe Inspire our cncf projects as well.
00:29:57 [W] And so we're integrating these things together in order to in order to provide that that cryptographic so secure policy.
00:30:05 [W] And tying it into the previous graph that we see these are the places that we have injected open policy agent.
00:30:21 [W] So it's not just a connection on the outbound but also the connections on the inbound like the client also has to ask a question that the server render something to me that I that I trust that I the that fits my policy so your policy from the from the server side
00:30:34 [W] Turn on the outbound but also the connections on the inbound like the client also has to ask a question that the server render something to me that I that I trust that I the fits my policy so your policy from the from the server side you have policy from the client
00:30:36 [W] I am site identity on the server and client both validating each other and ensuring that they that they indeed follow policy.
00:30:43 [W] So with that we want to thank you for your time and for hearing what's new with in the network servicemeshcon Unity.
00:30:54 [W] Feel free to come join us.
00:30:57 [W] We have the links here on how to join in in the community section. We have mailing list. We have slack the our slack Community is very active.
00:31:07 [W] If you post a message on the slack Community, you're very likely to get an answer quickly. And we also just had nsmcon EU which just happened the videos if they're not ghosts.
00:31:15 [W] Ready, they will be posted in this location.
00:31:19 [W] So come find it over here.
00:31:24 [W] And as of now, we have all of our weekly meetings at 7:30 a.m.
00:31:28 [W] For the weekly developer PR meetings and at 8 a.m.
00:31:28 [W] a m-- Pacific every Tuesday for the general nsmcon has as well. So please come come and talk with us.
00:31:39 [W] us. Join in join us in slack have conversations with us, and we will be around for a few more minutes to answer questions. So, thank you very much.
00:31:45 [W] much
00:31:46 [W] Thank you.
00:31:48 [W] You know.
00:31:56 [W] So let me check with our sound engineer you can I can be heard properly right?
00:32:05 [W] Is just a little housekeeping.
00:32:15 [W] So the slack Community I mentioned is pound nsmcon the cncf slack which many of you have already joined and also the event videos from nsmcon T. You
00:32:26 [W] List so you can go and see them through there.
00:32:33 [W] Let's see in terms of the questions.
00:32:39 [W] So the first question is I'd like to write my first app that uses nsmcon slideshow Sarah Zapped you have sample code that implements a simple app that I can use to the bases from building my own Simple app that makes
00:32:48 [W] To such a repo exist in GitHub. So what I showed you right now with the SDK is something very new that we've that we've built what we have an older version of nsmcon. We have again examples repository
00:33:04 [W] I will post that example where you cause a Tory in in slack in short wild but there's some examples of their that that you can follow little very close.
00:33:20 [W] So there's two levels of integration that I expect to see very common and least in the kubernative space.
00:33:31 [W] It didn't I'm expecting there to be pre-canned apps. Like if someone wants to connect two things together that are in different clouds. That's
00:33:35 [W] Primarily a configuration of thing and so we want to be able to have nsmcon.
00:34:01 [W] we were expecting to see people eventually build out their own custom set of services and the place to look in that I see I don't think I have a good way to to show this particular part off, but I'll post another link on there
00:34:17 [W] The second the second thing that we are expecting to see is we're expecting to see people were expecting to see people eventually build out their own custom set of services and the place to look in.
00:34:18 [W] Steve the code that I showed before the Chota chain, you can base you can build off the same the same set of patterns.
00:34:30 [W] So you would you would start off with a with a network service endpoint chain.
00:34:33 [W] You would Implement your network service using the API and then when you instantiate that that chain then that chain will then make use of all the Machinery that we showed it just now
00:34:45 [W] it that that chain then that chain will then make use of all the Machinery that we showed it just now and we'll also run your section of code and I'll link to where that chain is as well so that you can
00:34:51 [W] And of code and I'll link to where that chain is as well so that you can so you can see that how that works in terms of the new SDK.
00:35:00 [W] We should have it all up and running pretty soon.
00:35:03 [W] There's a there's a couple more things that we have to work.
00:35:14 [W] Hank. We do have it working. We have we have traffic flowing between systems using the new SDK but there's a few things that we need to do in order to make it usable so that people can can start building on it.
00:35:19 [W] So thank you very much for that question.
00:35:20 [W] It see I don't see any other questions. So we still have a few more minutes.
00:35:36 [W] So if anyone wants to ask me any questions, then it'd be fantastic and you know get you an answer.
00:35:37 [W] It will last stand by for a minute or so.
00:36:03 [W] Oh great question.
00:36:06 [W] So next one.
00:36:09 [W] What is the relationship to other projects?
00:36:13 [W] I will stand by for a minute or so.
00:36:23 [W] Oh great question.
00:36:23 [W] So next one.
00:36:23 [W] What is the relationship to other projects?
00:36:23 [W] So other projects that the the projects that I showed, I assume you mean the the ones in in the video. So the other projects that we
00:36:24 [W] The other projects that we discussed were spiffe e and Spire spiffe e and Spire spiffe e is a specification on how to rotate identities and a test them Spire is a
00:36:37 [W] You should know that specification. And so but Spire is a cncf project as is Network servicemeshcon.
00:37:07 [W] Our we've they were his they're they're Loosely coupled in that they don't require each other to run. In fact, nsmcon not require spiffe e and Spire or oh but to actually run but we've implemented them in default.
00:37:22 [W] So that so so that's how it that particular part is like the relationship between them now there there is another thing. So when an additional question on top of that is what about things like
00:37:39 [W] And motifs and similar so nsmcon different set of goals from from them.
00:37:50 [W] So groups like Batman from Nokia are designed to create a interface that is within a pod like that is our primary purpose is to be what's called a sea and I'm old diplexer. Nsmcon
00:38:02 [W] cni-genie
00:38:32 [W] and nsmcon focuses on the high level stuff. Like how do I connect these pods together or how do I create the service function chained together across across systems or how do I configure the sdn to do something special based upon the requirements provided by
00:38:48 [W] so to be precise damin is specifically about how do I land using a cmips ugh in a secondary interface in my pod while for Network servicemeshcon sa implementation detail and we're working
00:39:04 [W] foreign aid what happens around and and they enabling the Machinery behind that that interface through the configuration of other sdns or other resources, so
00:39:20 [W] The Machinery behind that that interface through the configuration of other sdns or other resources, so hopefully that answers the question and I want to thank everyone for your time and
00:39:26 [W] Hopefully that answers the question and I want to thank everyone for your time and feel free to reach to reach out to me.
00:39:29 [W] We're in Channel 2 Dash Q Khan - maintainer.
00:39:36 [W] There is a threat where we can continue these conversations and simultaneously also come join us in the nsmcon 'l within within cncf slack. Take care.
