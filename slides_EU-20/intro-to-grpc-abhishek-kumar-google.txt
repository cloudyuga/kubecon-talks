Intro to gRPC: VKWW-8999 - events@cncf.io - Tuesday, August 18, 2020 11:44 AM - 50 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:15 [W] Hello, everyone.
00:00:18 [W] Thank you for joining this session about grpc.
00:00:25 [W] This is an introductory talk about grpc.
00:00:29 [W] We do have additional presentations on various aspects of grpc through this conference, and I have
00:00:41 [W] Laid with a quick summary of all the other talks that are happening around grpc.
00:00:51 [W] In this talk, we are going to cover grpc as an overview.
00:01:04 [W] I will start with a brief description of what grpc is.
00:01:10 [W] We'll do a quick exercise of going through what it takes to build a grpc service and then we'll jump into a discussion of the various features
00:01:20 [W] One gets while using grpc.
00:01:26 [W] I'll wrap up the TOC with a brief discussion of some new efforts that the grpc project has picked up and we'll have time
00:01:37 [W] PC project has picked up and we'll have time for Q&A during the live session.
00:01:41 [W] Grpc is a remote procedure call system remote procedure calls were invented a long time ago for client to server communication.
00:01:59 [W] The idea was to provide a function call or a procedure called abstraction to the developer while abstracting away the fact that the implementation of the function of the procedure
00:02:10 [W] us to provide a function call or a procedure call abstraction to the developer while abstracting away the fact that the implementation of the function of the procedure is removed from
00:02:12 [W] Quote from where the call site for that function is this provides a very powerful abstraction because as a programmer the fact that the function is implemented in a completely
00:02:26 [W] Entity that's removed and accessed over the network is fully hidden away. And the programmer does not have to deal with all of the details of networking to reach that server when they are thinking about how to
00:02:43 [W] Grpc was built by the team that has been building remote procedure call systems at Google for quite a bit of time. Now the micro service architecture
00:03:01 [W] Quite a bit of time now, the micro service architecture has been the preferred way of Building Services at Google for many many years and grpc system at Google called
00:03:10 [W] PC system at Google called stubby has been running at a pretty substantial scale and grpc has benefited from everything that we have learnt while building and operating stubby over the years.
00:03:25 [W] I will now briefly cover the process of building an RPC service.
00:03:34 [W] When you're building a grpc service, you typically start out by defining your service in an interface definition language. We support protocol buffers as the as
00:03:50 [W] The Box solution but other others competing Technologies are also supported given a definition of your service and I'll go into this in some more detail one generates the client and server-side
00:04:06 [W] Mission of your service and I'll go into this in some more detail one generates the client and server side stops and then goes and actually implements the server side logic if they're building a service and invoke the
00:04:15 [W] Side logic if they're building a service and invoke the client side stops if they're just brilliant client to that service.
00:04:18 [W] so let's go into this in a little more detail protocol buffers were developed at Google and open-sourced several years ago and they provide three important features first,
00:04:34 [W] Language for defining and describing the data model and the interfaces second.
00:04:49 [W] They provide a way to serialize the data that's sent across the wire and third they provide the interfaces of findings across different languages.
00:04:58 [W] There are other competing Technologies such as flatbuffers and bond from Microsoft, which can also be used to provide similar functionality.
00:05:09 [W] So defining the data model and the interfaces this so the data model definition just looks like you know stropped
00:05:25 [W] Taking whatever programming language you use. It allows you to very precisely capture exactly the different skills and very precisely capture the
00:05:41 [W] The information that's going to be sent back and forth.
00:05:45 [W] The first definition which is the operations are procedure or function calls that are being implemented can also be defined in the proto-language in a in a manner that's agnostic to the
00:06:01 [W] Language in which you are going to implement a call these functions from now grpc does provide different streaming types. In addition to you real PC's and we'll talk about streaming in more detail in a forthcoming slide.
00:06:17 [W] Once the interface is have been defined in the proto-language code generators are provided to convert the took to go from this profile to the idiomatic function
00:06:34 [W] years in the language of choice these signatures tend to be idiomatic for the target language and allows the programmer to take over from there and either implement the service or call into the
00:06:50 [W] Take over from there and either implement the service or call into the service as they might desire.
00:06:54 [W] Here's a quick example.
00:07:00 [W] So given the given the methods that we listed in the previous slide. This slide shows the generated code on top. You have the client side signature for the
00:07:09 [W] client calls and at the bottom you have the server side signature of the servicemeshcon term for the server side implements and that's the implementation that gets invoked by grpc
00:07:25 [W] To rights. So at this point the programmer takes over the server side programmer would write the code to implement the service on the server side and the client side program. I would write this tub code the code for invoking the stubs
00:07:41 [W] PC methods on the stumps to get the standard procedure call experience.
00:07:49 [W] So in summary you start with an interface definition language to describe the API the parameters and return values you run code generators that generate client and server-side
00:08:05 [W] Yeah, the parameters and return values you run code generators that generate client and server-side stubs. And then you use depending on whether you're building the
00:08:11 [W] You use depending on whether you're building the client or the server or both you use those tubs to build up your application under the hood.
00:08:21 [W] This is all taking and there's a lot of detail in the implementation that will go over in the next few slides but it takes advantage of a bunch of http/2 features and provides a bunch of additional functionality. All of the
00:08:33 [W] It takes advantage of a bunch of http/2 features and provides a bunch of additional functionality.
00:08:34 [W] All of the code is an Open Source on GitHub.
00:08:38 [W] In fact, all of our development happens GitHub first and the team at Google does import it on a daily basis into Google's internal code base where it's used extensively, but all of the development code reviews,
00:08:49 [W] But all of the development code reviews proposals and testing is visible to everybody by a key for GitHub site.
00:08:58 [W] I'll now switch into a discussion of the various features that one gets out of grpc.
00:09:09 [W] And this ends up being the core sort of set of reasons.
00:09:13 [W] why anyone would adopt grpc.
00:09:21 [W] So let's start with the fact that grpc is available in many many languages as you can see, there's a long list of languages where grpc server and client Library.
00:09:29 [W] are available this is very powerful because it allows people to use the right language for the task at hand without worrying about the language being used by
00:09:43 [W] You to interface with so you might have Android client using grpc Java for Android calling into a grpc service that's implemented in Java or go or Python. And these two these two
00:09:59 [W] Be relatively independent from each other except for the service definition that they both need to agree.
00:10:07 [W] In addition to languages grpc is also available on many different platforms.
00:10:16 [W] We are of course heavily used on Linux.
00:10:21 [W] We are grpc is also available and widely used on Windows and Mac OS in addition to both IOS and Android as mobile platforms and bindings for using grpc are also
00:10:35 [W] From different Stacks that are popular across the across the community.
00:10:46 [W] We talked about protocol buffers and the what we really care about of protocol buffers is a very clean mechanism for defining the contract or the interface between
00:11:02 [W] Components of a distributed system and this notion of having a strongly typed contract is quite powerful because it allows for a lot of the addition of a lot of the development
00:11:18 [W] And the two sides there are conventions available for both backward and forward compatibility of these apis.
00:11:28 [W] So one does not necessarily get fixed into one particular version of the contract that they specify data point in time. Now, I will point out here that conventions
00:11:42 [W] Doing things like semantic versioning or rest or crud can all be implemented on top of this. These interface definition language is like protocol buffers and they are in a way complimentary
00:11:58 [W] closer, so if if someone wants to use rest, they can absolutely go and and enforce their rest conventions on top of the protocol buffer language and get a restful API, which happens to be
00:12:14 [W] Of the protocol buffer language and get a restful API which happens to be specified using protocol buffers.
00:12:16 [W] Performance and efficiency has been one of the core focuses of grpc. HTTP to itself was designed for high performance and this starts becoming more and more critical as you go to.
00:12:33 [W] service to service communication where you typically want to reuse the connections and really leverage all redundancy in the communication to try to be very
00:12:49 [W] So service to service communication where you typically want to reuse the connections and really leverage all redundancy in the communication to try to be very
00:12:50 [W] And this is where grpc really shines and you would see how you should expect to see a significant amount of improvement over, you know, just opening an entire TCP connection to do a small number of requests or just one
00:13:05 [W] The grpc libraries were designed to be extensible.
00:13:16 [W] There is a lot of functionality that is provided out of the box. If you take the example of authentication mechanisms or Monitoring Solutions, but there are there are additional
00:13:28 [W] Vision points depending on the language. We typically have a facility for interceptors additional facilities for plugging in custom transports and these allow
00:13:42 [W] Various users in the community to plug in their own solution their own preferred solution for all kinds of features and you have a bunch of them listed on this slide.
00:13:58 [W] Finally ease of use is something that has been a priority for the community working around grpc or early in the project.
00:14:14 [W] There was a lot of emphasis on improving the installation experience and we do a lot of work to make sure that there's a single line installation available in in several languages that we're
00:14:26 [W] The API is have again been designed to be idiomatic for the target language. And we continue to explore API paradigms as language has evolved and so and come up with new
00:14:43 [W] For expressing asynchronous functionality there are facilities for propagation of Errors for propagation of cancellation and deadlines and connection management.
00:14:58 [W] The intent here is to try to isolate the programmer from the details of everything that could possibly go wrong on the network.
00:15:11 [W] So I grpc channel will for example reconnect automatically when the underlying connection breaks and you know, we'll also provide all kinds of load balancing and other functionality which is relatively
00:15:24 [W] User and allows the programmer to focus just on the higher level logic of the distributed system.
00:15:32 [W] I'll now talk briefly about streaming most RPC systems start out supporting a unit grpc, which is a single request sent from the client to the server and a single response message coming back.
00:15:50 [W] In the evolution of grpc his predecessors at Google. We noticed that we found ourselves adding on support for streaming first in the server to client Direction and then eventually in the client
00:16:06 [W] Sweat and streaming and stop being very useful in a variety of situations. If you imagine anywhere where you're either cutting up large objects into smaller chunks and sending them over or you
00:16:21 [W] real-time long drawn-out interaction like a chat session where a client where one side might send a message wait for the other side to respond and continue sending additional messages the ability to express all of this using
00:16:38 [W] Long-lived RPC call is does end up being quite powerful grpc was designed from the ground up to support streaming our PCS under the hood.
00:16:53 [W] We just Implement a bi-directional streaming or PC wire protocol and all the different variations that you see listed on top of this slide are actually implemented as special cases of that vibrational stream.
00:17:06 [W] And for that reason grpc does really shine when yugabyte
00:17:08 [W] You get various streaming use cases, which do end up appearing as you get towards the more sophisticated ends of distributed system design as mentioned
00:17:23 [W] All of the development happens on GitHub grpc has been in cncf for over three years now and all design changes go through an RFC like process.
00:17:38 [W] Being standards-based has been very powerful for grpc.
00:17:43 [W] It has allowed for example the ability to interoperate across proxies and firewalls built by different vendors without any explicit action on the part of the development
00:17:58 [W] A PC it also allows for deployment in all kinds of diverse environments.
00:18:05 [W] And a brief note about production readiness.
00:18:11 [W] Grpc is well tested.
00:18:20 [W] There's a very large suite of tests that are run and are visible through our GitHub site.
00:18:30 [W] There is a well-defined suite of interop tests that test for cross-language interoperability and also serve as the standard for
00:18:41 [W] For feature completeness of any grpc OG grpc implementation and a new language.
00:18:54 [W] There's a lot of support for operational aspects of getting something into production such as start stressing monitoring.
00:19:04 [W] We have a feature called Channel Z, which for example allows you to request details of live connections and get all kinds of detail information about how much data has been sent back and forth.
00:19:11 [W] What kind of compression benefits are being realized and so on and these things allow very very powerful monitoring of life system as well as good
00:19:27 [W] Is when one needs to debugger optimize their system.
00:19:32 [W] All of this has resulted in very good adoption. And today grpc is used heavily across the industry by a number of organizations large and small and all kinds of teams.
00:19:48 [W] Trying to build distributed systems.
00:19:54 [W] This is just a summary of what we talked about in terms of features again, you know, there's a lot of emphasis on being available everywhere
00:20:07 [W] able to provide the right extensibility while paying attention to ease of use streaming support and standards compliance is their performance and efficiency is something we care about deeply and we do
00:20:22 [W] is their performance and efficiency is something we care about deeply and we do have a lot of detail performance tests again available through our GitHub site as well
00:20:32 [W] Able to our GitHub site as well and it's Benji for a while and it's used heavily in production by a number of Partners.
00:20:42 [W] introduction by a number of Partners
00:20:43 [W] Before we wrap up. I wanted to talk briefly about new features that are coming out in grpc.
00:20:57 [W] And this might be interesting for those of those in the community that would like to start contributing to the grpc project as Developers servicemeshcon.
00:21:14 [W] between microservices or services in deployment environments maybe public clouds may be private clouds may be some sort of an on-prem deployment and in these servicemeshcon
00:21:29 [W] is it's quite powerful to have a control plane that that sits on the side and he's able to orchestrate the flow of traffic and the flow of policies that are
00:21:45 [W] That traffic going between a client service shown a service a here and service B, which is the water plant service is trying to speak with we have chosen to go
00:22:00 [W] The envoy apis.
00:22:09 [W] These are quite XD sap is X is for the different variations of Discovery Services.
00:22:20 [W] There's a listener Discovery service of our Discovery service cluster Discovery service and so on.
00:22:27 [W] So these XTS apis have been defined in the envoy project and are typically used by the on why prodyna.
00:22:31 [W] Roxy when speaking with a control plane such as sto to try to orchestrate the communication across the servicemeshcon C has adopted the same XTS apis.
00:22:46 [W] So in principle the same control plane that was orchestrating communication between applications that were sitting right next to Envoy sidecars that same control plane can now
00:22:59 [W] Occasion between grpc clients and servers or a hybrid scenario where one endpoint is using an Envoy sidecar and the other endpoint is a straight-up grpc application without an Envoy sidecar proxy.
00:23:15 [W] The XDS support has been released in grpc, 1.0 1.33 with client-side sport for the listed XTS protocols and load reporting via lrs
00:23:32 [W] X ts protocols and load reporting via lrs.
00:23:40 [W] Then there is additional work ongoing and the team is continuing to look at more and more of these servicemeshcon chours in the XTS apis with the intention of providing a more first-class experience.
00:23:48 [W] In sport grpc developers when work when building for a servicemeshcon of deployment.
00:23:55 [W] With that I'll wrap up the prepared version of this talk and we do have some time for Q&A and I would welcome any comments or remarks and questions that
00:24:11 [W] Some time for Q&A and I would welcome any comments or remarks and questions that the audience might have.
00:24:12 [W] Thank you.
00:24:14 [W] Hello everyone.
00:24:26 [W] This is Abhishek.
00:24:26 [W] Come on.
00:24:29 [W] I do have live questions in front of me. I'm going to start going through them one by one and I read out the question before answering them.
00:24:41 [W] I
00:24:42 [W] We'll try to announce the to read out the name of the person who asked the question and I apologize in advance for mispronouncing any names.
00:24:56 [W] So we have a question from kannberg Koch when you suggest to you. When would you suggest to use restaurant grpc?
00:25:03 [W] Is there any specific use cases?
00:25:04 [W] where rest has advantages over grpc?
00:25:06 [W] So we touched on this briefly in the talk.
00:25:11 [W] Grpc is a generic mechanism for our PCS.
00:25:20 [W] It doesn't take a stance on exactly what conventions and application developers should use and rest is a set of conventions that have been shown over time to hold some value
00:25:33 [W] Being able to develop and build application apis and grpc supports rest just fine.
00:25:49 [W] So if if someone wants to use the rest conventions, they can absolutely a Express those conventions while using grpc as the underlying mechanism for making the actual calls, which
00:25:58 [W] Having a rest API so the rest conventions the rest philosophy is not something that is somehow in opposition to grpc grpc is just a mechanism to go build your apis. And if you want to follow rest conventions on top you should be
00:26:13 [W] To go bail your apis and if you want to follow rest convention from Top you should be able to do.
00:26:15 [W] I'll move on to the next question from Bastian heilman is grpc. Well suited for a long-running requests like three hours.
00:26:31 [W] The answer would be yes, but it depends on what kind of network connectivity the client and server have so in typical.
00:26:40 [W] Cluster environment where the client and server are co-located and you expect TCP connections between them to survive for three hours or three days.
00:26:56 [W] I having long-lived RPC sessions is just fine. And we do see many cases where people have very long-lived hanging get type semantics for their our PCS where they'll make a request
00:27:05 [W] Kind of applications of watch for something to change and these are pieces will be very very long-lived.
00:27:14 [W] So three hours or 12 hours should be just fine. Ultimately. You just have to think if I had a TCP connection between this kind and server.
00:27:26 [W] How long would it survive if you are going across the Internet it's unlikely that it will survive for longer than a day. If it's within the same data center. You might have much better control and they might survive for much longer.
00:27:34 [W] Moving on the next question is from why kosloff kubectl?
00:27:41 [W] Is there an out-of-the-box possibility to send push notifications from server to client?
00:27:48 [W] So grpc does not support push notifications per se but it supports is the ability for a client to make a request and watch for a
00:28:04 [W] Style IPC.
00:28:07 [W] So the watch tile is where the client says.
00:28:10 [W] Hey, I'm interested in any changes to this resource. Please send me a notification message when something changes and the server might just might acknowledge that
00:28:22 [W] What your request and many hours later it might send back a message saying hey, it's something changed here is the new change state.
00:28:34 [W] So in that sense, that's the typical convention one would use to implement notifications in a grpc application.
00:28:43 [W] The next question is from the MIT Kumar.
00:28:53 [W] Can we read the advantages of grpc?
00:28:55 [W] Even on HTTP 1.1?
00:28:56 [W] The answer is slightly more.
00:29:00 [W] Grpc does support something called grpc webassembly Nats can be HTTP 1.1.
00:29:14 [W] And as long as we have the capability of translating from HTTP 1.1 to grpc somewhere between the client and the server either in a proxy and there's some open source proxies like the envoy haproxy that support this
00:29:22 [W] Or in the server application itself to terminate the HTTP session and up translate the request to grpc.
00:29:37 [W] Then you can we can have interoperability between an HTTP client and a grpc server.
00:29:43 [W] However, some of the things that are available to a plaintiff grpc client for example, streaming bi-directional streaming of messages.
00:29:53 [W] HTTP to flow control http/2 multiplexing of multiple requests on top of the same http/2 session. These things would not be available in a world where we were talking about interoperability from an HTTP client.
00:30:08 [W] By the external streaming of messages http/2 flow control http/2 multiplexing of multiple requests on top of the same http/2 session.
00:30:10 [W] These things would not be available in a world where we are talking about interoperability from an HTTP client.
00:30:14 [W] So, yes, we can interoperate but you don't get all the features.
00:30:16 [W] I'll move to the next question from Zoltan lovers kiss candy grpc calls embed or two or JWT tokens and can the generated servers validate those.
00:30:32 [W] again, the answer here is yes grpc has a facility to do transmit something called metadata from client to server and back in the direction of server to client and
00:30:49 [W] To transmit something called metadata from client to server and back in the direction of several different and The Meta data are transmitted arrest GTP to headers and effectively the
00:30:57 [W] Effectively, the application developer has full control on what that metadata is.
00:31:03 [W] And in fact, the standard grpc library is typically ship with over to support.
00:31:13 [W] We're on the client side. You can attach you can use an over to credential type views appropriate credentials.
00:31:17 [W] Hi Peter. It already knows how to attach the right metadata on the server side. There is again the facility is available to pull the metadata out.
00:31:25 [W] Out from the incoming RPC. The actual validation logic would have to be provided elsewhere grpc would not provide the validation Logic on the server side, but the facility to expose the over to our job token to the
00:31:40 [W] And the application can then turn around and use a use an appropriate validation laboratory to perform the validation.
00:31:50 [W] Next we have a question from Leonard Olson.
00:31:57 [W] Does grpc support client initiated communication?
00:32:02 [W] Yes, it does.
00:32:04 [W] In fact because it's a client-server RPC protocol all communication both in terms of initial connection and individual or PCS have to be initiated by the client
00:32:19 [W] Choose unilaterally to initiate a new RPC or a new connection to a client.
00:32:28 [W] The client is the one that's in charge.
00:32:30 [W] The client is the one that makes the initial request the server can then respond and depending on the protocol you can have, you know, our PCS where the client says a little bit in the beginning and the server's is a lot over, you know
00:32:43 [W] Protocol you can have you know our PCS where the client says a little bit in the beginning and the server says a lot over, you know a long period of time but it's always client initiated.
00:32:49 [W] Next question is again from Leonard Alston. Do you suggest grpc can fit into an event-driven architecture?
00:33:00 [W] Yes, even driven works fine with grpc. In fat most are I would say many implementations of grpc in languages such as C++ Java
00:33:17 [W] S Plus Java are our sort of asynchronous by Design and as long as you know, the application developer has
00:33:29 [W] This particular architecture Paradigm.
00:33:39 [W] There is nothing in the corresponding grpc library that would stop them from doing it.
00:33:41 [W] All you need to do is for your language of choice.
00:33:42 [W] You need to look at the grpc apis and see if if they are well suited for the type of event-driven architecture you want in your target language, but in most languages where people tend to
00:33:56 [W] Grpc will have asynchronous API that will fit well.
00:34:00 [W] The next question is from Frank. Herman is grpc a good choice to send audio or files to the back end.
00:34:13 [W] Yes, the answer is grpc works.
00:34:19 [W] Just fine for sending binary audio or other files.
00:34:25 [W] The idea would be that you know, your RPC request would have a binary type in protocol buffers.
00:34:36 [W] That's no official named bites and your bites can be any type of data whether it's audio and other files.
00:34:43 [W] Rest of the grpc stackers not going to look into those bites are not going to try to interpret them.
00:34:54 [W] It's just going to copy them and transport them over and deliver to the pier on the other side.
00:35:01 [W] So this is a pretty common use case. And if you look at the type of services that people are building their many file oriented Services storage services that have been
00:35:08 [W] In grpc and there's men there are many live audio and video Services being implemented or grpc.
00:35:20 [W] So it's absolutely a valid choice for those use cases.
00:35:22 [W] Next question is from
00:35:26 [W] Guam bittencourt dos Santos
00:35:30 [W] How does grpc work with services that need load balancer in front?
00:35:36 [W] The answer would be that you need to pick a load balancer that Salon that's able to proxy grpc requests
00:35:50 [W] Open source reverse proxies like the envoy proxy and nginx already support grpc.
00:36:05 [W] So you just need to work with your reverse proxy or your load balancer to configure it for grpc in general any proxy that supports HTTP 2 or any load balancer that supports HTTP to by definition.
00:36:14 [W] And supports grpc out of the box.
00:36:17 [W] We are running out of time.
00:36:30 [W] So I'll try to go through a few more questions and then we will have the slack Channel where I will continue to answer any questions that come up.
00:36:39 [W] So the next question is are there.
00:36:42 [W] Is there any type of performance loss typically there is a lot of attention paid to Performance with in the grpc development in all of the different languages in terms.
00:36:52 [W] Penalties you can still expect to pay a small performance penalty for framing because grpc does Multiplex messages from different our PCS on the same TCP string. So that would be a small performance penalty.
00:37:08 [W] And depending on the use case, you might see some amount of synchronization overheads, especially if the use cases such that a single
00:37:23 [W] Connection in a single RBC stream is all that was needed having the ability to scale up is not necessarily needed.
00:37:35 [W] So we are being told to take the remaining questions to the slack Channel join slack and continue taking questions there. Thank you.
