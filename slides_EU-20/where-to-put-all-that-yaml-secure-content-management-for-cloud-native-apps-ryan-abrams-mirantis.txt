Where to Put All That YAML: Secure Content Management for Cloud Native Apps: AYRF-7371 - events@cncf.io - Thursday, August 20, 2020 11:24 AM - 189 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:40 [W] Welcome everyone to this talk entitled to where to put all that ammo.
00:00:48 [W] So we had a couple of issues with the video.
00:00:50 [W] So we're going to be doing this live.
00:00:52 [W] Hopefully, I remember all the content.
00:00:57 [W] we're going to be talking about distributed applications in general kind of the evolution of distributed applications and what our approach to them was at Docker and in particular we're going to be talking about a project that was a joint.
00:01:08 [W] Partner partnership project between Microsoft and Docker called cncf which is a distribution format for distributed applications.
00:01:20 [W] So a little bit about what we'll be going over. So I'll give you some context on the problem of distribute applications in general and you know and distribution and all of that will go over some history stuff
00:01:33 [W] Old cncf, which is a distribution format for distributed applications.
00:01:34 [W] So a little bit about what we'll be going over. So I'll give you some context on the problem of distribute applications in general and you know in distribution and all of that will go over some history stuff.
00:01:35 [W] That and we'll do a state of the state which is talking about what cni-genie and finally we have a demo not really a live demo. Unfortunately. We only have some screenshots that I'll be able to share with you.
00:01:49 [W] A little bit about myself. So you know, who is this person who's talking to you about cncf, so, my name is Ryan.
00:02:02 [W] I worked at a cloud startup called net kind for about a year out of University that got acquired by Docker where I worked for five years kind of worked all over the place while I was there.
00:02:13 [W] I worked on Docker Hub worked on the Enterprise side and got to help with developing the distribution.
00:02:19 [W] Format for CNN which is what I'll be talking to you about today.
00:02:24 [W] Currently.
00:02:25 [W] I work at stripe and also it's my birthday. So if you want to I wish I could share some cake with y'all. But yeah.
00:02:32 [W] Okay.
00:02:47 [W] So what really is the challenge here? Like what do we mean when we talk about, you know, the distribution of multi service applications the distribution of disrude applications. So starting with you know premise of Docker democratized containers, you know containers existed
00:02:50 [W] Dr. Of course, you know what doctor did was give that really clean user experience, you know, dr. Pol, dr.
00:02:59 [W] Push, dr.
00:02:59 [W] Run for being able to run containers as primitive in the cloud for running, you know, single process applications.
00:03:14 [W] applications. And so, you know developers got these tools and these really nice elegant tools for running these multitude in for running these single process applications and what that created maybe as a side.
00:03:21 [W] Defect you might say is it unlocked this movement towards multi service applications, you know, once you have these easier Primitives for evolving single process applications, you know in a Data Center and the cloud
00:03:36 [W] You know these multi-service architectures and so a question that we repeatedly asked ourselves.
00:03:43 [W] that doctor was how can we unlock that same clean user experience that same clean experience for life cycle management, but for multiservice applications, so, you know even let's say you've got you know API front-end workers
00:03:58 [W] Is databases messaging Hugh's load balancing, you know, all of these components that make up a multi-service application.
00:04:08 [W] Could we make a user experience that was clean and elegant in the same way for that and so we had a couple of approaches to that a talker.
00:04:21 [W] So, you know first bit of History here. So in January of 2014, dr.
00:04:25 [W] acquired a company called Orchard Labs, which was most known for products called.
00:04:30 [W] It's fig.
00:04:33 [W] Some of you will know fig. I'm sure most of you will know of compose.
00:04:35 [W] Composers essentially a tool that allows you to specify using GMO because everything is specified using the mo the components of a multi-service application. So, you know Services networks volumes all of these things that make it up and you know
00:04:51 [W] Saw with compose was developers would use it quite a bit for setting up local environments and then they continue to use it today for setting up for having an easy way to stand up local development environments that are multi service.
00:05:08 [W] but we haven't really seen composed as a tool be used for standing up multi service applications in production against the production orchestrator, even though you know it clearly we get some signal that composed as
00:05:25 [W] Specifying multi service applications is solid.
00:05:30 [W] Briefly after that there was a thing called dab. So dabs were distributed application bundle. These were essentially a way to package up a multi-service composed to find application as a binary and ship that around
00:05:48 [W] We realize with those was they were still lacking that really clean Docker push.
00:05:54 [W] Dr. Pol dr.
00:05:54 [W] Run user experience a little bit of history after that.
00:06:01 [W] So after a while, dr. stack Incorporated the composed binary formats, you can do, you know, dr.
00:06:10 [W] Stack - see compose file. And so, you know, this is the first time that we really had as opposed to compose as its own python-based binary being shipped along with the doctor toolchain. This was
00:06:20 [W] Something in the doctor binary itself that was aware of the composed format.
00:06:34 [W] So all the meanwhile while like all of these attempts at developing a tool set for multiservice applications all the while while all of this is happening.
00:06:37 [W] We're seeing widespread adoption of kubernative. He's as the orchestration orchestrator of choice for a lot of people. So we're thinking, you know, we can't really have a solution here that's going to be swarm Centric.
00:06:49 [W] For those of you who don't know a swarm is stalkers orchestrator.
00:06:58 [W] So enter CNM which would be you know, the latest latest and greatest when it comes to distribution of multi service applications.
00:07:07 [W] So this is a project that starts in 2018 it start it starts with some great work that's done by the developer team in Paris at Docker as well as a partnership with Microsoft and since
00:07:18 [W] Quite a bit at of adoption across the industry across a lot of stakeholders artifactory and red hat to name just a couple on the distribution side.
00:07:31 [W] So what see knobs stands for is cloud native application bundles.
00:07:34 [W] and it's a essentially a format for packaging in multi service applications as well as all of the other components that make a cloud native application what it is, but
00:07:50 [W] essentially a format for packaging in multi service applications as well as all of the other components that make a cloud native application what it is, but you know as we'll see it can be a it's
00:07:54 [W] Deep it can be it's you're able to use see enough for a lot more than just multi-service applications that was use case, you know top use case the first of many use cases, but there are multiple other ones.
00:08:06 [W] So before we get into all of the different different use cases, let's talk a little bit about the components of a cncf. So, you know, seeing a bit self can refer to the specification and I can tell you where to find
00:08:21 [W] But a particular cncf is a particular bundle and what that bendel's up is a few different things.
00:08:31 [W] So the first thing is a bundle Json which essentially contains the metadata of your application.
00:08:40 [W] So things like author version description that sort of stuff would be contained in the bundle Json.
00:08:51 [W] There's a thing called an invocation image which is a container image. And essentially this is a
00:08:52 [W] her image that you point at an environment and you tell it to stand up your application.
00:08:59 [W] And from there it's able to do whatever steps necessary.
00:09:06 [W] I mean, I mean we're talking, you know, beyond turing-complete here.
00:09:09 [W] This is like any it's a container in which it's written in any language.
00:09:11 [W] You would like using any framework you'd like and is able to stand up your application against any Target environment.
00:09:17 [W] So your target environment could be an orchestrator here.
00:09:19 [W] could be a cloud provider like AWS and the invocation images able to stand up your environment service images are also packaged up into the bundle here. So
00:09:31 [W] Service images would be those things that we were talking about earlier.
00:09:33 [W] So let's say you have you know, your API container image and your worker container image and a database you would like to package up or you can tell your invocation image. You would like to use your Cloud providers
00:09:48 [W] All of this can be specified using a combination of the bundle Json and the the surface images and the invocation image.
00:10:02 [W] And the last thing I'll say here is cni-genie is parameterised.
00:10:07 [W] And so what that means, you know in contrast to earlier attempts with Docker compose where there was an ability to override parameters that were specified as environment variables in the composed format, but
00:10:17 [W] It clear which things were external user facing or configurable a tops parameters versus which things were internal implementation details that really you shouldn't be overriding.
00:10:33 [W] So with cncf makes that very explicit what things are parameters that are exposed to the person deploying the application at deploy time and even has some some good type systems and checks on that so you can set boundary conditions on your parameters as well.
00:10:45 [W] typing like selectable types integers etcetera
00:10:51 [W] So all of those are the basic components of CNN and so as we discussed see now that is usable for Distributing multi service applications, but you can also set it use it for other things.
00:11:08 [W] So setting up a cloud environment is one example, you can you can point it at you know, essentially your cloud provider and say spin up everything from me from scratch including, you know, make a V PC for me set the security groups for me
00:11:19 [W] There is using load balancers as a service Etc.
00:11:27 [W] You could in theory. If you wanted package up virtual machine images into your cncf instead of using container images.
00:11:36 [W] It's quite versatile that way, you know in theory you could also packaged up serverless. So so really you can think of cncf as its the package manager for the cloud.
00:11:43 [W] So we're going to do a brief interlude here and talk about oci because you know, this talk is specifically going to be about a Nazi not but the distribution of bundle. So how does that you go about you know shipping these bundles getting them from where it is that they're built to
00:12:04 [W] Run, so we'll talk a bit about ociso.
00:12:10 [W] Oci is the open container initiative.
00:12:14 [W] This is this alleged essentially a collective of stakeholders in the container space who specify things like standards.
00:12:25 [W] So there are a whole bunch of other two standards in particular to pay attention to there's the distribution standard and the runtime standard.
00:12:32 [W] So it has a specification for how you go about, you know, Distributing artifacts via, you know, what's called a register.
00:12:34 [W] Re so Docker hub for instance is a registry where you can store and ship and share container images.
00:12:46 [W] And essentially this is a collection of Json specifications a manifest looks
00:12:51 [W] sort of cloud artifacts
00:12:59 [W] And then as well, as you know, this is how you go about Distributing the the components of the file system of a container Mitch. Let's say so in oci index is a particular type of artifact that
00:13:16 [W] Is for the distribution of CMS?
00:13:21 [W] So a few things about what in oci index is Jose indices really start from what we're before doctors.
00:13:37 [W] Multi Arts architecture images so doctor wanted the ability to ship an image of images essentially where you know, as I said, we have our manifest here a manifest as the top level specification of the configuration and the the components the
00:13:47 [W] Also some layers that make up a container.
00:13:55 [W] So an index is kind of a manifest of manifest importantly what the index format added on top of the original multi Arch image format was generic annotations.
00:14:05 [W] So these are essentially a collection of key-value pairs that you can use to specify whatever additional information you want in this artifact.
00:14:12 [W] And thanks to that we've seen, you know, quite a bit of use of oci indices for for a whole bunch of different use cases to name a few so build cash has inbuilt Dockers built kit containerd snapshots Upstream
00:14:27 [W] Is something that we're going to come back to in just a minute? So I'll explain that and of course, you know the services that make up a cncf so we'll see in just a minute how it is that we use these key value pairs to to specify
00:14:43 [W] the the necessary metadata for shipping CMS
00:14:47 [W] Also importantly so what an STI index can do is reference another oci index.
00:15:02 [W] That's a nice feature that allows you to essentially to build recursively. You can build a fairly complex graphs of oci indices and thanks to that feature.
00:15:09 [W] We were able to ship as a pleasant surprise. We were able to ship multi Arch multi-service CNS in the first go
00:15:12 [W] So when you combine these two this is essentially what it looks like.
00:15:23 [W] So this is kind of a summarized version of noci index here containing cncf so you can see as an example here. We have our top level construct which is our manifest
00:15:33 [W] All of the manifests and indices that are referenced from this oci index so you can see we've got a media-type that specifies.
00:15:42 [W] This is a manifest annotations importantly are used to specify what role this image plays within the CMS. So here we have an invitation indicating that this image is the invocation image.
00:15:56 [W] So as I mentioned earlier the invocation image is essentially the entry point for the CNF as well as annotations for metadata. So, you know, we were very selective here in-toto.
00:16:03 [W] In terms of what annotations made it to our top set of our top set of metadata things that we really wanted to be able to surface in the UI very easily.
00:16:16 [W] so there were a few different kind of competing distribution formats for cncf, and we really like this one and you know, we flush this one out quite a bit and
00:16:34 [W] Let me talk a little bit about what this gave us as a format.
00:16:38 [W] So the
00:16:41 [W] I think most important thing for us was that it really simplified authorization.
00:16:50 [W] So you could have that experience that you're used to with Docker images, but with multi service applications, so you do essentially a push of your application or pull up your application.
00:17:01 [W] And if you have you know, the your access granted to that repository, that's all that you need to get this artifact or you have let's say an air-gapped environment. That's a mirror of contents on some other registry.
00:17:12 [W] um, or you have multiple sites all around the world and you have caches essentially to make pulls in those sites faster having this
00:17:27 [W] That we distribute applications meant that we were able to take advantage of everything that was built before and you know, we had quite a few Enterprise customers who did have environments like this.
00:17:42 [W] Another Advantage was that signatures were preserved. So, you know you essentially reference this same exact manifest from within us and oci index that what may have been built by an upstream company.
00:17:51 [W] Let's say which means that the digest for that manifests stays the same which means that the signature is for that manifest.
00:18:00 [W] Say the same so, you know you could in theory and then and we developed prototypes of this of preserving signature metadata in the index itself, so you can have you know,
00:18:12 [W] Manifest stay the same. So, you know you could in theory and then and we developed prototypes of this of preserving signature metadata in the index itself so you can
00:18:14 [W] Is you want to run you might have a complex policy that says this signature needs to be cross-checked with the person who originally published this image.
00:18:26 [W] As I mentioned as a pleasant surprise. We were able to do multi Arch and multi-service in the first version of this and you know, unfortunately, I can't show you this but we were able to develop an the Enterprise version apis as well as you eyes for deep
00:18:35 [W] Imagine you know you start with your top level application and you can drill down into you see a summary of all of the vulnerability data that was found through scanning of that image, but you can drill into specific components into specific architectures and see
00:18:51 [W] There as well.
00:18:53 [W] And finally we have our demo.
00:19:01 [W] So as I mentioned this isn't going to be a live demo.
00:19:04 [W] I'll just show you a few screenshots of how it is that you work with this to do this.
00:19:09 [W] I cloned the famous, dr.
00:19:10 [W] Voting application, which you can find at GitHub.
00:19:17 [W] So this is the app that we use for all of our dr. Khan demos.
00:19:20 [W] So once I cloned it, I made a couple of minor modifications to make it work for dr.
00:19:26 [W] App.
00:19:28 [W] And once I had that you can see here.
00:19:30 [W] I've got a screenshot of doing a dock or a push.
00:19:33 [W] This essentially was a push that I did to push up the drop the app to Docker Hub.
00:19:41 [W] Just one note here. So this
00:19:42 [W] This platform that I have indicated here.
00:19:51 [W] This allows you to filter which architecture and Os combinations you'd actually like to push.
00:20:00 [W] So this is a way of filtering it down, you know, if you have multi our chaplain occations, and there are like 30 architectures provided but you don't want to push all of them you can specify that.
00:20:05 [W] I'm not sure all of you can see this but this is if you do if you then go and do a curl on the resource that you've just pushed you'll get this as a Json response and you can see so this this really flushes out what I was talking about
00:20:21 [W] In terms of these are all of the components of the oci index.
00:20:30 [W] These are all the individual manifest that are referenced by digest as well as the annotations that let you know, you know metadata about what role each of these images plays in your multi-service image as well as top-level metadata specifying
00:20:39 [W] Description inversion Etc.
00:20:48 [W] And then once I had that I was able to do a doctor app install and as you can see it's ending up all the individual resources, you know service network Etc and it worked and I was able to do a cast a vote and
00:21:00 [W] It's like I voted for cats when I went to go check it out. One thing. I should say, you know, just just really clarify like you know, how this is a multi service application.
00:21:15 [W] So, you know, this this is a this is a dotnet application in combination with some python.
00:21:20 [W] So, you know really multi service as well as it's got a database to store all this stuff. So, you know, really like a proper multi service application.
00:21:25 [W] And lastly, thank you all I hope that went pretty smoothly because as I mentioned we had some issues with the video. So hopefully I remembered everything that I wanted to say.
00:21:40 [W] So you can follow the project cncf at CNM dot IO and there are let me give a shout out to their bunch of members from the Paris team at Docker.
00:21:52 [W] We're currently actively working on this here attending coupon now and
00:21:55 [W] Some of them will be giving some excellent talks on this as well.
00:21:58 [W] And now we have QA.
00:22:01 [W] Do-do-do-do. Sorry. I am going to need it one minute here while I get to the QA.
00:22:28 [W] And some of them will be giving some excellent talks on this as well.
00:22:31 [W] And now we have QA.
00:22:31 [W] Do sorry. I'm going to need it 1 minute here while I get to the QA.
00:22:32 [W] If y'all want to grab a coffee, this might take a minute.
00:23:08 [W] Okay.
00:23:44 [W] I'm right.
00:23:58 [W] Okay.
00:24:04 [W] I'm right.
00:24:06 [W] Being told to press counterclockwise Arrow here counterclockwise era.
00:24:08 [W] Sorry, I think we're having some technical difficulties here.
00:24:14 [W] I'm clicking this restore button.
00:24:16 [W] Hopefully that helps.
00:24:17 [W] Yeah, okay.
00:24:30 [W] There we go.
00:24:32 [W] Ah there's a police complaint complaint on you is here.
00:24:36 [W] Thank you for that.
00:24:39 [W] Thank you everyone for the kudo.
00:24:42 [W] S' did we have did we have any questions?
00:24:45 [W] Oh somebody's asking where can I get the slides I can and we have a response rate is cni-genie spec. Yes cni-genie
00:25:01 [W] Cassidy
00:25:02 [W] Yep.
00:25:02 [W] Okay.
00:25:02 [W] There we go.
00:25:02 [W] Ah, there's a police complaint complaint on you is here.
00:25:03 [W] Thank you for that.
00:25:03 [W] Thank you everyone for the kudo snyk.
00:25:04 [W] Oh somebody's asking where can I get the slides I can and we have a response rate.
00:25:04 [W] Is he nervous back?
00:25:06 [W] Yes inaudible is indeed a spec so there so there is a particular implementation of the cnib spec which is stalker app, which has been donated to the cncf.
00:25:15 [W] Are there tools for Discovery / cataloging of cncf locations at the moment?
00:25:32 [W] I'm not aware of any tools, but if anybody from the to do
00:25:37 [W] That looks like we're getting some responses.
00:25:45 [W] as somebody is pointing to Porter dot sh cool.
00:25:46 [W] Is dr. The only runtime able to run cncf bundles. No, so.
00:25:55 [W] Oh, that's that's a little bit of a difficult question to answer because dr. Apps themselves.
00:26:09 [W] Yes, if you want to run Docker app install, which is compliant with this the cncf spec you will have to do that on dr.
00:26:15 [W] Itself, but you can point it to an environment that uses other container runtimes.
00:26:16 [W] So let's say you're standing up.
00:26:20 [W] up. Hey kubernative f legation using cncf.
00:26:22 [W] Crap install which is compliant with this the cncf spec you will have to do that on dr. Itself, but you can point it to an environment that uses other container runtimes.
00:26:33 [W] So let's say you're standing up a kubernetes application using cncf you can use what you know, whatever container runtime you want for that and the the
00:26:34 [W] containers running on on kubernetes
00:26:37 [W] Dominique is still asking for slides so I can reach out to you separately and send you the slides.
00:26:53 [W] So the sender is asking what type what types of changes can can I make to my Mo once it's inside a bundle with a Docker app?
00:27:34 [W] So if you use the the docker CLI and the doc wrap tooling essentially you can run through this flow and fortunately I wasn't able to show it but you know, you can do it a Docker app in it, which will be to set up all of your files locally for configuring your application.
00:27:52 [W] If you have a composed application already, it will use that as the basis for your application and then you can go into those.
00:28:03 [W] Yeah, most specifically and you know specify these are the components of my application.
00:28:09 [W] These are parameters that I'd like to have exposed at runtime and all of these things and then you can go and distribute that and then once it's distributed I'm not aware of any way to you know change the emal's on the
00:28:22 [W] In fact, but you know as you when you go and deploy the application you can override perimeters.
00:28:29 [W] Okay, and I think that's it for questions.
00:28:58 [W] I'm online. So, you know feel please feel free to reach out to me on slack.
00:29:00 [W] lot of the slacks and yeah, thank you very much and go enjoy the the other the other coupon talks and in particular the other cni-genie locks.
