Going Containerless with WebAssembly: UNHR-1756 - events@cncf.io - Thursday, August 20, 2020 11:14 AM - 201 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:12 [W] Welcome to this introduction to what I asked. My name is Kevin Huffman.
00:06:09 [W] Where I get started I have been using webassembly for a couple of years now.
00:06:21 [W] I'm the creator of the West Copan source project the author of the book programming webassembly with rust.
00:06:26 [W] So the agenda for this video is first thing you want to do is take a look at some of the problems with software development today and how webassembly in general or as a technology and Technology standard might be able to
00:06:45 [W] And then I will introduce flask and go over some last key Concepts and how well ask aims to improve on our software development experience today.
00:07:01 [W] And then finally we get to the good stuff which is the demos.
00:07:04 [W] So software development today is full of copy and pasted complexity.
00:07:17 [W] And this is where we have a solution to one problem.
00:07:18 [W] Another problem comes along and we often tend to just copy and paste the solution from one problem to another and like any good sci-fi movie about clones when you clone a clone you lose Fidelity and we lose
00:07:32 [W] Fidelity who when we continually reuse Solutions reuse solutions to problems we get further and further away from the problem that we were originally trying to solve.
00:07:44 [W] L've and the amount of boilerplate in their code is filled with is partly to blame here because it's such a chore to rewrite all of this all of the ceremony that our code normally
00:07:59 [W] code is filled with is partly to blame here because it's such a chore to rewrite all of this all of the ceremony that our code normally needs we copy and paste it and so we copy and paste the boilerplate
00:08:04 [W] Taste it. And so we copy and paste the boilerplate and business logic because the boilerplate is usually difficult to separate from business logic and development that we do these days is often cry.
00:08:16 [W] And development that we do these days is often cry friction, especially when it comes to the operations experience.
00:08:21 [W] Once and I'll get more into that later. And so I think the bottom line is that while there are certainly exceptions. One of the things that typifies today's development is that 90% of the time that we devote to
00:08:37 [W] Well, there are certainly exceptions.
00:08:38 [W] One of the things that typifies today's development is the 90% of the time that we devote to software development.
00:08:40 [W] We spend to on satisfying non-functional requirements.
00:08:44 [W] Whereas we only spend 10% of our time working on actual features, and hopefully what we want to do is invert that ratio.
00:08:56 [W] that ratio. But today we generally have unhappy developers and unhappy developers burn out fast.
00:08:59 [W] Fast and we don't build the kinds of quality products that we want to build.
00:09:03 [W] So software development today to summarize is not portable in if it's not secure enough by default.
00:09:15 [W] It's not easy enough to deploy and it's not easy enough to update and maintain and you know while we have we have technology like Docker and kubernative use in many cases.
00:09:28 [W] those things actually add to the complexity and to the friction and the difficulty develop.
00:09:33 [W] Purrs have in building and deploying and maintaining their applications and services.
00:09:38 [W] So how can webassembly help us with this problem?
00:09:43 [W] First of all webassembly is portable webassembly use instruction format in its virtual machine is both CPU and operating system agnostic.
00:09:57 [W] Webassembly is fast.
00:10:12 [W] It's a stock based virtual machine.
00:10:15 [W] And so it's instruction execution is extremely fast and as all explained in a little bit later in the video.
00:10:26 [W] We also have the ability to compile a head or webassembly instructions into knative machine instructions.
00:10:30 [W] Webassembly is secure.
00:10:34 [W] by definition.
00:10:38 [W] The webassembly virtual machine is a Sandbox and that sandbox has memory isolation the instruction set for webassembly does not allow for executing instructions outside that module and so
00:10:51 [W] Default this development. Target is more secure than most of what we're doing these days.
00:10:58 [W] The webassembly modules are lightweight, you know, there are exceptions all rules, but most of the time when we're building webassembly modules, especially when we build actors like I'll I'll show later in
00:11:15 [W] Video, they're extremely small.
00:11:17 [W] And finally, I think one of the most important points here is that we can embrace the limitations and the the hard boundaries around the webassembly machine format and turn those into advantages that
00:11:35 [W] And leverage for improving our own development experience.
00:11:39 [W] So what is why I ask who ask is designed to improve the development experience the developer experience while creating a safe layer safer and simpler operations model.
00:11:53 [W] first it stands for webassembly secure capabilities connector and
00:12:03 [W] as its name implies, the West Coast runtime is designed to securely connect capability providers with actors that consume those capabilities you compose business features by
00:12:19 [W] Writing actors and I'll get more into what an actor is in a minute.
00:12:24 [W] We securely buying those actors to capabilities and we can run actors and capabilities anywhere.
00:12:40 [W] This is specifically to Leverage The portability and the size and speed of webassembly.
00:12:43 [W] The other thing is West is cryptic a cryptographically secure.
00:12:48 [W] and I'll show this in one of the demos but
00:12:52 [W] We can verify the creator of any webassembly module and and we can verify the chain of Providence.
00:13:06 [W] So an actor built for the West Vigo system, we know which entity signs that a cure and we know which entity signed for that
00:13:16 [W] Entity and so we can trace the provenance as far back as we want and we also have an exact list of what that actor is allowed to do.
00:13:25 [W] If that actor is allowed to use HTTP server, but not talk to a database. That's exactly what the host runtime will enforce.
00:13:34 [W] So let's take a look at the West stock because like any good open source project is built on the shoulders of other Giants in the open source area.
00:13:48 [W] So at the bottom the core of Westar stock used webassembly engine and webassembly engines tend to come in two different varieties.
00:14:03 [W] We have the Jitter where the compilers or the interpreters and the compilers as their name implies.
00:14:08 [W] take me webassembly instructions and compile them into knative machine instructions for whichever machine read that webassembly module. It runs on.
00:14:17 [W] Interpreters on the other hand don't convert the webassembly instructions.
00:14:24 [W] They just interpret them as they encounter them and
00:14:28 [W] there are use cases where you you might want a Jitter and use cases where you might want an interpreter interpreters are going to have
00:14:42 [W] Let's start up time as a penalty but they might have higher latency on individual function calls. Although the interpreters that we have access to today are still extremely fast.
00:14:58 [W] Just above this in the stack is webassembly procedure calls.
00:15:09 [W] And this is a as a standard that was created to allow.
00:15:12 [W] to allow code to invoke functions inside the webassembly module that would allow be sending and receiving an arbitrary binary payloads and one of the things one of the limitations
00:15:28 [W] And that the webassembly standard has is that it can only support numeric parameters the functions and so we needed some way to allow us to in combination with access to the webassembly
00:15:43 [W] Jules memory
00:15:45 [W] Sending receive arbitrary payloads.
00:15:48 [W] And another detail about wa PC is that it allows for the sending and receiving of these payloads in a way that is blissfully unaware of the allocation patterns
00:16:04 [W] Of any of the host or guests languages and so what that means is a lot of times when we when we see webassembly modules that are generated through code generation and JavaScript shims and
00:16:18 [W] Like that will see that those modules rely on a JavaScript style memory allocation pattern for the host runtime.
00:16:32 [W] And so that limits that modules portability WATC is designed specifically to avoid that situation.
00:16:43 [W] So as long so a language whether it's a guest or host can conform to WABC regardless of how memory is
00:16:49 [W] allocated in that language and regardless of whether that language even has a garbage collector.
00:16:53 [W] WATC also serves as an anti-corruption layer between the webassembly engine and the higher levels so you should be able to swap out the webassembly engine for purpose-built stacks.
00:17:09 [W] Depending on your use case without having to rewrite any of the code that exists above the WABC level.
00:17:16 [W] So above WABC, we have arrest rate called West Cap and this creep provides capabilities based security as I mentioned.
00:17:30 [W] This is where all of the code exists that embeds cryptographically signed.
00:17:37 [W] Json web tokens into webassembly modules reads them from the modules and performs all the different verification checks that you need to perform on those tokens.
00:17:45 [W] But that is another crate called West Coast and this is the core library that it misused as the host runtime for actors and capabilities in the last ecosystem.
00:18:02 [W] And then finally, we have a generic West Coast binary.
00:18:11 [W] So if you are a needs are all that specific and what you're doing is just dynamically hosting actors and capabilities. Then you should be able to use this host binary as your as the
00:18:21 [W] The to schedule in on whatever infrastructure you using but it's also fairly easy to create your own custom binaries that allow you to mix and match the set of features that are specific to your needs.
00:18:36 [W] So let's take a look at how microservice development looks today.
00:18:44 [W] First of all it's time they coupled and it's a tightly coupled experience and microservices by and large are not composable as I said, there's an exception to every rule but in general this is what a typical
00:18:55 [W] The service looks like we have a small amount of business logic.
00:18:59 [W] But then we have the components that we're all familiar with the components that often end up as part of that copy and pasted boilerplate that we move from one project to the next and that's our HTTP server or routing rules all of our
00:19:15 [W] Restful service baggage or HTTP client are logging our analytics. If we want to improve performance with caching access to a relational database all of those things add brittleness
00:19:30 [W] And tight coupling to our microservices and they prevent us from allowing our services to be neatly composable.
00:19:37 [W] and
00:19:39 [W] and more importantly when we have lots and lots and lots of these Services we have essentially duplicates of all of these items in yellow here all of these non functional requirements.
00:19:54 [W] There's no sharing involved. But what if we were to take a look at how we might build services with actors in with actors, we have loose
00:20:07 [W] Actors are fully composable.
00:20:10 [W] So our actor code the core of what we write is should be 90% feature.
00:20:21 [W] It should be pure business logic and then when we want to use an HTTP client
00:20:26 [W] our code consumes generic abstraction over HTTP clients and the West Coast runtime is responsible for dynamically satisfying the requirements of an HTTP client to our actor.
00:20:42 [W] Our code is unaware of which hdb client we're using or how that HTTP client got configured the West Coast runtime takes care of all of that for us.
00:20:52 [W] The same goes with the HTTP server or a relational database client and our cash clients and any other capability we can dream up our actors are isolated highly testable small units of deployment.
00:21:08 [W] So what is the development workflow look like when we're building actors and we'll ask.
00:21:17 [W] The first thing we do is we create an actor and today we can create that actor in rust or assembly scripts or Zig hopefully soon.
00:21:30 [W] To create one in go once goes assembly webassembly integration gets a little bit better.
00:21:38 [W] We'll compile that actor to a DOT wizened file. And this is our this is our portable unit of deployment.
00:21:42 [W] Don't will sign the actor with capability claims and those claims get embedded directly into the wizened file.
00:21:53 [W] And this is a different model than how we secure some of our doctor based environments to today where the claims in the permissions and the list of what can and cannot be done.
00:22:04 [W] is stored separately and it's very easy to accidentally separate the policies from the the targets of those policies a simple toy.
00:22:15 [W] Bo can allow an entire Suite of vulnerabilities to magically appear
00:22:18 [W] and then we will post our actor in the west runtime.
00:22:24 [W] At runtime the actors are bound to capability providers with configuration.
00:22:31 [W] And now let's take a look at what an actor looks like.
00:22:37 [W] This is using the rust SDK and in just a small amount of code.
00:22:49 [W] You should be able to tell even if you can't really read rust that what we're doing is handling two different messages were handling a help request and we're handling an HTTP request and a pattern that
00:23:00 [W] Use pretty common as part of the actor model in general is the idea of being reactive.
00:23:11 [W] These actors can't do anything on their own.
00:23:13 [W] They cannot initiate their own actions.
00:23:15 [W] They can only react to things and so these actors the actor that I've got on the screen here is reacting to an HTTP request.
00:23:24 [W] And in response to that request, it will increment value stored in a key value store and then return the new value of that in a Json payload and what's important about this code
00:23:39 [W] It won't is what's not in here.
00:23:44 [W] There's no code to create configure or instantiate an HTTP endpoint.
00:23:51 [W] There's no code to configure restful capabilities.
00:23:52 [W] There's no code to create and configure a key value store and point that code.
00:24:00 [W] There's nothing there's nothing tightly coupled to it.
00:24:05 [W] So what you can't tell from this code is how the HTTP server is satisfied and how the key Value Store satisfied this code.
00:24:09 [W] It has nothing in it that would tell you that you're using dynamodb or redis or console or any other form of Tau star?
00:24:22 [W] And when the response is returned, it's a data structure that describes an HTTP response how that response is physically delivered to a consumer is not your concern as an actor developer.
00:24:40 [W] This is this should be pure business logic computer feature fulfillment and all of the non-functional requirements are part of the West runtime.
00:24:48 [W] I'm capability providers are very similar in that they're also reactive and they respond to messages and so in this case what we have is the capability provider for a key value store
00:25:04 [W] And we see the list of operations the list of messages that it can respond to.
00:25:09 [W] And so creating a capability provider is also fairly straightforward and fairly easy to do.
00:25:18 [W] So let's take a look at our first demo. And in this demo, we're going to create our first actor to create a new actor we could do a couple of different things we could do it from scratch or we can use a new template
00:25:35 [W] And for the rest of the SDK, thankfully we have a template for creating a new actor.
00:25:43 [W] I've read a new project called.
00:25:43 [W] and I will go into that project directory and let's take a look at what we got so we get car bol.com o file a make file and some source code and
00:25:58 [W] and let's just take a look at the source first.
00:26:00 [W] First and the vast majority of the sources comments, but if you look at what we get out of the box, it's an actor in this handling two different messages is handling the house request
00:26:16 [W] and it's handling an HTTP request and the response to the HTTP request is an OK with nobody and as I've discussed in presentations what
00:26:31 [W] See here.
00:26:32 [W] Is the code to start an HTTP server, you don't see code that assigns a port number and there's no routing rules.
00:26:46 [W] It's just pure business logic where you as the actor developer get to declare what it is. Your code is going to do in response to an HTTP request.
00:26:55 [W] And so
00:26:58 [W] what we need to do before we can run this is to compile it and
00:27:09 [W] Video editing process Nats field took much less time than usual.
00:27:15 [W] And what I now have is a webassembly module that I built and
00:27:24 [W] before I can run this webassembly module in the west coast runtime.
00:27:34 [W] I need to embed a Json web token in it so that I can sign it and a test to the capabilities that I wanted to have and if we look at the make file.
00:27:44 [W] We'll see that we have some of that stuff already taken care of for us.
00:27:52 [W] the build and release tasks you'll see that I'm using the West CAP CLI to sign the hello that was in file using a account that NK file for the issue or key
00:28:05 [W] And the module that ain't a file for the subject key.
00:28:10 [W] And so to make file also comes with the ability to create keys.
00:28:17 [W] So first thing we see is the list of actors that we're going to run inside this West Coast.
00:28:30 [W] It's probably important details for remember the West coasts are capable of Hosting many many actors and capabilities all in the same process.
00:28:40 [W] It's another one of the goals of the project is to achieve a greater workloads density of when we're deploying these things to the cloud.
00:28:45 [W] And so I've got the actor here.
00:28:54 [W] I have the capability that I want to load which is a Linux dynamically linked library that I'm using as a plug-in.
00:29:00 [W] And then I had the bindings for my actor and this is the public key of the actor and I'm binding it to the West HTTP server capability with the configuration inside this values tag, and I'm signing the port 8081
00:29:16 [W] Now what's interesting here is that this actor is not the same as the actor that I signed and that's because I just generated a new set of private keys.
00:29:31 [W] And every time I change a private key, it will change the public identity of a module.
00:29:43 [W] And so when you are going through the West samples and through the GitHub repository and tutorials, you'll notice that there are a number of times where it mentions.
00:29:46 [W] the actors public key will not match what you have on your system and that's because the priorities that we have on our system or in GitHub or in our CI pipeline are not going to be the private Keys you have on your machine,
00:30:02 [W] So what I need to do is change this actor in this module. So first thing I'm going to do is copy.
00:30:10 [W] The module that I got from examining the capabilities and then I'm going to modify this manifest real quick.
00:30:19 [W] I'll replace that.
00:30:25 [W] Make sure that took so now I have a new module a new module key in this manifest.
00:30:35 [W] So let's try that again.
00:30:36 [W] I know I realize this isn't as interesting as a web UI or video game, but there are some interesting things happening here. The first thing we can see is that the West Coast discovered capability at the stations for an
00:30:52 [W] And it says it is that it uses the Westgate HTTP server.
00:30:57 [W] You can see that as loading our HTTP server, which is provided by a rough straight called active tactics.
00:31:06 [W] And this is the capability provider and The Binding I'll discuss findings and another detailed section.
00:31:15 [W] later.
00:31:18 [W] So this is up and running and so I should be able.
00:31:20 [W] To open another terminal here and turo.
00:31:25 [W] The service running on Port 80 81 and as I discussed earlier, what was happening was we were just returning okay with nobody. So this is exactly what I would expect to get and just to verify that that's
00:31:41 [W] That's why I got that answer.
00:31:47 [W] Let's stop the west coast and try and curl that again and now I get connection refused. So
00:31:48 [W] so what we're really looking at here is
00:31:54 [W] is
00:31:58 [W] This tiny little bit of code.
00:32:01 [W] Dude is now able to respond to http requests, but more importantly it's able to consume capabilities over abstractions in a Loosely
00:32:16 [W] Old-fashioned where the connection to that capability is cryptographically secure and can be swapped out at runtime.
00:32:27 [W] The actor can be swapped out at runtime and because the webassembly module is portable.
00:32:40 [W] Our code can go anywhere from a Raspberry Pi to the cloud to an edge service all without ever having to be recompiled.
00:32:41 [W] and that's the demo for creating a new actor in West
00:32:47 [W] It looks like we're in Q&A mode.
00:33:17 [W] I didn't see any questions left in the chat. So if anybody has any questions more than happy to answer them.
00:33:32 [W] So there's a question here what other languages are supported for webassembly?
00:33:54 [W] Lee so most of the time you'll see rust used because the tooling is the most mature cncf + + also are used you can use
00:34:10 [W] Or use you can use Zig as well.
00:34:15 [W] depending on what you need.
00:34:18 [W] So if you're if you want to write webassembly code that just talks to a web browser and you can do it with tiny go tiny go does not currently work.
00:34:27 [W] Well with the type of server side scenario that we're working with in when asked
00:34:34 [W] They're the dotnet framework.
00:34:43 [W] There's this thing called Mono as mm which basically compiles mono into relies on mono essentially being a JavaScript run by your browser. And then your document code is then shipped
00:34:56 [W] So it's not again what I would consider pure webassembly and it's definitely not fewer server side stuff.
00:35:06 [W] So, let's see another question.
00:35:10 [W] How is this mode different from sidecar containers other than sandboxing?
00:35:19 [W] So it's similar in Inspiration with sidecars, but different implementation so sidecars essentially rely on some form
00:35:30 [W] Inspiration with sidecars but different in implementation so sidecars essentially rely on some form of network interface that you can use between
00:35:35 [W] Interface that you can use between two different things running in pods or so, you might have a grpc interface and so it's essentially a standardized contract.
00:35:45 [W] What why ask does is it has that sort of standardized contract but the contract is with a host and not with an external containerd and one thing that the sidecars don't do
00:36:01 [W] Business logic from non functional requirements you even if you're using a side-by-side car, all of your code is still compiled the same way that it used to be you still have all the same dependencies
00:36:17 [W] You still can potentially run into dependency management problems.
00:36:25 [W] You still have potentially very large binaries or Docker images and so on.
00:36:36 [W] Let's see what state is going with webassembly as I mentioned go itself right now has what I would consider pretty poor webassembly support you can get
00:36:48 [W] it to work to build things that we'll talk to a browser, but not much else the goes webassembly implementation right now makes a number of assumptions that the host runtime is a browser
00:37:03 [W] According to the webassembly spec that is not an assumption that you should be making.
00:37:09 [W] Let's see.
00:37:14 [W] Can the example be found on GitHub?
00:37:18 [W] Yes, the examples are all up on GitHub their tutorials website wa s CC Dev.
00:37:26 [W] So all of the everything is that I've done so far has been open source, so you should be able to find all that and get a GitHub organs also wasc see
00:37:35 [W] Any relations to crush litmuschaos?
00:38:07 [W] runtime you can choose is why I asked so if you're building whisk actors you can run them in a West Coast on your own infrastructure without kubernative use scheduling it manually or you can schedule it
00:38:23 [W] He's with crosslet.
00:38:25 [W] Connectors written in multiple languages communicate with each other.
00:38:36 [W] Yes actors are webassembly actors are designed specifically to not have any type coupling at all.
00:38:50 [W] So they have no type coupling with the language that the host is written in nor do they have a type coupling with the language that the capability providers are written in or languages than any other actors are written in so a number of the demos that I do show
00:39:01 [W] Assembly script actors talking to rushed actors which in turn talk to Zig actors and no one cares because they're just compiled into webassembly and by virtue of the webassembly modules
00:39:16 [W] dependencies because of that hard module boundary you don't run into any of those other issues and the layers underneath last like WABC, take care of making sure that
00:39:32 [W] Serializing data the same way and you don't have any of that those issues.
00:39:44 [W] You still have to make sure that all the sides of the conversation are aware of the contract that that you're that you're communicating over but language shouldn't matter.
00:39:53 [W] Let's see other questions here.
00:40:00 [W] Question not really a question, but a comment about my teacher.
00:40:07 [W] Thank you very much.
00:40:08 [W] Let's see other questions.
00:40:14 [W] All right doesn't look like there's any other questions in the chat Channel, but I will be in the the slack channel for this shortly after and you can always find me on
00:40:37 [W] All right doesn't look like there's any other questions in the chat Channel, but I will be in the slacks channel for this shortly after and you can always find me on
00:40:39 [W] Everywhere else more than happy to talk endlessly about running webassembly in the clock.
