Sponsored Session: What Happened to the Promise of Cloud Computing?: ASVY-2622 - events@cncf.io - Tuesday, November 17, 2020 2:57 PM - 33 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Welcome everybody.
00:00:01 [W] I'm here to talk about the promise of cloud computing and pretty much talk about whether we've actually been successful in terms of what that promise has been for the community.
00:00:10 [W] Okay?
00:00:10 [W] So before we get into some of the nitty-gritty details, let's first talk a little bit about what I mean by the promise of cloud computing now, I'm assuming that most people have seen a chart very similar to this where we talk about the progression of things, but you start out with
00:00:26 [W] At all, we've moved a virtual machines containers platform as a service and then know if the serverless right and through this entire migration, right?
00:00:19 [W] There's always been this sort of promised that as you move to the right you get this decreasing level of concern in terms of what you have to understand relative to the infrastructure.
00:00:27 [W] But at the same time you think of the benefit of being able to focus more on your business logic, right? So you don't have to worry about that as we said, right the bare metal virtual machines as much and the function space. All you do is sort of
00:00:39 [W] Write your code and Magic happens on the covers, right that's been sort of the one of the promises now related to that is as you do the migration to the top. Right right, we talked about this whole notion of breaking up the monolith. Okay, we have this whole notion of
00:00:55 [W] Target of scaling meaning you can then scale individual components of your application as opposed to these are models that we can model with itself. Right?
00:01:03 [W] which of course means you get better research utilization you squeeze more into the virtual machines or the hardware and that's supposed to eventually reduce your cost of this stuff.
00:01:11 [W] Okay.
00:01:11 [W] Now as I said a lot of this is about abstracting the infrastructure and it's all about making sure you're devs can then focus on their code not the infrastructure itself, which then of course leads to faster time to Market which is either say
00:01:24 [W] Any money or making more money depending how you look at it?
00:01:27 [W] Okay, so when I talk about the promise of cloud computing, that's really what I'm talking about here.
00:01:31 [W] Is this whole notion of abstracting away the infrastructure more than anything else and I want to talk about whether we really been successful in making that happen and what the benefits are very have been. So let's focus on the three areas of the top right of the
00:01:46 [W] Israel containers puffer the service and function of service and I'm focusing on these because we're talking about containers for the most part here and let's actually get a little bit more specific about here.
00:01:57 [W] Okay. So let's talk about containerd a service kubernative platform-as-a-service. Let's just pick on cloud Foundry and for function and serverless.
00:02:03 [W] Let's just use openfaas.
00:02:16 [W] It's not meant initially be a hundred percent accurate statement about craft breweries self.
00:02:22 [W] It's a little bit more generic.
00:02:22 [W] I just like using concrete names on there to give a little bit more of a grounding.
00:02:26 [W] Okay.
00:02:27 [W] So with many platforms of services like Cloud Foundry, you have a simplified user experience. Obviously that you everybody knows cloudbees really really good at that.
00:02:35 [W] Oh, push the point models wonderful night their container based it's based or it's targeted for the microservices smallish tight-ass time and things and it's my prestigious workloads.
00:02:46 [W] And under the covers, it will manage things like the load balancing your endpoint to stuff like that automatically for you.
00:02:51 [W] And as I mentioned the push model, where does the build for you with the buildpacks?
00:02:55 [W] That's all wonderful.
00:02:56 [W] Okay, the paper users model obviously for an ocean environments. It will only charge you for what you're using.
00:03:03 [W] Sent accurate statement about Cloud Foundry itself.
00:03:05 [W] It's a little bit more generic.
00:03:06 [W] I just like using concrete names on there to give a little bit more of a grounding.
00:03:10 [W] Okay. So with many platforms of services like Cloud Foundry, you have a simplified user experience. Obviously that you everybody knows cloudbees really really good at that.
00:03:19 [W] Oh, push the point models wonderful night their container based it's based or it's targeted for the microservices smallish tight-ass time and things and it's my prestigious workloads.
00:03:30 [W] And under the covers, it will manage things like the load balancing your endpoint to stuff like that automatically for you.
00:03:35 [W] And as I mentioned the push model, where does the build for you with buildpacks?
00:03:39 [W] That's all wonderful.
00:03:40 [W] Okay, the paper users model obviously for an ocean environments. It will only charge you for what you're using.
00:03:47 [W] using. Okay, and the infrastructural scale automatically boss shoulder tooling. Now what you don't get with something like platform as a service or Cloud Foundry is necessarily access to the advanced features. Some of them are there with the payment platform but in meshmark,
00:04:00 [W] Cases they have to try to hide it from you because that's the whole point, right? They want you to focus on just give us your source code and will host it for you.
00:04:06 [W] Okay, now then let's switch over to kubermatic. S' little bit different Beast.
00:04:12 [W] Obviously, it's still container-based micro service based data is all the other stuff. But you're a lot of other features that are either missing or you have to kind of do it yourself.
00:04:20 [W] So for example endpoint management load balancing stuff like that.
00:04:24 [W] that. It's there, but you have to manage it yourself and it's not necessarily the easiest thing in the world. Okay, Autumn an
00:04:30 [W] Sure, there is auto scaling stuff like that. Now other things such as the build right getting the container image itself.
00:04:37 [W] That's not there.
00:04:39 [W] It's not even there was part of kubenetes itself.
00:04:42 [W] You have to go to third parties do that.
00:04:43 [W] That's what that was completely blank.
00:04:45 [W] Okay, but obviously you do have access to the advanced features.
00:04:47 [W] Everybody understands the all one of the things that kubenetes offers. Now, the one thing the communities is really missing though is the simplified user experience. I think most people would admit that kubernative is not really the easiest to use right.
00:05:00 [W] Not designed for the end User. It's meant for for an operator or an advanced user.
00:05:05 [W] Okay.
00:05:06 [W] Now let's talk about open whisk not open West would say interesting about that one is it's actually very similar to Cloud Foundry in terms of features or performs a service.
00:05:15 [W] Okay, and you got to kind of wonder why they didn't sort of merge those two worlds, but for whatever reason they did it.
00:05:20 [W] Okay, so you see a lot of the same features.
00:05:23 [W] You're a lot of other features that are either missing or you have to kind of do it yourself.
00:05:27 [W] So for example endpoint management load balancing stuff like that.
00:05:31 [W] It's there, but you have to manage it yourself and it's not necessarily the easiest thing in the world.
00:05:35 [W] Okay, Autumn an infrastructure, there is auto scaling stuff like that.
00:05:38 [W] Now other things such as the build right getting the container image itself.
00:05:44 [W] That's not there.
00:05:46 [W] It's not even there was part of kubenetes itself.
00:05:49 [W] You have to go to third parties do that.
00:05:50 [W] that. That's what that was completely blank. Okay, but obviously,
00:05:52 [W] You do have access to the advanced features.
00:05:54 [W] Everybody understands to all one of the things that kubenetes offers now.
00:05:58 [W] The one thing the communities is really missing though is the simplified user experience.
00:06:02 [W] I think most people would admit that kubernative is not really the easiest to use right. It's not designed for the end User.
00:06:08 [W] It's meant for for an operator or an advanced user.
00:06:12 [W] Okay.
00:06:13 [W] Now, let's talk about open whisk not open West would say interesting about that one is it's actually very similar to Cloud Foundry in terms of features or performs a service.
00:06:21 [W] Okay, and you got it.
00:06:22 [W] Kind of wonder why they didn't sort of merge those two worlds, but for whatever reason they did it.
00:06:26 [W] Okay, so you see a lot of the same features.
00:06:28 [W] They're very heavily focused on the user experience.
00:06:30 [W] However, with many serverless or functions is to respond forms, you will get additional tooling for example, event-driven type of tooling meaning they will do things like help you subscribe to the producers.
00:06:44 [W] They'll manage some level orchestration of the events that are coming through the system.
00:06:48 [W] Okay things you don't necessarily get with Cloud Foundry or out of the box.
00:06:52 [W] Renee's now it will do other things for you scale the 0 not necessarily all platforms of services do that.
00:07:00 [W] Okay kubenetes, you can get that but you got to kind of do it yourself asynchronous tasks not built into kubenetes.
00:07:06 [W] You can do it as part of your application, but open whisk or functions of servicemeshcon those offer that out of the box. Okay now not restrictive execution times.
00:07:15 [W] times. Okay, many functions to the service platforms limit how long you can actually run your functions for on each request. Okay.
00:07:22 [W] Now technically there's no reason for that other than that's the choice they made as per their infrastructure and you don't get those restrictions on things like Cloud Foundry and kubenetes.
00:07:31 [W] It's just a it's just a different choice of how they chose to expose these things or how they chose to implement that I should say.
00:07:37 [W] Okay, and finally you have the same thing with memory usage right?
00:07:40 [W] You have more freedom with things like Cloud Foundry and kubenetes not so much with functions as a service. Okay now our assertion is
00:07:49 [W] You shouldn't have said before us to choose between these various platforms.
00:07:53 [W] But you got to kind of do it yourself asynchronous tasks not built into kubenetes.
00:07:58 [W] You can do it as part of the application, but open with us were functions of servicemeshcon those offer that out of the box. Okay now non-restrictive execution times.
00:08:07 [W] Okay, many functions to the service platforms limit how long you can actually run your functions for on each request.
00:08:13 [W] Now technically there's no reason for that other than that's the choice they made as per their infrastructure and you don't get those restrictions on things like founder and kubenetes it.
00:08:22 [W] Just a it's just a different choice of how they chose to expose these things or how they chose to implement.
00:08:27 [W] I should say.
00:08:29 [W] Okay, and finally you have the same thing with memory usage, right? You have more freedom with things like Cloud Foundry and kubenetes not so much with functions as a service. Okay now our assertion is
00:08:41 [W] You shouldn't have to be forced to choose between these various platforms.
00:08:44 [W] Okay, as you can see there are differences between them but most of the differences aren't necessarily because of the infrastructure in terms of like containers forces them to make these choices. They're just implementation choices that they've chosen to make it to as they choose to expose it to you
00:09:27 [W] To you as a user, okay?
00:09:29 [W] So when you first make these choices whether that really means though is it's going to be more work for you and what I mean by that so as you break up the monolith what happens if each component can't actually run on one particular one of these platforms,
00:09:45 [W] Is best suited for say a function others are best suited for cloud Foundry because it's normal 12 Factor applicant thing and others need some of the complexity or Advanced features of kubernative.
00:09:54 [W] Right?
00:09:54 [W] What if you have to split across all three, that's more work, right? Because what if you then we have to have a separate devops pipeline for each one more work more headache more things to manage.
00:10:05 [W] Okay, then what do you do? If you need to actually integrate those workloads across three platforms any do that securely, right? You don't want necessarily have to have
00:10:14 [W] All the network traffic go back out to the internet every single time just because you want these components to talk to one another that's not ideal.
00:10:21 [W] Okay, and of course this sort of someone I love bright you can have three times learning curve 3 times the management aspects to all this right. So there's a lot of choices here, but there's also means a lot of work with those choices and a lot of times like to say that sometimes having too many choices
00:10:36 [W] And this is one of those. So what do you do?
00:10:37 [W] Well one option of course is just to accept your fate.
00:10:39 [W] What does that mean?
00:10:40 [W] Well assume kubenetes wins, I think that's one way to go and you can actually see some of these platforms are rebase themselves on top of kubernative.
00:10:48 [W] But the problem with that is while they're doing that.
00:10:51 [W] They're still limiting what the user can do by just saying what you're still stuck in the platform's of surface world.
00:10:56 [W] It's just under the covers we use kubernative, right?
00:10:59 [W] But that doesn't actually help the user.
00:11:01 [W] So if you do choose to go with kubernetes, what does that mean? Well, you still have a problem.
00:11:04 [W] Mm of well, you're missing all the advanced features right arms are not missing features, but you're still missing some features like the build a synchronous test built-in.
00:11:13 [W] You definitely don't get the simplified user experience, right? You have all those do-it-yourself features that we talked about that you have to manage yourself right there still dairy stuff to worry about all that stuff.
00:11:21 [W] So choosing kubernative and saw that it just removes the choices, right? But you still have to deal with the complexity kubernative, right? Anybody is to play something kubernative is, you know, you have to understand, you know, containers positive except servicemeshcon.
00:11:34 [W] Secrets Ingress little balancers and you don't have to just understand the concepts. You have to manage all those yourself.
00:11:41 [W] Okay. Now there are some tooling they'll help you right Helm stuff like that and you co to manage some of those things for you, but those aren't necessarily trivial to use either right?
00:11:50 [W] They're not necessarily designed for the simplistic value that you might see with something like crowdfunding.
00:11:55 [W] So you don't necessarily have to completely understand.
00:11:52 [W] It's like all the details or the exact implementation choice or deployment choice of the infrastructure is abstracted.
00:11:58 [W] It does expose the infrastructure to you, right so you don't necessarily get the same level of abstraction that I claim.
00:12:05 [W] We were promised with that original promise chart that I showed you before.
00:12:08 [W] Okay, and let's face it as a developer.
00:12:11 [W] All I want to do is deploy my code, but even that's not hard percent accurate right because technically I don't want to just deployment code. I just want to
00:12:19 [W] Code as a developer and the entire notion of deploying and managing. My application at runtime is something I have to do.
00:12:27 [W] It's like a necessary evil, right?
00:12:28 [W] I don't actually want to have to spend all my time doing that.
00:12:30 [W] And so why should I okay now even beyond all that.
00:12:35 [W] Let's talk about a couple more things.
00:12:36 [W] First of all, what about other types of workloads? Right?
00:12:40 [W] What about things like batch Computing and the orchestration about Computing right now kubernative has jobs and that's the sort of the beginning of batch Computing but
00:12:49 [W] Clear that doesn't have the orchestration stuff around it.
00:12:51 [W] You can do third party to like to bring that in but it's not there by default. And again, it's more things that you as a developer would have to manage and learn.
00:12:59 [W] Okay, and I'm sure there are other platforms that am I even thinking about that we have to integrate and concern ourselves with or are there are other options right?
00:13:06 [W] It's just the tips becomes a jumbled mess. Basically, okay, but then we have other things with of kind of touched on things.
00:13:12 [W] Your parties but it's not there by default again more learning. And finally we have things like event orchestration.
00:13:16 [W] Okay what I mean by that is let's say the things coming into your applications aren't just messages.
00:13:21 [W] They're actually events and by that what I mean is maybe you want to have the system help you manage your subscriptions to the event producers right as the events come into the system.
00:13:31 [W] Maybe they need some sort of fan out because they need to go to more than one service or maybe need some sort of filtering thing. Right all those kind of things that you will see in some
00:13:38 [W] it functions as a service or service platforms aren't there by default inside a career days.
00:13:43 [W] You might be able to find it people write yourself, but it's not there by default and I'm sure there are lots lots more.
00:13:49 [W] Okay, but with that, let me let me stop sort of my venting and complaining a little and let's move on to some of the sort of progress has been made in this space. Now. First of all, what I want to do is talk about what I call Community chatter. Okay, if you
00:14:04 [W] Those kind of things that you will see in some functions as a service or service platforms aren't there by default inside a career days.
00:13:51 [W] You might be able to find it people write yourself, but it's not there by default and I'm sure there are lots lots more.
00:13:57 [W] Okay, but with that, let me give me stuff through my venting and complaining a little and let's move on to some of the sort of progress has been made in this space. Now. First of all, what I want to do is talk about what I call Community chatter. Okay, if you
00:14:41 [W] People in talk about in the community.
00:14:42 [W] You can sort of hear some of the grumblings of some of these things that I've talked about.
00:14:46 [W] Okay, I've heard many people talk about how the line between some of these platforms are becoming very very blurry and I've hinted at one of those in particular in the beginning of the presentation right the the whole notion of platform as a service versus function is service is very very blurry and you saw that with my chart
00:15:01 [W] Okay, I mean after all these are all just containers.
00:15:05 [W] So why do we have to make such a big deal between you know, which of these as a service things you want to actually deploy to? It's kind of silly.
00:15:11 [W] Okay, but of course, you also hear people complaining about kubernative not from an infrastructure or feature perspective, but more from a usability concern. Okay, as I said most people will not think of kubernative as a reusable and most people don't necessarily want to expose kubernative.
00:15:26 [W] Users, but they but for whatever reason that's the way it sort of turned out. Okay, and so the way I like to think of it is kubernative is is not the end game here.
00:15:32 [W] It may be the End Game movies for today from a technology perspective, but it's not the end game in terms of what we should expose to our users.
00:15:40 [W] Okay. So that's one piece that's sort of the your hand groans in the community and that's a good sign because that means people are starting to realize that there's a problem here.
00:15:47 [W] Okay. Now the other thing that's happened Community is our project called K natives can spin spun almost
00:15:52 [W] Up. Now K native is a simplified user experience on top of kubernative. Now. It doesn't aim to necessarily expose all the features of kubernative.
00:16:01 [W] It's mainly aimed at deploying 12 fact applications.
00:16:06 [W] Some people call it serverless.
00:16:07 [W] It depends on your point of view, but the simple command line that I show you here is just a quick little quick example, right?
00:16:12 [W] So from the Canadian of command line, I do a service create passing the name of the application I want and then passing the image now if you look at that, all I did is passed into bits.
00:16:23 [W] Information application name name of the image and that's it under the covers K native managed everything else for me from a kubeedge perspective.
00:16:32 [W] It's going to manage the pods. It's going to manage the rep cassettes deployments the Ingress the load balancing the networking you name it it manages it for me.
00:16:40 [W] Simple command line that I show you here is just a quick example, right?
00:16:40 [W] So from the KD of command line, I do a service create pass the name of the application I want and then passing the image now if you look at that, all I did is passed in two bits of information application name name of the image and that's it
00:17:50 [W] Very excited by it but also because I think this is an admission that we've sort of let our users down and this is an attempt to try to fix it. Now as much as I love K native it is just a stepping stone there and it doesn't necessarily
00:18:05 [W] I said aim to solve all the problems that we talked about previously in the slide deck.
00:18:09 [W] Okay, in particular a lot of what they talk about is focused on sort of low latency applications.
00:18:14 [W] So for example, it doesn't necessarily do a good job of processing request that takes say three hours to run now.
00:18:21 [W] We're working on stuff like that and not necessarily everybody's on the same page whether we should or not but at least the framework there is to maybe we can start expanding that space. So as I said king of is a stepping stone to something bigger, okay, and let's talk a little bit about what that next step actually.
00:18:35 [W] Might be okay.
00:18:36 [W] So this slide talks about what if okay.
00:18:39 [W] What if as a developer I decide what I want to use as sort of the input into the system.
00:18:45 [W] Let's say I want to start with just a container image or let's say I want to start with source code and maybe the source code is part of a function.
00:18:53 [W] Maybe it's part of an application.
00:18:54 [W] Maybe it's part of a batch job doesn't really matter. It's just source code. Okay. Now the other piece of information is what if I also want to provide just the runtime semantics to where I'm going to play this thing.
00:19:05 [W] And by this I don't mean things like the yamo that says oh, what should I look out to look like how should it?
00:19:12 [W] You know, what should it do in terms of scaling and network traffic splitting all the other stuff?
00:19:16 [W] No. No, but I mean here is give us the high order requirements that you want for your running application. Right and the infrastructure will manage the rest for you.
00:19:26 [W] It'll figure out how to make that happen.
00:19:27 [W] You just give us the high level requirements.
00:19:29 [W] Okay.
00:19:30 [W] Obviously need some sort of workloads manager, right?
00:19:34 [W] It's going to manage and host your application. Whether it's a 12 time to wrap a restful API application batch asynchronous high low latency, whatever as long as it containerized this thing will run it for you and you don't need to understand that things in the green box.
00:19:47 [W] But let's say if the core is this engine that's hosting your application.
00:19:50 [W] Okay, so you take the image as input to their if you give its source code it will maybe generate the image for you through some mechanism maybe through doc or build maybe through buildpacks. Whatever.
00:20:00 [W] / and then add another for the last set of input is the runtime semantics and that's all input into this coredns.
00:20:07 [W] Jeanette just knows how to make it all happen at that point.
00:20:09 [W] Okay. Now obviously your application in many cases not all many will need to get input or messages coming in to actually process.
00:20:18 [W] So this infrastructure should manage the networking auto-scaling you get a large load traffic splitting stuff like that.
00:20:25 [W] It should manage all of that for you.
00:20:26 [W] Okay. Now what if those messages aren't just quote message.
00:20:30 [W] But they're actually events. Well, I'd like by earlier.
00:20:34 [W] What if you need some sort of event management orchestration right help in managing your subscriptions to these than producers what if the events come in and they need to be some do some sort of filtering we have you need them to be routed to multiple places inside your infrastructure right?
00:20:48 [W] Narrated by the infrastructure and of course throw in security and compliance because everybody knows you need that right?
00:20:45 [W] So what if this is where you could go with the stuff right sort of throw the dream state at least from the IBM perspective in terms of all these various platforms of these choices, right?
00:20:55 [W] So the point here is as in a developer you should we be concerned with the stuff in the purple box there, right your inputs meaning a container image. You've already have one or just source code and the runtime semantics you want.
00:21:07 [W] Okay the entire question of which
00:21:09 [W] Such as a service platform should you choose should basically become moot right?
00:21:14 [W] It should not be a question.
00:21:15 [W] You have to ask yourself or even think about nor should your platform provider force you to choose? Okay. Now this isn't just a pipe dream IBM actually does have offering out there that we just went into beta for and I know
00:21:30 [W] Should basically become moot right?
00:21:29 [W] It should not be a question.
00:21:30 [W] You have to ask yourself or even think about nor should your platform provider force you to choose? Okay. Now this isn't just a pipe dream.
00:21:40 [W] IBM actually does have offering out there that we just went into beta for and I know, you know, not necessarily because a product pitch but Point here with showing you what we have is that IBM believes so strongly in this there were actually have an offering out there today
00:21:56 [W] Because a product pitch but Point here with showing you what we have is that IBM believes so strongly in this that were actually have an offering out there today that people can actually use and play with. Okay. Now what is code engine code engine as I said if this unified
00:22:11 [W] Minutes unified platform for hosting all your containers applications in the cloud. Okay, as of today it's in beta. So it's completely free when we go to GA. You will only pay for what you use and the main purpose here is to get your developers back to coding
00:22:26 [W] Yeah, you only pay for what you use and the main purpose here is to get your developers back to coding not managing infrastructure.
00:22:34 [W] Okay. Now I won't go through the long list of things in the blue box, but you can see they're all the things we talked about before right all the things.
00:22:41 [W] They said you should have to worry about but you still may want access to are still there.
00:22:45 [W] Okay. Now the important thing I do want to point out here before I move on is that it is based on kubernative and some people think of that as like can say well, okay, that's great. It's built a communities and you don't and you dumb down
00:22:56 [W] On the user interface, but that means I have limited choices. Now that point. Well not true.
00:23:01 [W] Okay, we are built on kubernative Ace, but we still allow you to get to kubenetes if you really really need to our goal is that you never have to write we have a simplified user experience.
00:23:11 [W] We have a wonderful user UI.
00:23:13 [W] We have wonderful command line, but if for some reason you need to go around us, we don't stop you. You can still use cout control if you really really want to do which means your code engine work loads can seamlessly
00:23:26 [W] Work with your existing kubernative workloads. Okay, so this isn't about Nestle limiting your choices.
00:23:32 [W] It's about saying only be forced to deal with the complexity when you really really need to in those Advanced scenarios.
00:23:38 [W] You're not forced to do with the kuma V complexity kubernative right out of the box and that's the benefit of code engine. So it's their favorite if you go ahead and play with it.
00:23:49 [W] we'd love to hear your feedback Cloud that ibm.com / code engine. So just to wrap this up to them pretty much out of time here.
00:23:56 [W] Infrastructure provider. Okay.
00:23:58 [W] I think we all need to sit step back and realize that we may have forgotten our original goal and target audience here.
00:24:03 [W] Okay, there are times when it feels like we're producing technology for the sake of technology and not necessarily for the better for the user as I say kubernative is wonderful, but it's not necessarily for the end user.
00:24:14 [W] Okay.
00:24:15 [W] We need more collaboration.
00:24:17 [W] We need more projects like K native that are not proprietary right?
00:24:23 [W] that are shared across the community and focus on hashicorp.
00:24:25 [W] Harmonization of these unit of these platforms because this whole notion of unified platform to me goes in this whole notion of removing obstacles for the end user.
00:24:37 [W] Okay, because this is also about reducing vendor lock-in.
00:24:39 [W] So if we get shared infrastructure focus on usability side of things and removing all these artificial choices from the end-user, it benefits the benefits the end user and it makes our life easier as infrastructure providers.
00:24:52 [W] And finally, there's also this usability integration and interoperability projects.
00:24:56 [W] Things like cloudevents.
00:24:57 [W] You don't know cloudevents has go look at it.
00:25:00 [W] It's specifically designed to help the integration of these platforms together.
00:25:03 [W] Okay, again, we need more projects like that to make life easier for not just the end user but also for integrators so that they can make life easier for the end user and finally as end users you guys out, you know, you're not off the hook here for you guys.
00:25:18 [W] User it benefits the benefits the end user and it makes our life easier as a researcher providers. And finally there's also this usability integration and interoperability projects things like cloudevents.
00:25:25 [W] You don't know cloudevents is go look at it.
00:25:28 [W] It's specifically designed to help the integration of these platforms together.
00:25:31 [W] Okay, again, we need more projects like that to make life easier for not just the end user but also for integrators so that they can make life easier for the end user and finally as in users you guys out, you know, you're not off the hook.
00:25:44 [W] Here for you guys.
00:25:46 [W] I think you really need to take a step back. And as you use these various platforms look for opportunities to push back on us. Okay ask, why are you being forced to do all these various steps just to host your application. Okay, in other words, you should demand
00:26:20 [W] Ask why are you being forced to do all these various steps just to host your application?
00:26:25 [W] Okay, in other words, you should demand less complexity less friction to get your job done and less of a learning curve. Okay, you should be talking to them and saying look I want my developers to develop not become it or operation experts. Okay, so demanded of your platform
00:26:41 [W] Complain nothing will change we need to hear from customers because we all do listen to customers believe it or not.
00:26:46 [W] Okay, and with that, thank you very much for your time.
00:26:49 [W] Thanks for listening to me ramble here. As I said, please if you get a chance go look at IBM Cloud engine.
00:26:55 [W] It's out there to try to address these concerns.
00:26:56 [W] We'd love to hear your feedback because we love the if this was sort of the first step for the rest of the community to take this journey with us, right?
00:27:05 [W] And again, thank you very much for joining.
00:27:40 [W] All right.
00:27:41 [W] Thank you everybody for joining.
00:27:42 [W] I believe it's question and answer time.
00:27:44 [W] Let's see.
00:27:46 [W] Let's go through the questions here.
00:27:47 [W] I interesting most of them during the session itself.
00:27:49 [W] There was one that tourism data me.
00:27:51 [W] So Andrew asks giving developers purported to only want to write code.
00:27:56 [W] What's the appropriate level of extraction to Target for developers meaning?
00:27:59 [W] Tell developers write your code will handle the rest for you.
00:27:59 [W] Just the one caveat I would throw in there is I wouldn't want to Sara Lee restrict them in terms of what their runtime is. Right? If you want to do whatever your favorite programming language is, whatever your favorite well runtime, we're environment in terms of hosted.
00:28:14 [W] It should be up to you to decide that yourself.
00:28:15 [W] We shouldn't actually force it on people to choose one thing or the other.
00:28:18 [W] This is all about letting developer code and whatever environmental language framework whatever they want. It's sort of up to them and then
00:28:26 [W] And it's our job just to host it. So in a lot of ways as long as you containerize it, you know, that's the end of your job as long as you can as long as you containerize a will take over from there.
00:28:35 [W] Okay?
00:28:36 [W] I'm trying to think.
00:28:38 [W] I think I answered all the other questions. So if you have any others, please go ahead and chime in but while we're waiting for others to join I will point out that there is a kook own but is it cook on sponsor theater slack
00:28:53 [W] Um, I'm trying to think I think I answered all the other questions.
00:28:52 [W] So if you have any others, please go ahead and chime in but while we're waiting for others to join I will point out that there is a kook own but is it cook on sponsor theater slack Channel that I will be hanging out in for another 15 minutes or so after
00:29:13 [W] Out in for another 15 minutes or so after the talk.
00:29:15 [W] So if you guys have any other questions or whatever, I'll be hanging out there in case you don't get a chance to ask on the chat here and with that any other questions.
00:29:28 [W] Otherwise, we may just end it a little bit early.
00:29:35 [W] They will give another 15 seconds or so that are is never fun when you're presenting.
00:29:49 [W] Okay, so Andrew has another one.
00:29:51 [W] What are your thoughts on gradual complexity develops to start easy, but we train towards infrastructure complexity Yeah.
00:29:59 [W] So basically I think I was kind of touching on that a little in there.
00:30:02 [W] And in the sense that I was talking about how you only have to deal with kubernetes when you actually get to the more complex scenarios and I think that's actually the way most things should be sort of presented to people you can kind of think of it as a progressive disclosure kind of a thing right
00:30:17 [W] Another platform.
00:30:18 [W] Everything should be basically dirt simple, right?
00:30:20 [W] Like I kind of showed you here, but obviously that's only going to be true for a certain percentage of the workloads that you're actually going to put out there over time. If you actually need some of the complexity, I do think it's important that the platform actually give it
00:30:36 [W] Over time if you actually need some of the complexity, I do think it's important that the platform actually give it make it available to you obviously in a simple fashion as possible.
00:30:42 [W] But to me the key thing here is is twofold one is as I just said make it as simple as possible get to but II don't stop them from getting to that set of advanced features if they really need it.
00:30:54 [W] Okay, personally, I mean as much as I actually really like Cloud Foundry and stuff like that. I did find a little frustrating knowing that there was all those other Technologies.
00:31:02 [W] G into the covers that were there and it was hidden from me and I wasn't able to take actually get to it. And I think that actually opened the door for something like Docker and Korea is to actually come in and steal some of its Limelight right?
00:31:13 [W] So I think that's one of the things we need to avoid because one things we want to prevent is, you know, a split of the community again, right?
00:31:20 [W] So if you have this unified platform where people don't feel like they're boxed in and people can extend it easily at least for those Advanced scenarios.
00:31:27 [W] I think that's going to give everybody the Best of Both Worlds. So yeah Progressive disclosure is definitely the way to go
00:31:32 [W] Um, okay.
00:31:35 [W] So Mike is asking once you dive into kubenetes. Can you back up to code engine or is it a one-way trip?
00:31:39 [W] I think it kind of depends on on on what the feature is. If you obviously start out with kubernetes and the encode engine offers up the similar feature then guess you can
00:31:54 [W] To the simplified user experience and use the code enter those features, but obviously if a feature is not available through code engine and have to go around us to get to that kubenetes feature then yes.
00:32:04 [W] It's a one-way Street at that point.
00:32:06 [W] But are as I said, our goal is to try to expose most if not all of the kubenetes features in the simplified user experience.
00:32:14 [W] Just we're not there yet.
00:32:16 [W] We do have to do it slowly because obviously the last thing I want to do is turn around and just dump it all in front of people's faces, right? So we need to do it kind of slowly. So it's that it's not initially a one-way Street.
00:32:24 [W] Eat, okay.
00:32:25 [W] So James is asking how large Enterprises such as financial institutions handle statutory regulation concerns for black spok systems are discovered engine So speaking just from the IBM perspective. Our goal is to actually make it so that all of the compliance requirements
00:32:40 [W] No, HIPAA, everything else.
00:32:31 [W] They're going to be there because you folks as developers should not need to worry about that.
00:32:35 [W] So obviously the platform's need to do their job properly and and and be hundred percent compliant with all those various things for them.
00:32:44 [W] So although sorry.
00:32:47 [W] So yeah. So basically the platforms are basically handle all the compliance there for you under the covers.
00:32:53 [W] Okay, so you should not be forced to lower your expectations in terms of what you can do in terms of the various industry requirements. Okay, and I think with that we are technically at a time. So again, just thank you very much for joining.
00:33:05 [W] And again, if you go to the slack Channel with the coupon sponsor theater Channel, I'll be hanging out there for another 15 minutes or so to answer any questions.
00:33:14 [W] All right. Thank you very much for joining.
