SIG Multicluster Intro: OCGB-0034 - events@cncf.io - Wednesday, November 18, 2020 3:52 PM - 32 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello, I'm Jeremy Olmstead Thompson and I'm Paul Maury and this is the Sig multi cluster intro at Cube con North America 2020.
00:00:11 [W] And how do you contribute?
00:00:13 [W] We will cover turning off ones camera in order to conserve storage space.
00:00:19 [W] What happened before now in the lifetime of the Sig? We're going to talk about cute fat. We're going to talk about the concept of a cluster registry.
00:00:30 [W] And we're going to talk about what's currently happening.
00:00:33 [W] So we're going to talk about things like cluster set of cluster ID namespace sameness multi cluster Services API the work API cluster sets and what do they mean?
00:00:49 [W] So what is the Sig about well, multi clusters and extremely broad topic that means different things to basically everyone but our best definition is just making multiple clusters work together. Somehow it touches many different functional areas.
00:01:05 [W] So what is the Sig about well, multi clusters and extremely broad topic that means different things to basically everyone but our best definition is just making multiple clusters work together. Somehow it touches many different functional areas.
00:01:12 [W] We are really focused on trying to figure out what are those key Primitives that that you really need in all multi cluster scenarios to make it work and we need your input.
00:01:23 [W] We're looking for real use cases.
00:01:26 [W] We're looking for, you know, understanding the projects you're working on but we're going to tell you a bit about ours.
00:01:37 [W] So many of you are probably familiar with kubeflow door kubenetes Federation.
00:01:43 [W] There's been a couple different versions of that. The first one was built before we had custom resource definitions and was really about spreading a single
00:01:58 [W] versions of that the first one was built before we had custom resource definitions and was really about spreading a single resource where that might be a resource
00:02:16 [W] Are that might be a resource of one of the well, that was a resource of one of the built-in types that was pushed to different clusters from a central cluster that hosted Federation and sometimes overridden the V2
00:02:33 [W] Took a similar approach in the sense that there are template resources that are spread to multiple clusters with overrides but it heavily leveraged has custom resource definitions to
00:02:48 [W] Federation surface Federation API surface for any type and this was a response to one of the shortcomings of V 1 which is that in V1 since we didn't have
00:03:00 [W] There was no just have a new part of the control plane for a new resource.
00:03:04 [W] So we leveraged cri-o is to create new API surfaces for any type. And if you if you take a look over there at the right hand corner of the screen, you can see an example of a
00:03:19 [W] Element so you'll see there we've got under spec.
00:03:20 [W] We've got a template that probably looks a lot like you would expect field in a speck called template to look like and then we've got a section called placements and overrides and those are sort of what they sound like the placement one contains.
00:03:35 [W] Which clusters does this resource go to the overrides contain?
00:03:37 [W] How does it change in a particular cluster?
00:03:39 [W] So if you take a look there you got under overrides.
00:03:43 [W] it's a list there's one item in it cluster name is clustered to and the override says the spec replicas field should be five instead of three.
00:03:53 [W] So similar API regime and approach but trying to address that limitation and V1.
00:04:02 [W] By using CRTs to generate new API surface has introduced a new problem, which is that having a distinct API surface for the Federation apis means that
00:04:18 [W] To address that limitation and V1 by using CRTs to generate new API surface has introduced a new problem, which is that having a distinct API surface for the
00:04:45 [W] Required transformation to be used with that API surface. So you couldn't just take a Helm chart for example and use it with kubeflow to without some alteration or transformation
00:05:01 [W] without some alteration or transformation and
00:05:07 [W] Another point to mention here is that we attempted an integration with the cluster registry, but the correct boundaries were never a parent. And in this in this presentation, we're telling the story maybe with
00:05:22 [W] Ordering, we haven't talked about the cluster registry yet, but we're about to so just remember that we tried to integrate kubeflow n:v to with a cluster registry and then we're never really a clear good set of boundaries.
00:05:36 [W] That's sort of a theme that will come back to perhaps about it if we could just head on over to the next slide.
00:05:46 [W] So with all that said about cuvette V2, there's really no one-size-fits-all solution in this problem space if the model works well for some users and there's definitely users and vendors that are out there using it.
00:06:01 [W] the the folks that are currently working on kubeflow or are considering how to add whole reconciliation where what the the contrast might mean or means between this word
00:06:16 [W] Used earlier push and pull the push model is you've got something running in a cluster that's hosting kubenetes.
00:06:40 [W] That has the Federation API surface and pulling it in.
00:06:44 [W] So again this touches that kind of cluster registry concept, but there there's not a real clear boundary about what parts of
00:06:59 [W] This in pulling it in.
00:06:58 [W] So again this touches that kind of cluster registry concept, but there there's not a real clear boundary about what parts of
00:07:22 [W] Album a cluster registry solved.
00:07:25 [W] I do want to just pause here and say and give a shout-out to Jimmy and Hector and others from D2 IQ for helping to move this project forward.
00:07:34 [W] Thanks a lot.
00:07:35 [W] Your work is appreciated.
00:07:36 [W] Why don't we just head on over to the next one?
00:07:40 [W] All right, so
00:07:43 [W] That cluster registry thing.
00:07:45 [W] We mentioned a couple times you probably heard of this the history behind the cluster registry is that in between kubeflow V1 and kubeflow be too there was a point within
00:08:00 [W] Are basically the only thing that folks could agree on in this very spacious.
00:08:08 [W] Problem space is that if you're working with multiple clusters, it makes sense to try to attract them and to have some registry type thing.
00:08:21 [W] This is a very deceptive problem as as problems with computers can be it seems simple.
00:08:29 [W] It seemed very easy at the time that we would just build a registry and you can sort of imagine what it might be.
00:08:38 [W] It seemed easy to us.
00:08:40 [W] It turned out not to be easy. As I said there wasn't ever really a great boundary. That was super clear about what should
00:08:50 [W] Cluster registry type thing do versus something.
00:08:54 [W] that would be a user of cluster registry and if if you actually go and look at the cluster registry project, you'll see there's a there's an API.
00:09:03 [W] There's no controllers to back it because we weren't sure what they should do.
00:09:10 [W] And that's maybe a good point for us to talk about.
00:09:15 [W] What approach are we taking in the Sig today?
00:09:20 [W] So with everything Paul just mentioned we've kind of decided to rethink our approach.
00:09:25 [W] Step back and we're trying to think about how we can avoid premature Stan standardization.
00:09:26 [W] We don't want to solve problems that don't really need to be solved and really really just kind of focus on the specific functionality that we want to build to meet real specific needs.
00:09:36 [W] So we've decided to kind of work backwards from specific problems into something bigger only where necessary we're not, you know, we're not looking to solve all of the problems.
00:09:44 [W] We've got a few use cases that seem very very clear that are that are well-defined that you know, we're seeing
00:09:50 [W] Seeing users and other community members continuously bring up and we're trying to figure out how can we just address those real concrete use cases and just see kind of what what evolved organically beyond that.
00:10:05 [W] So let's talk about cluster set.
00:10:09 [W] So note that even though it looks like the other kubernative set resources. You may be used to seeing this is a pre API concept.
00:10:17 [W] It does not currently correspond to a real resource.
00:10:21 [W] Um, but it's a useful concept to talk about so a cluster set represents a pattern of use that we see that is a group of clusters governed by a single Authority.
00:10:32 [W] that could be a team a company any organization even an individual but some set of clusters around which you can create concrete statements owned by someone who
00:10:47 [W] Sickly absolute decisions about the behavior of this cluster set within the set.
00:10:31 [W] We see a high degree of trust.
00:10:32 [W] Think about this as the extension of the trust that you'd see within a single cluster not necessarily a case where you know, everything can talk to everybody or everything needs to be exposed, but you should
00:10:48 [W] Sara Lee a case where you know everything can talk to everybody or everything needs to be exposed. But you should consider, you know, running applications in the same cluster set. If you would run them in the same cluster that doesn't mean they need to talk to each other, you know.
00:10:37 [W] On them in the same cluster that doesn't mean they need to talk to each other, you know, obviously there are still permissions and stuff in play, but, you know owned by that same Authority who feels comfortable running these these applications together.
00:10:52 [W] We also introduced the concept of namespace sameness.
00:10:55 [W] This applies across all clusters in the set and what this means is that permissions and the various characteristics of a namespace are consistent across all of the Clusters in a cluster set for a given name space.
00:11:08 [W] That is you shouldn't have namespace Foo be used for one thing and have one meaning in one cluster and another cluster in the same set have it used and mean something else with completely different ownership namespace should be
00:11:22 [W] primitive that you use to share ownership across clusters and should behave consistently in each in each cluster in which they're deployed that said namespaces don't necessarily have to exist in every cluster.
00:11:34 [W] It's just that any cluster they exist in a should be behave in roughly the same way.
00:11:40 [W] So one of the first use cases for this cluster set is the multi cluster Services API. So the start as a kept and this kind of been evolving to Alpha right now, but basically services are a multi cluster
00:11:55 [W] It's a specific problem, but it's a specific problem that basically everybody has in the multi cluster case.
00:11:59 [W] How do I extend the service concept to multiple clusters?
00:12:02 [W] So it builds on the concept of the namespace same as and allows that single service to span or be consumed by multiple clusters with it within a cluster set in a similar way to the way you would consume a cluster IP service in a single cluster.
00:12:17 [W] Today, we just wanted to focus on the API and common Behavior.
00:12:10 [W] So we didn't Define an implementation.
00:12:12 [W] We left a lot of room for implementers to make different decisions.
00:12:16 [W] But we wanted to focus on that basic API and behavior that that means that whenever you use this API with any implementation on any platform or however, you want to deploy it you get similar characteristics and can kind of count on on a standard behavior,
00:12:32 [W] See a few implementations in progress already we have Submariner has been working on an implementation with Submariner lighthouse.
00:12:36 [W] We had a demo at the Sig from Cisco showing their implementation of the API and we've even seen sto has plans to introduce the API in an upcoming release.
00:12:48 [W] The control plane in our design can be centralized or decentralized but consumers only ever rely on local data. And this is a big point. So we left open for all of those, you know implementations. I mentioned in any more that may come the way that you build your
00:13:03 [W] Not dictated by the API, but we did want to make it consistent that consumers only ever have to rely on one cluster local data when consuming a service.
00:13:10 [W] We're in Alpha right now on the way to Beta but we'd love your input.
00:13:15 [W] So come by our meetings. Join our group.
00:13:17 [W] Give us your feedback.
00:13:23 [W] Another project that's in Flight right. Now within the Sig is what we call the work API. So this is a different pattern for Distributing resources than the one that we previously identified that was in use and Federation.
00:13:37 [W] So instead of Distributing individual resources, the the main idea of the work API is that you'll distribute a collection of resources that are related to one another so
00:13:51 [W] Think about the difference between Distributing a single deployment.
00:13:57 [W] Too many clusters versus Distributing a deployment.
00:14:01 [W] Maybe it's got a secret or config Matt that it references.
00:14:05 [W] Maybe there's a service in front of that deployment and you'd want to distribute those things together.
00:14:11 [W] So I'll also just add that.
00:14:14 [W] This is a pre-alpha state right now with the kept coming together, so you should not expect when you go and look at that that you'll see a
00:14:26 [W] Ride because we are working backwards with the initial concentration on finding the right API surface to model this problem for a single cluster.
00:14:30 [W] So if we think about if we think about taking away all the dimensions of scheduling and having overrides and you know powerful
00:14:46 [W] It is for wear something should go and just think about how would we want to make sure that we applied a collection of some resource on a cluster and we had a meaningful status about
00:14:46 [W] Work no pun intended a meaningful status about whether those resources had been fully applied.
00:14:49 [W] Was there a problem that's sort of where our initial concentration wise and if we think about working backwards from that sort of leaf node in the problem of how do I do this correctly on a single cluster
00:15:05 [W] to think about
00:15:05 [W] things like higher level Primitives than just work for a single cluster like
00:15:13 [W] scheduling to asset scheduling to some part of a cluster set or defining primitive that allows us to specify overrides if we want to do that type of
00:15:28 [W] The cluster set or defining primitive that allows us to specify overrides if we want to do that type of thing. But if we start walking backwards
00:15:37 [W] Thinking about this higher level problems.
00:15:39 [W] We start to touch this sort of registration concept or at least identity concept around having a coordinate to use in reference to a particular cluster where
00:15:55 [W] So this is still a work in process.
00:15:57 [W] We are working progress.
00:15:59 [W] We need your input.
00:16:01 [W] And I sense that there's probably fairly strong chance that maybe one or two people at least watching this presentation and have built something like work API before or at least are interested.
00:16:14 [W] So please come and join us.
00:16:16 [W] We'd love to have you participate and I do want to give some shout outs here. Shout out to Valerie.
00:16:23 [W] Fancy for her contributions in catalyzation to get the ball rolling on this and also shout out to children for his contributions moving things forward and drafting a cap.
00:16:41 [W] So we come back to this kind of central question and problem again that it's easy to think about a cluster registry like thing.
00:16:53 [W] It's really hard to materialize in a functional functional software.
00:16:56 [W] The boundaries aren't clear.
00:16:58 [W] It's tempting to build first because it seems easy and for those reasons and are you no previous history.
00:17:08 [W] Attempting to solve problems in that neighborhood.
00:17:11 [W] It's tempting to build first because it seems easy and for those reasons and are you no previous history attempting to solve problems in that neighborhood.
00:17:22 [W] We're just going to avoid characterizing registry as a first step and avoid that gravity that I think it's pretty safe to say Jeremy that we still feel the tug of that gravity sometime in the Sig
00:17:40 [W] Look at that gravity sometime in the Sig but we need some coordinate to using apis.
00:17:47 [W] What coordinate would that be?
00:17:53 [W] So we're talking about the concept of a cluster ID.
00:17:57 [W] And so the trick here is we do not have a registry API. So how do we come up with a coordinate without a registry pi and what we're looking at is taking that step back and
00:18:12 [W] Trying to come up with the the real common use case and really what we need is a way to just uniquely identify a cluster within a cluster set for the lifetime of membership.
00:18:22 [W] So this isn't attempting to define the identity of a cluster forever, you know, we want to confine the scope to the cluster set that boundary within which we already kind of have some use cases
00:18:38 [W] It does seem that this ID needs to be discoverable within the cluster.
00:18:35 [W] So, you know, we want a cluster to know who it is relative to the cluster set.
00:18:41 [W] We want to give a reference for multi cluster tooling to build on within the cluster.
00:18:46 [W] So, you know, there's some characteristics that we want there, you know, for example having the the idb a valid DNS label.
00:18:55 [W] This is something that's important to the multi cluster service having a way to disambiguate back nobl9.
00:19:00 [W] ends for headless Services between clusters other uses are maybe a coordinate to use for scheduling work with the work API or or just an annotation for metrics and logs so that you can determine which cluster is
00:19:16 [W] And problems and eight and debugging.
00:19:13 [W] again, we're kind of taking a step back and trying not to solve optional problems and really just get to that basic consistent use case that we need in order to enable kind of the next level of multi cluster tooling.
00:19:34 [W] So in case it's not clear we need and want your input.
00:19:38 [W] We'd love to have you have you involved in in are part of the community.
00:19:44 [W] Share your use cases problems your ideas and you can check out our homepage.
00:19:49 [W] It's under Sig multi cluster in community.
00:19:54 [W] We've got a slack Channel also called Sig multi cluster and hold onto your hat because we have a list which is also called kubernative Sig mlops.
00:20:03 [W] A cluster and if you'd like to join us for our meetings there Tuesday, 12:30 Eastern 9:30 Pacific time.
00:20:12 [W] We hope to see you there and let me be the first to say thank you for coming and watching our talk.
00:20:19 [W] Thank you very much. We appreciate it.
00:20:22 [W] Jeremy there's a really good question question number 5 in the chat that I thought maybe we could address to kick things off with a live q a the question is
00:20:37 [W] We could address to kick things off with a live q a the question is about how do you see multi cluster and gitops models playing with against each other in the future.
00:20:47 [W] Models playing with against each other in the future.
00:20:51 [W] I've got my own perspective on this but I'll give you the first shot if you want to take a crack at that one.
00:20:58 [W] All right.
00:20:59 [W] Yeah, I'll give it a go.
00:20:59 [W] That's a very good question.
00:21:00 [W] I think we see them playing very well together from from my perspective.
00:21:06 [W] I mean, you know, if we look at the multi cluster service API and kind of that.
00:21:11 [W] I don't know if you've had a chance to take a look at it. And if not everyone watching please do
00:21:17 [W] but we you you expose a service by creating a resource just like your service. So the idea is that you know, deploying a or making a service exposed to your cluster set is is no more difficult than just deploying a
00:21:32 [W] With multi clusters, you kind of get this this way to control rollouts.
00:21:37 [W] And so, you know, you can apply all your config to it to 1 cluster at a time for example, and you can get a little bit more isolation.
00:21:44 [W] But you know, I would think that you could drive this exactly like you would, you know, within a single cluster just as kind of like a new layer hopefully playing very nicely with with gitops Paul.
00:21:57 [W] What's your perspective?
00:21:57 [W] Yeah. I think I think I have a similar perspective. I definitely
00:22:02 [W] view gitops as being complementary to you know, the the subject matter that you're dealing with and definitely I think and I don't think that we've like affirmed this as a
00:22:17 [W] so essential and fundamental to our work in the Sig but I would be I think that if we were ever discussing a you know, a project within the Sig that didn't
00:22:20 [W] API that would work well with a gitops approach that we'd probably have a lot of people saying hey, we probably need to change direction since having those declared of apis is so fundamental to
00:22:30 [W] tonight he's is and also what people expect so I would I would expect just following the principle of least surprise that that it's a pretty safe bet that where we build things that have
00:22:43 [W] The apis will be declarative and compatible with the gitops type approach one of the things that also just like draw your attention to is the the work
00:22:57 [W] Is maybe something to just explore a little bit when it comes to examining this kind of issue and I guess we probably got through this talk without an example of what work
00:23:10 [W] if you can imagine if you can imagine something that basically is a template where you can put serialized llamo resources or Json if that's what you want to do
00:23:24 [W] As into a work and have that work basically represent the Declaration that those resources should be present in some cluster if you kind of like walk up a another layer
00:23:38 [W] Traction you can think a pretty it's sort of accessible.
00:23:45 [W] Let's say to sketch something that's like ad scheduling to that so that you could deliver via gitops a resource that contained.
00:23:54 [W] These are my resources whether those are like low-level kubernative things like config maps and deployments or maybe something higher level.
00:24:03 [W] That's like I wanted to play the some chart you could
00:24:06 [W] could imagine delivering a resource like that that also had scheduling information in a VA gitops type flow.
00:24:18 [W] And I guess there is really not a good way to get feedback from the audience the audience.
00:24:23 [W] I'm not sure what I was waiting for. But shyamsundar. I hope that's a good pronunciation of your name for question number five. If if that was a good answer. Please let
00:24:38 [W] Reach out to us on Sig multi cluster chat in kubernative.
00:24:40 [W] So Jeremy, there's another one on here.
00:24:44 [W] That's really really good question number four from Bartosh. Do you recall any approach from multi cluster DB management? For instance?
00:24:54 [W] No placement across several several clusters for gra done in C and Bartosh. I'm still learning the UI for answering these in and try to and it seems like maybe a little different each time. I use it.
00:25:06 [W] It so I just wanted to make sure that you saw the answer that I put on there, but I wanted to elevate that question too because I think it's a really good one and just say that like so far in our in our work in the Sig. I think we've mostly been
00:25:21 [W] For answering these in and try to and it seems like maybe a little different each time.
00:25:16 [W] I use it.
00:25:17 [W] So I just wanted to make sure that you saw the answer that I put on there, but I wanted to elevate that question too because I think it's a really good one and just say that like so far in our in our work in the Sig. I think we've mostly been
00:25:48 [W] weightless workloads since their dramatically simpler than stateful ones and dramatically simpler from you know, trying to make a database Geodon across availability zones or whatever
00:26:03 [W] Really, you know when you when I saw the question that you asked bar Taj, I felt like that was something that I'd love to have explored in a Sig meeting sometime.
00:26:14 [W] How about you Jeremy?
00:26:15 [W] Yeah, I think that would be great.
00:26:17 [W] I think like it's it's a very good question.
00:26:20 [W] I mean because there are so many patterns out there. But right now it seems like every every database technology kind of has its own own thoughts around replication and consistency and what's that what that means? I mean it is definitely
00:26:33 [W] Our hope that like multi cluster Services could be used to expose some, you know, GRE dunant database as a single service that is that is absolutely a goal.
00:26:43 [W] But I think it absolutely needs more exploration as well and it would be it'd be great to come by the Sig meeting and have a discussion because I think that's that's a big part of the evolution, you know, we don't have any sense of like best
00:26:58 [W] All databases or anything like that for deploying a you know, across clusters or anything like that yet. But hope is that we've created enough flexibility that we can start to explore that.
00:27:07 [W] Yeah it I think Jeremy you also touched on a something important in in that kind of subject matter neighborhood, which is that the the answers to those questions
00:27:22 [W] On what your use case is what your requirements are and most importantly what database you're using.
00:27:21 [W] So I think it would be wonderful to kind of start surfacing that topic into the Sig. Please feel free to like reach out and and drop something on to an agenda.
00:27:33 [W] We have a publicly writable agenda.
00:27:36 [W] So if you want to add something you're completely welcome to do that. Yeah, please do.
00:27:48 [W] There's a question from Marius question number six and I I'll just read it and give my own interpretation cluster API provides a list of clusters that it manages.
00:28:00 [W] could that function as the registry? Are you working on any gration any integration with that? You want to take this one Jeremy?
00:28:09 [W] Sure.
00:28:10 [W] Yeah, so since we actually recorded this talk, I think the cluster ID concept has kind of evolved in an even simpler Direction. I think basically we are we're trying to stay away at least for now from defining.
00:28:25 [W] Needs to be in that cluster registry and what that cluster registry is. So, I guess to answer your second question first. We haven't really started looking at the integration with with cluster API. I don't see why some
00:28:38 [W] Implementation couldn't couldn't involve that as part of the registry, but we're not we're not even trying to touch that.
00:28:44 [W] Honestly.
00:28:45 [W] We're trying to we're trying to keep things as flexible as possible.
00:28:49 [W] What we don't want to do is say that, you know, everybody with multi cluster has to use cluster API, there's all kinds of different ways to deploy things and and, you know manage your clusters and
00:29:03 [W] You might even have multiple Solutions working together for different parts different applications different parts of your deployment.
00:29:10 [W] So our main goal is just defining that that kind of bare minimum set of properties that you need in your clusters across a cluster set to actually build useful stuff on top of that cluster set how those get there. You know,
00:29:25 [W] That we're exploring and also something that we don't really want to lock anyone into there's just too many different needs out there.
00:29:32 [W] Yeah, just to just to put my own, you know, you point in on that one.
00:29:38 [W] I would say that it it is a question.
00:29:42 [W] That's very understandable that you would ask.
00:29:44 [W] It's been brought up before in a Sig meeting and they're you know, they're close enough in terms of subject matter area that that you know in the fullness of time.
00:30:00 [W] Clearly if cluster API is widely adopted as something that's used in the industry that I could see that being the basis of a registry implementation in this sig update.
00:30:06 [W] We talked a little less about the kind of effects of premature standardization that we've seen before but the in and we're kind of almost at time here, so I'll try not to launch into
00:30:21 [W] especially lengthy but tldr we have found that that prematurely tying to a registry implementation is probably something that
00:30:33 [W] Most likely stagnate development because there are so many different different vendors.
00:30:38 [W] I think that will be interested in this space and in the work API and multi cluster Services API is two examples that we kind of talked about in this talk, but that are not in a
00:30:54 [W] Mode of wanting to collaborate on the registry implementation.
00:30:57 [W] So I sort of see that just for my own Viewpoint as likely to if we kind of like Play the movie Forward over the next year.
00:31:08 [W] I'd expect there to be kind of two or three implementations of something that's approximately like a registry, but that are that are vendor-specific and
00:31:21 [W] and I'd love to eventually collaborate on one in a kubernative Sig but I my own personal opinion is we stand to lose a lot by doing that prematurely and
00:31:37 [W] In the last few seconds here.
00:31:37 [W] We had a brainstorming session about what those requirements might be for a registry and the answers were so varied and overlaps. So little that it kind of made us think. Okay.
00:31:46 [W] Let's put that question on hold.
00:31:51 [W] and I think that
00:31:53 [W] Was the last second before we became over time?
00:31:56 [W] Thanks a lot for joining us everybody.
00:31:58 [W] Thanks Jeremy for for collaborating with me on this on this talking all no problem.
00:32:08 [W] What can I say and everybody enjoy the rest of your Kube con? Thank you.
00:32:14 [W] Thank you all.
