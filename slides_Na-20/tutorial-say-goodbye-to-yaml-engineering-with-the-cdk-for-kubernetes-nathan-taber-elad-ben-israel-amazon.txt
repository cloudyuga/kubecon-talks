Tutorial: Say Goodbye to YAML Engineering with the CDK for Kubernetes: PURR-7251 - events@cncf.io - Thursday, November 19, 2020 4:52 PM - 80 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hey everyone.
00:00:01 [W] My name is Nathan Tabor and I'm a principal product manager here at Amazon web services.
00:00:06 [W] for engineer here at AWS and also Ellie Polanski who is a software development here engineer here at AWS and all of us work on kubernative A's and the cdk project and we're really excited to share with you what we've been working on and some of the things that
00:00:21 [W] Can do using the CD K and cdk4 kubernative.
00:00:14 [W] Alright, so let's go ahead and get started here.
00:00:17 [W] So we have a few things.
00:00:18 [W] We're going to go over today.
00:00:19 [W] This is a Hands-On interactive demonstration session.
00:00:24 [W] So I'm going to spend a few minutes right now.
00:00:27 [W] I'm talking about you know, what's the deal with the ammo?
00:00:29 [W] How can we do more with the gamble that we have?
00:00:33 [W] have? How can we use the mo as part of the system talk about CD Cates and how cdk2 help solve some of the common problems that we see
00:00:41 [W] see people in the kubernative community having around um, especially as they Define and build really complex applications across organizations. And then we have a really awesome Deep dive Hands-On demo that Ellie and a lot are going to
00:00:56 [W] LCD k8s help solve some of the common problems that we see people in the kubernative community having around um, especially as they Define and build really complex applications across organizations. And then we have a really awesome Deep
00:01:21 [W] Go all the way through how to deploy an app end to end with a cdk4 kubernative zhanna kubernative cluster.
00:01:28 [W] And then finally we're going to have a really quick wrap up. So I'm really excited that you've joined us for the session at Q Khan.
00:01:34 [W] Here.
00:01:35 [W] We are live from home and let's go ahead and get started.
00:01:38 [W] So let's talk about llamo Guillermo is freaking awesome.
00:01:42 [W] I mean the Emma is the bleeding the Beating Heart Right of kubernative cluster. It's how we configure all the stuff that we run using.
00:01:51 [W] Kubernative and yellow is great because it's really easy for humans to read.
00:01:55 [W] It's something that anybody can open up a configuration spec.
00:02:00 [W] They can look at it.
00:02:01 [W] They can understand exactly what's going on exactly what we intend for the system to do.
00:02:06 [W] It's Universal.
00:02:07 [W] It's also declarative, which is great in a system like kubernative.
00:02:11 [W] He's because you declare exactly what you want and then you expect the API server and all the other resources to take care of instantiating that declared State and
00:02:21 [W] Not declared state. So um, well is is a great language for how you want to declare things on your cluster and it's also really good because it's static and things that are static are easy to work with they can be versioned,
00:02:36 [W] Can be shared and distributed and understood at a single point in time.
00:02:41 [W] So that's really good.
00:02:42 [W] So yeah, Moe is a really excellent building block for our applications and it's not too hard to use when you have a few things if you have you know, a handful of deployments or a handful of services in your cluster
00:02:58 [W] Is really great. You can probably just write out a gamble spec really easily and start running some basic applications on kubernative.
00:02:54 [W] But as you grow and especially as you start to adopt systems defined in Jama lacrosse your organization you end up with this llamo engineering there is a lot of boilerplate that you start having to add and that opens up room
00:03:09 [W] Sharing becomes kind of manual and hacky right like projects often start with these off-the-shelf examples, then they start corking copying and pasting configurations from vendors from other companies from Community maintained repositories and maintaining these
00:03:22 [W] It's a lot of work and there's a lot of different tools that we've seen created by the community some like Helm are really good at packaging the emmalin making it easy to bundle.
00:03:29 [W] Um well together, but they don't actually necessarily solve some of the underlying problems about customizations and all the different tooling that you have to use.
00:03:38 [W] do you update across lots of different things, especially when if you're a human right like if you're a developer and you've never actually touched
00:03:48 [W] Kubernative.
00:03:49 [W] zml, it's this whole other world to actually begin to start to run your application on kubernative. And we find that that can be a bit of a learning curve for people and most developers are used to working with general purpose languages,
00:04:05 [W] General purpose languages are what we actually build our applications and they tend to be specialized.
00:04:09 [W] They can be functional or imperative.
00:04:12 [W] They are Dynamic and there's a whole ecosystem of tooling and workflows around.
00:04:18 [W] How do we Define applications using these general purpose languages?
00:04:22 [W] So what the cloudevents kit for kubernative does is it's an open source framework that lets you Define kubernative infrastructure using these
00:04:32 [W] He's general-purpose popular programming languages.
00:04:36 [W] So the CD case is really awesome.
00:04:39 [W] It lets you go from code to config defining kubernative applications and architectures using, you know, popular and familiar programming languages and it gets rid of a lot of the pain of making sure that you get all the
00:04:54 [W] Right, so you can generate that well-formatted llamo for your applications every single time because it actually you're defining your applications and code you can use code libraries and you can actually Define the format for how
00:05:03 [W] Our application within a cluster to work as a code library and then you can share that and you can update it easily without any heavy lifting so you can go and you can update. You know, how do I Define a web service at my organization
00:05:09 [W] Tomorrow you come out with okay, every web service now needs to use endpoint slices, right and you can actually Implement that as part of the library that defines how users at your company use, you know,
00:05:22 [W] Point slices, right and you can actually Implement that as part of the library that defines how users at your company use, you know, kubernative web services and you can import that all those developers can import that
00:05:55 [W] Versus and you can import that all those developers can import that into their CD case libraries and then they can easily begin using those new features and within the API without necessarily having to understand how to implement them all perfectly in the
00:06:11 [W] And having to really deeply understand the kubernative API to get started.
00:06:15 [W] I think the most important part of this project and what's really exciting for us at AWS.
00:06:20 [W] Is that CD?
00:06:22 [W] Kate's lets you run everywhere.
00:06:23 [W] So CD Cates is not a system that's designed just for AWS.
00:06:28 [W] It runs locally on your machine and it generates kubernative standard ammo that you can deploy to any kubernative cluster running anywhere and this lets you standardize across on-premises and any cloud.
00:06:41 [W] so today we support for languages with CD Kate's typescript JavaScript Python and Java and we're looking at supporting go and dotnet and many more in the future and like
00:06:56 [W] M CD cases is lets you share these best practices as libraries.
00:07:01 [W] It makes them easy to maintain and and it's easier to share than templates. So you can use CD Kate's to standardize how you define kubernative across your organization and across any environment.
00:07:12 [W] And then what's really cool is that at the end of the day what you're using is just standard kubernative.
00:07:19 [W] Zmo. So that means that today if your developers or if you are writing your application in-toto.
00:07:26 [W] In a general purpose programming language and then you're deploying that through a CD pipeline out to your cluster with the cdk4 kubernative.
00:07:34 [W] He's you can now also write your application definition and your specification for how you want that application to run in the same language and then you can deploy that out through a gitops through a CD Pipeline on to your
00:07:50 [W] You can go from having two very different flows from writing your code and getting it into production and actually unify that and use the same set of tools all the way through the process from writing your application defining how it should run and then using
00:07:57 [W] In the continuous integration to get that out onto your cluster.
00:08:01 [W] So let's take a quick look at how this actually works.
00:08:04 [W] So in the CD case you have a CD Kate's application. This represents the overall application that you're going to be running on your cluster. And then you have a series of charts and charts are different logical modules within your
00:08:20 [W] It functions and within a chart you can have one or more constructs in a construct defines one or more resources kubernative resources that you want to instantiate and Define together. So, for
00:08:33 [W] Instantiate and Define together. So for example, I may have a deployment and a pod that I'm going to Define together as one construct and then you take that and you synthesize that into a yam or a Helm chart U Cube cuddle
00:08:42 [W] You synthesize that into a yam or a Helm chart, uq cuddle apply that to your cluster or use a gitops idi tool to get that onto your cluster. And when I am L goes on to your cluster, then we instantiate the kubernative resources that says just like
00:08:57 [W] Says that says just like normal just like you would do if you had written that that yam will file yourself.
00:09:03 [W] And so let's look at the big picture.
00:09:05 [W] So the CD k8s application is effectively your source code.
00:09:10 [W] This is the source for how you want to Define your kubernative application the CD cake CLI, which is our CLI tool acts as the compiler and the CLI executes that source and synthesizes.
00:09:23 [W] Yeah melor Helm chart. That is your Assembly Language.
00:09:26 [W] Right, and then we deploy that onto the kubernetes cluster, which is your processor and actually instantiates those kubernative resources to run your application.
00:09:36 [W] And so there are three main components to the CD case.
00:09:41 [W] There's the core framework which is all the different constructs in the construct library that makes that up. We also have cd k8s + + CD Kate's plus is a high-level library that defines common
00:09:56 [W] Knative fashion.
00:09:57 [W] So CD k8s + makes it really easy to get started with CD Kate's by kind of giving you the core building blocks that you need to start building and running kubernative zap locations. And then we have the CD kit CLI and the CLI
00:10:12 [W] You to Define which version of the kubernative API that you want to be using is part of your CD Kate's app and there's some really Nifty functionality and see Kate CLI that we're going to be talking about that allows you to select which kubernative
00:10:18 [W] And then ensures that all the JAMA that you synthesize uses the correct format for that version of the kubernative API.
00:10:20 [W] It also lets you import custom resource definitions and use those as part of your CD Kate's app. And so these three components work together to allow a really nice system that lets you go from general purpose language to kubernative zmo.
00:10:35 [W] So that's a very brief introduction to the CD Kate's. Let's go ahead and jump over.
00:10:38 [W] We're going to fly Halfway Around the World to allowed and Ellie joining us from Tel Aviv, and they're going to give you a deep dive into a building and running an application using the CD Kate's. All right, go ahead and lat Ellie take it away.
00:10:53 [W] Nate so let's get going and write some code.
00:10:54 [W] I guess that's why we're here and we've got plenty of time.
00:10:57 [W] So my name is elad. I'm a principal engineer at AWS. I've been working on the CD K project for the past three years.
00:11:05 [W] And since this is a recorded session.
00:11:07 [W] I realize I figured it's going to be very boring if I'm just going to speak to myself for an hour both for me and for you and so I asked my colleague Ellie who's working with me on the cdk4 kubernative project to
00:11:20 [W] join me and we're gonna do this together.
00:11:23 [W] Let me invite him and he's gonna tell you a little bit about himself and we can get started.
00:11:32 [W] Finally, I'll add hi everyone.
00:11:35 [W] I'm glad to be here.
00:11:37 [W] So yeah, my name is Ellie.
00:11:39 [W] I work with a lot on the CD k8s and the AWS cdk4 for almost a year now excited to see this C to do this session.
00:11:51 [W] We've got a lot to cover so so let's get started Yeah, we actually play it either we sit down and play and and it just so much stuff to talk about and so many rat holes to go and so I
00:12:01 [W] Ellie to keep me honest and make sure that I pulled me out of those rat holes as much as possible so we can actually get something achieved. What what what we said we're going to do is first kind of walk through the basics to make sure that everybody's on the same page.
00:12:16 [W] You're probably used cdk4 kubernative. Some of you have never heard of it.
00:12:18 [W] And so yeah following Nate's introduction.
00:12:21 [W] I hope you have a sense of what it is, but I actually want to show you, you know hands on how it feels to use it and then we're going to just try to build a project together and you know have some cathartic cathartic experience. I think like
00:12:36 [W] Yeah, definitely.
00:12:26 [W] Alright cool. So I guess the first thing we need to do or talk about is I assume you have some kind of local setup or some kind of kubernative use cluster you have so we can play around with right?
00:12:37 [W] Yes.
00:12:38 [W] Yes.
00:12:38 [W] Yes. Yes.
00:12:39 [W] Yes.
00:12:40 [W] I'm going I'm going to assume you have kind because it's great and I use it to yeah. Yeah, I mean for local for local development.
00:12:47 [W] We love kind.
00:12:48 [W] kind. I love awesome projects really really stable.
00:12:54 [W] I think one of the things that we get asked a lot is whether CD case is just for AWS and the answer is no cdk4 kubernative is for kubernative and run on any kubernative cluster whether it's from on the cloud.
00:13:09 [W] Nate said it basically just synthesizes men llamo manifests.
00:13:11 [W] Its if you think about it, it's kind of like a compiler you write code and you executed your gets a mini Fest output.
00:13:18 [W] And then it's your choice what to do with it. You can deploy it anymore and we'll see.
00:13:22 [W] we'll see how all of that yourself. The second thing that I prepared in advance is just an empty kind of like an empty text group project. We're going to use typescript as Nate said the CD case supports multiple programming.
00:13:36 [W] Ages typescript JavaScript doc Ned Java go is coming up.
00:13:42 [W] Hopefully, yeah, and so that's going to be a very exciting thing is very exciting for the kubernative community, right?
00:13:48 [W] Yeah, definitely.
00:13:50 [W] Okay, but this is basically just a regular texture tap and what do you see here is boilerplates not boilerplate but basically kind of like a starter application that was created by a CD Kate's in it CD Cates
00:14:05 [W] Project.
00:13:59 [W] we're going to use typescript as Nate said cdk2 supports multiple programming languages typescript JavaScript dotnet. Java go is coming up hopefully, yeah, and so that's going to be a very exciting thing
00:15:24 [W] Shipped with a CLI called unsurprisingly CD case and it has a bunch of commands and one of them is in it it allows you to just initialize new projects in one of the supported languages.
00:15:35 [W] There's nothing fancy about these projects or just regular, you know, regular projects. In this case. You can see that it takes the dependency just comes with a with a few presets that will help you get started with City Cakes.
00:15:48 [W] Yeah quickly, but you can start with from an empty types of project. It's not really oh, okay and then
00:15:53 [W] The structure that you get here is kind of like what we call the Constructor tree and we'll talk more about constructs, I guess later, but the mental model is a tree.
00:16:07 [W] Okay. So think think there's a root and the root of the tree is the app and then within the app, you've got charts aren't any number of charts. And the reason is that every chart synthesizes into its own men if sou can decide what you want to do with this
00:16:22 [W] Choose a single charge and put all your resources in one minute fast. You can split them up. You can create instant different versions of them for development or production or whatever, right?
00:16:32 [W] But you can pull in and the way the tree structure is by basically passing in the parent as the first parameter of of the construct and so in this case, I create a charter that pass in the app and you'll see this repeat and repeat itself every
00:16:47 [W] You know throughout the programming model and I say it says Define resources here. So let's define resources should start with you start defining which resource so I know that I want
00:16:51 [W] this is which resource so I know that I want to talk about the the kind of very important aspect of CD cakes and you know software engineering in general, which is this notion of layering and
00:17:03 [W] Notion of layering and I want us to show to see all the different types of layering the city Kate's silicates offers and let's start by using like the most basic layer to Define objects and let's just start with like a
00:17:17 [W] Mac right.
00:17:18 [W] That's something that's super super simple to configure.
00:17:20 [W] So let's let's see how you do that with like the most fundamental unit in City Cakes.
00:17:26 [W] Okay.
00:17:26 [W] So if you think about it again, if you look at what the city kids is supposed to generator to synthesize supposed to generate manifests and so the benefits are structured as a collection of API objects, and so
00:17:42 [W] Sighs supposed to generate manifest answer the benefits are structured as a collection of API objects.
00:17:46 [W] And so to that end CD case is also bundled with a class called API object.
00:17:53 [W] It's also a construct so it needs to bind to the tree.
00:17:57 [W] The first parameter is the scope and as a rule of thumb on I'm always going to pass in this because I want to add this construct to the scope in which I'm actually defining it so I know exactly what's going on within this.
00:18:09 [W] Code want to keep the locality of yours.
00:18:12 [W] I want yeah, I want this to be local to my chart in that sense.
00:18:16 [W] It will see what that means maybe later and then I get a name for my AP. I object I can call it a conflict that let's say and if I look if I asked the IDE to help me
00:18:31 [W] To help me that I see that I need API version and I need to kind because both of those are required for all API objects.
00:18:38 [W] Yeah, you know wherever they are.
00:18:41 [W] So I'm going to pass in this so CD case already enforces these kind of requirements, right? You can configure any API object without an API version or kind like stuff Coral right? But then as you can see, I
00:18:56 [W] Up here because API objects are typeless right? Like the library doesn't know that an API. This API object is it is a config map.
00:19:06 [W] Yeah, and sometimes you have like spec. But sometimes you don't for example config map doesn't have a spec property, right? It just has a data right?
00:19:16 [W] so I can be whatever whatever I want here.
00:19:19 [W] I like yeah data and I can put here zoom bar and it will take it will just take whatever I
00:19:26 [W] I put here whether it's part of the scheme are not part of the schema.
00:19:29 [W] And and then what do I do with this?
00:19:32 [W] How do I move on?
00:19:34 [W] What's the next step?
00:19:35 [W] Okay.
00:19:35 [W] I got my code right written.
00:19:37 [W] So, let's see.
00:19:38 [W] How do how does this manifest actually get created? Right? This is supposed to be translated to llamo eventually, right?
00:19:44 [W] And so the way it works is basically just run my application right this application. You see the last line in my plication since and you'll see this also come, you know, repeating another CD case like the kubernative.
00:19:56 [W] CD key also the terraform CD care the AWS cdk and so if I run this application just to make a regular node process, right?
00:20:05 [W] Yeah, just as a regular in this case.
00:20:06 [W] It's a typescript node.
00:20:07 [W] But yeah, just as a regular note processors. No magic right like no no magic tricks.
00:20:13 [W] You'll see that it created the discs directory and I've got my manifest here with my config map.
00:20:21 [W] Yeah.
00:20:22 [W] This directory and I've got my manifest here with my config map.
00:20:27 [W] Yeah. Well do two things are bad or not better weird here first.
00:20:32 [W] It's invalid, right? There's this this this is where our thing is, not really and when we try to deploy it it's going to fail and the other thing is that we see that the it created a name for us for the config man.
00:20:44 [W] Yeah, and and you didn't specify they didn't specify then it wasn't required which is actually weird because in kubernative
00:20:51 [W] Nettie's names are required for for resources and but this is actually unique thing about cdk4 kubernative sand and a very key ingredient of cdk.
00:21:03 [W] I didn't have to specify a name because cdk can allocate a name for this object based on where it is in the construct tree.
00:21:10 [W] And so if you look at this then you can actually you can actually identify the path right? Like I say. Hello. That's the name of my application.
00:21:17 [W] Cube con. Sorry. Hello cupid is any of my staff are like a chart?
00:21:22 [W] And config map is the name of my construct and then we append this hash to ensure that the the whole thing is unique across the entire application.
00:21:31 [W] Yeah. This is what these constructs programming model comes into play.
00:21:37 [W] that the reason we need this scope and name for every construct is exactly in order to be able to allocate these stable names for resources that are generated by the Yeah that are generated during execution.
00:21:51 [W] Entire application.
00:21:53 [W] Yeah, this is what these constructs programming model comes into play.
00:21:59 [W] The the reason we need this scope and name for every construct is exactly in order to be able to allocate these stable names for resources that are generated by the Yeah that are generated during execution and an
00:22:36 [W] You know obviously in putting a specific name and then kind of repeating itself repeating myself around the the llamo.
00:22:44 [W] So I do need some kind of programmatic access to this name if it is generated for me so that I can pass it on to other objects.
00:22:53 [W] Exactly. And so like any object in object oriented programming constructs also have an API that you can access after the object is created and API objects have
00:23:06 [W] A pretty minimal API right like you can access some of those properties. We actually plan to expand that a little bit in in our roadmap, but the interesting one is name and you can see here.
00:23:16 [W] This is the name specify either specified explicitly.
00:23:19 [W] We emitted at a name you can you can still specify names and explicitly if you wanted.
00:23:25 [W] Yeah, but if you didn't then you can actually just use this as a token as a representation of the actual name.
00:23:31 [W] I'll just give you you know, just to show you an example of what this can do.
00:23:36 [W] Let's create a another config map at that references the previous one.
00:23:41 [W] Okay, so let's call it.
00:23:44 [W] ref of Jordan
00:23:47 [W] Yeah, and this is this is great because this is like it seems so simple but you can't really do it inside a manifest, right?
00:23:54 [W] At one end and the other part is like there's strong binding now between those two things that doesn't exist here, right? Like here. It's actually very loose. You see that, you know, you see this name actually repeating you see this name actually over here
00:24:09 [W] The beauty of this is that if this research goes away then my compiler will yell at me.
00:24:10 [W] It'll say hey, I'm just doesn't exist.
00:24:13 [W] What are you referencing here?
00:24:14 [W] So we convert these this loose coupling that's very prevalent in configuration files and benefit and kubernative.
00:24:23 [W] He's manifest will see that quite a lot in CD case with strong binding strong coupling between things that represent logical connections and the compilers can help us enforce those.
00:24:34 [W] Action, which is very powerful.
00:24:36 [W] Alright cool. So this is this is great.
00:24:39 [W] But I know I know like what we I mentioned that we have multiple layers. So I want to talk about the next layer of API that CD Kate's can offer and this is the any in API that goes beyond, you know, just the requirement of API
00:24:54 [W] Actually lets you interact with the fully strong type API for all of the kubernative Za core object, right?
00:25:00 [W] So instead of creating an API object, you can actually create a specific resource.
00:25:06 [W] So let's let's see how he do that.
00:25:08 [W] Yeah. So the beauty of the kubernative ecosystem is that apis are well-typed.
00:25:16 [W] They're all schematize kubernative itself publishes an API and openfaas.
00:25:21 [W] A API specification for all of the kubernative say Pi objects custom research definitions or schematize through Jason schemas.
00:25:29 [W] And so what we could do is we could basically read those schemas and automatically generate classes that represents each API object and based on these schemas. They offer rich and object-oriented they offer, you know, strongly typed
00:25:44 [W] Freak for accessing these classes.
00:25:36 [W] Yeah, definitely.
00:25:37 [W] Like I can see myself going to these schemas and kind of and just manually writing the code that that's need that needed. But we have a tool that does that right that generates the the code based on this specification.
00:25:51 [W] Yeah. And so this tool is called CD Kate's import and it basically accepts a specification something to import and it supports either importing the kubernative API from the opening period
00:26:04 [W] Suffocation or kubernative CR D's and as you all know cri-o as are the standard way to extend kubernative. And so any any cre that you exist in the kubernative ecosystem can be automatically imported
00:26:20 [W] It's application and use through strongly typed apis, which is very powerful. Like we've seen people do really beautiful things with this and you get a very nice development expensive L / experience for working with all of the kubernative AP ecosystem.
00:26:26 [W] Not just a kubernative safety eyes in this case.
00:26:29 [W] Let's start with the kubernative API the core API just to give you a sense of what that looks like.
00:26:33 [W] And so I'm just going to do k8s and that's going to be importing the k8s kubernative apis with the default version. You can specify nobl9
00:26:42 [W] any version and it'll just use that version and so what import is doing?
00:26:47 [W] It creates the directory called import it's becoming part of your project. Now. It's just that it's emitted. This types would file in it. And if you're using Java and will be Java classes or python or whatever language you use.
00:27:01 [W] think that's very cool and wait wait until you see how we use it.
00:27:04 [W] it. And so we're going to do import this into my my application. I'm going to delete this.
00:27:13 [W] And now I get classes for all kubernative kind. So basically there's a one-to-one mapping between kubernative skeins and constructs now and let's let's do we do config map again or something else?
00:27:28 [W] There's something more interesting Let's do let's try to create a deployment and see see see how that feels.
00:27:25 [W] So again see you see the constructs signature which is, you know, binding into the tree.
00:27:30 [W] Let's call it depth 1 and let's see what it means to define the deployment.
00:27:37 [W] So again, I see missing selector and template which is the required to required Fields. But now if I actually asked my ID to help you see that it's not just saying hey.
00:27:49 [W] I want to know a spec it says exactly what is this on that spectrum and so I can start, you know, using the ID to help me with this thing.
00:27:59 [W] Okay. So this needs containers again.
00:28:05 [W] This is courtesy of the of the specification itself, right the Json schema that kubernative publishes.
00:28:11 [W] Yeah and anything and we actually also seen a few things that there that are untyped.
00:28:20 [W] And obviously those things will not have strong tags. But if it has a strong type in the specification in the open API specification that it's okay and it's still needs it still needs a selector.
00:28:33 [W] Yeah, this is this is this thing I like I remember, you know doing kubernative.
00:28:38 [W] He's manually with the animal and actually it's always kind of bothered me a little bit.
00:28:45 [W] Anything and we're actually also seen a few things that there that are untyped and obviously those things will not have strong tax.
00:28:40 [W] But if it has a strong type in the specification and they open API specification that it's okay and it still needs it still needs a selector.
00:28:51 [W] Yeah, this is this is this thing I like I remember, you know doing kubernative.
00:28:55 [W] He's manually with the ammo and actually it's always kind of bothered me a little bit.
00:29:03 [W] Why do I have to keep repeating this definition?
00:29:07 [W] It feels it feels like it should be implicit you mean the labels and the match labels.
00:29:11 [W] Yeah, because what you're essentially doing here is you're attaching labels to PODS of this deployment and you're saying to the deployment a please
00:29:20 [W] Let these pods and and that feels like the normal thing you would think you're creating those pods for me.
00:29:28 [W] Of course.
00:29:29 [W] I want you to select these.
00:29:30 [W] Yeah, obviously you could do some magic tricks with this glooscap whole couple of yeah. There are use cases for it.
00:29:38 [W] You are use cases like, you know gradual deployments and waited whatever right? Like there's a lot of interesting stuff that you could do with this, but I think you know the
00:29:50 [W] Common use cases.
00:29:51 [W] Yeah, I just want I just want to deploy these containers.
00:29:55 [W] That's kind of like basically just one of the blue containers.
00:29:58 [W] Yeah, right, right, but this is you know, this is how the kubenetes API looks like an the L1 in the layer 1 layer classes constructs were completely we completely don't know about that right like as a because all of
00:30:13 [W] In the L1 in the layer 1 layer classes constructs, we're completely we completely don't know about that right like as a because all of this is generated from the schema.
00:30:26 [W] And so we can just represent this team of through strong typing which again is extremely valuable.
00:30:31 [W] Right? Like there are many IDE extensions and tools and schema validations and linters that people use to make sure that your benefits are correct, but
00:30:43 [W] we actually have all this all these capabilities in you know, strongly typed languages and so it's very easy for us to just lift this experience into those into the unto these IDs.
00:30:55 [W] Okay. So let's debate and stuff.
00:30:57 [W] You know, what a lot.
00:30:57 [W] I'm going to play the time card here.
00:30:59 [W] Okay.
00:30:59 [W] We need to we need to speed the speed things up a little bit.
00:31:02 [W] let's just set up the point. Let's just see like that. Let's take it to the next level and deploy the the next kind of of API. So the last layering in this hole
00:31:13 [W] Variance is something we call CD k8s + and silicates plus is basically a library that we've end as part of the city k8s tool chain, and it provides these higher level apis for the same objects
00:31:29 [W] He's object. So if you take a look at this at this API, we can see a yeah, there's there's there's a bunch of resources.
00:31:35 [W] They're the same as the prior level ones, but they offer slightly different API. So let's see how we can rewrite this deployment using these apis.
00:31:45 [W] Okay, so I've got the ployment here.
00:31:49 [W] And now I actually I can use you.
00:31:52 [W] So again, let's I'll just be kept for a second and then we can I'll show you exactly how to implement this using the what we call l2s level two apis and and those level two apis as you saw earlier the kubernative the CD case
00:32:08 [W] I'll just be kept for a second and then we can I'll show you exactly how to implement this using the what we call l2s level two apis and those level two apis as you saw earlier the kubernative the CD case bus
00:32:13 [W] Is the same semantics as the core kubernetes resources?
00:32:17 [W] we're not inventing a new world in a sense.
00:32:19 [W] We're just offering a higher level set of apis not a higher level set of abstractions.
00:32:24 [W] If that makes sense, right like the distinguishing between elevating the API abstraction versus elevating the mental model, right and we'll actually see what that means in the future. But for this in this case,
00:32:40 [W] Have deployment I still need to understand deployment and I can actually specify my deployment specification is here.
00:32:48 [W] I don't need there's no concept of a spec and I met you like spec is actually, you know, some kind of a mechanical detail of how kubernative manifests are structured, but it doesn't we don't need that in at that layer so I can just specify containers. For example,
00:33:04 [W] Perspective that's all I want to do.
00:32:58 [W] Like I want to I want to tell the deployment which container to run right? And then the other thing that I have here is actual mutation methods because in the cdk the way we kind of think about it is that you can
00:33:13 [W] Read as much as you want until you synthesize and when you synthesize everything becomes immutable and then goes into the immutable world of desired State based deployment.
00:33:22 [W] But as long as you're inside the CD K application in the execution of the application, you can reach out to objects and change them and and so it gives you a very very powerful programming model and you can do things like, you know passing over the deployment to
00:33:37 [W] Some library that will add a sidecar container, right? And that's very powerful.
00:33:41 [W] Yeah. And so in that case I can just call at container. Then I can create a container object. Sorry container object and specify image, which is required.
00:33:56 [W] As just gig and I'm just going to use the same command and I don't even have a success specified the name, although it's required over there because yeah, it was some default that's pretty sane. Right like call it main because that's the main main container.
00:34:12 [W] And specify image which is required.
00:34:17 [W] As just take and I'm just going to use the same command and I don't even have a success specified the name, although it's required over there because yeah some default that's pretty sane. Right like call it main because that's the main main container
00:35:10 [W] Okay, so now I've got two deployments and that's it dry. Like do I need like the labels and so no because well it didn't it didn't require previously when we use the the the lower level apis, right? We had to specify a selector and we and we we specify a selector
00:35:25 [W] Previously when we use the the the lower level apis, right? We had to specify a selector and we and we we specify a selector then we have to specify labels but here it doesn't say that we need to so let's assume we don't let us assume that something happens.
00:35:39 [W] .
00:35:39 [W] And so we're executing again.
00:35:45 [W] Yeah, now it's now.
00:35:47 [W] Let's see what what our manifest actually looks like.
00:35:49 [W] Okay. So this is my plus you can you see that it actually allocated a label for me.
00:35:55 [W] Just pretty nifty.
00:35:56 [W] I didn't have to do it fairly just it has the ability to allocate stable unique names, which is coming from the Constructor you that capability the concert Cree offers and and so I could basically just described my
00:36:11 [W] Looks like okay.
00:36:13 [W] So this is my plus you can you see that it actually allocated a label for me.
00:36:18 [W] Just pretty nifty.
00:36:20 [W] I didn't have to do it really just it has the ability to allocate stable unique names, which is coming from the Constructor you that capability the concert Cree offers and and so I could basically just described my
00:36:49 [W] My intent is I want to deployment I wanted to play a single container.
00:36:53 [W] That's it done, right?
00:36:55 [W] Yeah. Okay.
00:36:57 [W] Yeah. Awesome.
00:36:59 [W] Should we deploy this?
00:37:00 [W] I don't know.
00:37:00 [W] You're you seem like you're in a hurry What's the timing? Like? Yeah, let's let's let's let's deploy this and start and end in the meantime.
00:37:09 [W] Let's also add the add the prune prune labels to our chart which you can calculate about. So for those of you are not familiar with Pro labels.
00:37:18 [W] When you deploy many pests to kubernative.
00:37:23 [W] Kubevirt Q cuddle doesn't know which resources you want to remove right because those men if it's only contain the desired state in the desired say contains only the stuff that you want to exist.
00:37:33 [W] And so Prim labels are a way to basically tell Cube Cottle.
00:37:37 [W] Hey, this is what I want to deploy and everything else that's labeled with some legal.
00:37:43 [W] That's not in that list should be erased because it was basically here from the previous iteration in the sense.
00:37:49 [W] Yeah. It's no desire to take the point of yeah.
00:37:52 [W] It fits more nicely into this desired State workflow where you remove something from your manifest you're essentially saying I want to actually delete this from the cluster.
00:38:02 [W] Okay.
00:38:03 [W] Let's see.
00:38:03 [W] I gotta see that a lot of right? Okay logs.
00:38:09 [W] Hmm, no logs.
00:38:12 [W] Oh because I did - yeah.
00:38:14 [W] Yeah sure.
00:38:15 [W] Changing right and redeploying.
00:38:18 [W] So this is kind of like my inner inner loop cycle basically change my code synthesize it deploy. Yeah, then hopefully now I've got some stuff that's
00:38:31 [W] Yay.
00:38:33 [W] All right. Cool labeled, right. I'll let that let's add the prunes.
00:38:36 [W] Let's get rid of this deployment.
00:38:40 [W] Oh, yeah, let's let's add the privilege and yeah, and then we'll okay. So the way prove labels work is basically I'm just going to add to this app. Like I'm going to say prune and then again, I have to specify a label that that's you know, Splat, you know, basically consistent across all the
00:38:55 [W] Sources, so I need to actually label all my resources with the same label site. So the screen can work I can cause I'll just call it prune and we'll just make up some name boop-boo-boo-boop Rune label.
00:39:10 [W] And but now I actually need to label those things.
00:39:13 [W] Yeah, the nice thing again because this is a programming language and we can do things like traversing the tree and mutated during runtime during synthesis synthesis. Then CD case offers this ability to
00:39:28 [W] Specify labels at this ethnic at the chart level. I can also name space at the chart level.
00:39:35 [W] And it's going through and it's going to apply the labels to all resources inside that chart to all API resources inside that chart and inside all of the custody of the child constructs within that chart. So it's a very tonight like I
00:39:50 [W] I wouldn't imagine how how to do it. Like otherwise if I have, you know, coffee Thousand resources now and I need to apply prune labels.
00:39:58 [W] How do I do that?
00:39:59 [W] I don't know.
00:40:00 [W] It's not fun.
00:40:02 [W] That's for sure.
00:40:02 [W] So now all I have to do is basically say prune boo-boo.
00:40:09 [W] And before before I run this, let me let's let's look dad. I gotta just send us as first just to see how it looks.
00:40:16 [W] I'm sorry.
00:40:17 [W] I still I don't trust this thing as much and it's yet, but you can see here that I have this pretty label here and I've got this Pearl label here, which is great. And so a now I do.
00:40:30 [W] Okay, so I'm just going to do this like do it like this and so it's going to basically configure all my resources to include my label and I
00:40:39 [W] Even do this.
00:40:42 [W] So it basically applied all like the prune label to all my resources. And now now we can actually get rid of the deployment here.
00:40:50 [W] Yeah, let's get rid of this one because it's too long and this one this again.
00:40:57 [W] And it should it should prune one of the deployments, of course.
00:41:04 [W] I think you can also add this command to your to your yarn.
00:41:08 [W] Yeah, just going to add this command.
00:41:14 [W] Here right as a Sprint.
00:41:17 [W] Pull it deploy.
00:41:21 [W] And then I can do yarn the point.
00:41:25 [W] Oh, so that's our that's our iteration basically.
00:41:29 [W] All right, cool. The thing that I'm going to do to make my life even easier I'm going to be this perfect.
00:41:37 [W] Alright, so now we have we have that. We have our workflow. We have kind of all the layering figured out and now we're going to start building our application and this time we're actually going to create an abstraction not just like a an API
00:41:52 [W] Extraction, but actually a different mental model, right we want to now we want to create something for our users and our users are developers who don't necessarily know what deployments are or what services are they just want to write their code and we want to provide
00:42:07 [W] Some kind of platform for them to do it.
00:42:09 [W] So I think like one of the most you know simplest yet powerful kind of use cases to to actually deploy live applications is something like a like a Gateway like an API Gateway where you can specify, you know, like HTTP
00:42:24 [W] Routes HDTV paths that are backed by dr.
00:42:28 [W] Applications that the user rights.
00:42:31 [W] So let's let's let's try it. Let's try to implement like the simple simple counter counter application right where you have / counter to to return the current value of the counter and you can also do posts on the counter to increment the counter.
00:42:45 [W] Okay. I'm not a fool. I'm not sure I fully understand but I guess let's start with the API and maybe that'll help me understand exactly. What tufin.
00:42:53 [W] You what you want, so I cleaned this up a little bit while you were describing.
00:42:59 [W] Maybe that's why I didn't alright cool. So let's start like for me. I they pee I want to provide my users right? Yeah is I want my users to write to instantiate some kind of
00:43:14 [W] Let's go to router.
00:43:15 [W] All right, let's call it an API router.
00:43:17 [W] I'm just
00:43:20 [W] router Router just router and then construct so it has to look like this.
00:43:29 [W] And then what is dull like install applications on the router basically?
00:43:34 [W] Yeah, basically map or route different paths different HTTP paths to 2002 different handlers.
00:43:41 [W] So we're going to do owner asked last pounder, right?
00:43:45 [W] Yeah, let's do / counter and this has to somehow map or you know be implemented by some dark replication.
00:43:53 [W] I don't know.
00:43:53 [W] What is it, but it's darker.
00:43:55 [W] Okay.
00:43:55 [W] All right, so I want to point to a director with a Docker file that I can buildpacks.
00:43:59 [W] And just have it run my my peso letting I love I love I can do this.
00:44:05 [W] Let's call it round-trip counter counter app and I'll show you that I've written these node.js demos like many times.
00:44:15 [W] No doubt Pine-Sol. You said counter.
00:44:19 [W] Let me see so something like this and then add dot to app and then run user bin n
00:44:29 [W] node
00:44:31 [W] Every time every time I see you write this I'm Amazed.
00:44:38 [W] And then in JavaScript is going to be JavaScript and then simple HTTP server.
00:44:51 [W] Yeah.
00:44:53 [W] And we have a counter here starts with G 0. I guess serverless Anon 8080 and then if it's sorry if it's a
00:45:09 [W] Gets method.
00:45:11 [W] I guess we can just you know, just to incriminate, you know, like just print the counter response, right?
00:45:19 [W] Counter equals counter plus plus counter.
00:45:23 [W] Yeah.
00:45:23 [W] Sure, right.
00:45:25 [W] Yeah, just like on any good enough.
00:45:27 [W] Yeah good enough, and I know you always forget to handle Sig terms when you write Docker business.
00:45:42 [W] handled
00:45:45 [W] Should we call the sitter?
00:45:47 [W] Do you think it's going to work?
00:45:48 [W] Should we test it flow Khalifa before?
00:45:50 [W] Yeah, let's just build it quick way to lose right counter.
00:45:59 [W] cool
00:46:10 [W] Yay. All right signal handling.
00:46:15 [W] No singing second. Yes, and I'm going to also add a little log here.
00:46:25 [W] Then I'll know that this thing is actually working and then knocker kill.
00:46:30 [W] All right.
00:46:32 [W] Yes.
00:46:37 [W] Yeah, this is the second handling.
00:46:40 [W] Is that okay?
00:46:40 [W] Great. Okay.
00:46:42 [W] Alright. So now I need to I want to basically point to this directory right so counter like that would be the ideal API, right? Because I don't that that would be the ideal.
00:46:53 [W] Yeah.
00:46:53 [W] Well, let's try to make this work.
00:46:54 [W] Okay, so I guess API driven design right.
00:47:00 [W] I'm going to create read your router dot to yes.
00:47:06 [W] And as we said, it's personal constructs creating concert is actually extremely easy.
00:47:11 [W] You just create something that extends the concert base class and then it has to excel openly. Yeah, that's it.
00:47:20 [W] This is a construct to see from that perspective.
00:47:22 [W] We can now import it into my app. Now I need to include and you know that types which has you could do this.
00:47:31 [W] Are you familiar with this?
00:47:32 [W] This is your method and I just dumped over here.
00:47:37 [W] And declares a method that supposedly this is the path, right?
00:47:44 [W] Yeah, it should be the bath and this should be the directory although yeah.
00:47:49 [W] Okay, very cool.
00:47:51 [W] Okay. So so this is like in from the users perspective but under this is that one thing that's it.
00:47:58 [W] That should be that should be the the implementation or you know, the invocation as far as the user is concerned. So for the implementation I know will
00:48:07 [W] Probably need to use an Ingress because Ingress has this capability of routing specific HTTP paths to different Services right to different kubernative services.
00:48:16 [W] So let's let's start with you know, importing or you know, using the Ingress construct for of CD k8s + and see what kind of API it has to offer us.
00:48:27 [W] Okay. So basically every router would have an Ingress resource.
00:48:31 [W] I also oh yeah English controller installed in my kind like nginx.
00:48:34 [W] Yeah standard stuff, so
00:48:36 [W] So basically I can use an increase in his supposedly should work. Let's see the API behind behind the English.
00:48:43 [W] Yeah, so we're going to use the add rule there's a bunch of other stuff here. But but the add rule API is basically saying give me a path and HTTP URI, right and and the and the Handler of that path
00:48:59 [W] Is something that's called an Ingress back end?
00:49:01 [W] Okay, essentially a backhand is just a kubernative service.
00:49:05 [W] Hmm But I need to call this from here.
00:49:07 [W] So from this I need to basically store this somewhere as a local.
00:49:14 [W] variable as your local member
00:49:17 [W] Yeah, and this is nice like this is the the post instantiation apis. You can imagine passing this router two different components of your code.
00:49:25 [W] And each of them installing its own kind of path.
00:49:28 [W] Oh cool.
00:49:29 [W] So it's like they like the Ed containers of the we so yeah.
00:49:32 [W] This is the path is here and beckons so this is yeah, let's get me so a few of a few of the few of like our patterns is to do like the from methods right from F5.
00:49:47 [W] Is when you when I went up resources configured with something that's called the union type where you can pass in a few properties, but you can only use one of them right there are mutually exclusive every time you see this kind of this pattern. You'll see
00:50:02 [W] With something that's called the union type where you can pass in a few properties, but you can only use one of them right?
00:50:09 [W] They're mutually exclusive every time you see this kind of this pattern. You'll see in the cdk2. You'll see the from pattern.
00:50:15 [W] So an Ingress back end we can create it from a service.
00:50:20 [W] So let's try let's do it. It's like a static method that returns an instant is basically a factory a factory method. Yeah. So here I basically need a service to get that obviously will obviously need
00:50:32 [W] The service no, I need to create a service. But with the service is is front is joint, right? Exactly employment first write the service serves the deployment right?
00:50:46 [W] You don't create a service just like that.
00:50:48 [W] that, you know how to disappointment already.
00:50:51 [W] Let's create a deployment.
00:50:55 [W] Then the toilet dot at container you container.
00:51:02 [W] Oh wait, but I need to so what do we do here?
00:51:07 [W] So we actually need to build right?
00:51:10 [W] We need to build the directory and we need to extract the specific digest, you know of the of that specific build and use this as our image URL, right?
00:51:20 [W] So yeah, I actually published this. I actually published this Library a few days ago that does exactly this as luck would have it right.
00:51:32 [W] Show you it's pretty it's pretty nifty.
00:51:34 [W] It's called so probably s*** 2 N PM.
00:51:37 [W] And it's called cdk its image and I'll show you what it how it works.
00:51:47 [W] It's an image construct which takes care of building and pushing Docker images that can be used in CD Kate's application.
00:51:53 [W] And so basically the way it works you specify a directory a local directory.
00:51:58 [W] You can also specify a registry and to which you want to push the image. And now I am I mentioned we have like a local registry on exactly my setup.
00:52:08 [W] course, and then you can you can create a deployment and specify that image you the images you arrive through dot URI, so it basically gives you
00:52:17 [W] You're a the exact you array of that image that it's built. So it's the nice thing about this is that you don't have to separate the image building and publish at pushing flows with your synthesis
00:52:32 [W] Common and in the communities world image building and pushing it's done together with you know, building your application because this is basically the build stage of your of The City Gate.
00:52:42 [W] Phoebe Cates is a build tool right?
00:52:44 [W] So it makes sense for the build tool to actually do this building exactly, but you could do anything you want right? So you can plug in any string you want you could use ci/cd stems to publish your images and wire this information into your
00:52:59 [W] Pass that information into your container, but this is it's pretty rudimentary. We can obviously evolve it and make it more explicitly created but it will it's definitely going to serve the purposes of this demo. So right that is right
00:53:04 [W] Is just by installing them right like any other library that you'd install yarn Ed and the type 3 of JavaScript world or npm install in so cdks image.
00:53:15 [W] And I'm going to ask you to go a little bit faster now. Okay, so I need the image.
00:53:21 [W] Okay, let's do this image equals New Image.
00:53:26 [W] See it brought it over from CD Cates and then I'm going to do this and here it would be imaged here and registry would be this localhost thousand and here I'm going to just put image URL
00:53:43 [W] And now how do I get the service from the like do I need to create a service now?
00:53:47 [W] Yeah, so we have to create a service right because an Ingress back end is a service but actually if you look at the deployment and the API on the deployment construct you'll notice something that is very familiar to kubernative users.
00:54:00 [W] And that's the expose method and it's essentially mimicking the behavior of Kube cuddle exposed.
00:54:06 [W] right where you can pass in a deployment and the expose will actually wire and create.
00:54:12 [W] A service that collects that deployment and routes to it. Okay, and you can actually get the service by just storing the return value of this.
00:54:22 [W] I think I need to specify the out the container Port here, right?
00:54:26 [W] Up the out the external port in the internal Porter.
00:54:27 [W] Is it all done formed and we'll see it in the Manifest it's done for you.
00:54:31 [W] Of course, we're talking about it. But but yeah, this is so you can just choose any any exposed Port you want.
00:54:38 [W] This is like an external Port that you want your users to access your service. Basically the service for the disservice exposure.
00:54:47 [W] you want to access the service then this is the port you're going to use. We're going to be using Ingress, right? So we have another layer of in-toto.
00:54:53 [W] Direction but yeah, okay.
00:54:56 [W] This is compiling now I get a service I can pass it over to the back end and then edit here's here's a tenant.
00:55:03 [W] Here's a tenant of the CD case if it's compiling it should work.
00:55:06 [W] Okay, let's let's see should I do d?
00:55:15 [W] So now it's actually build our image cool building in pushing.
00:55:21 [W] very nice. And this is failing because
00:55:27 [W] Prieto now
00:55:29 [W] nginx denied in request hose and puff counter request post
00:55:36 [W] Do we have something?
00:55:43 [W] It's already the find an Ingress.
00:55:45 [W] Oh that maybe it's from a different.
00:55:47 [W] very nice, and this is failing because
00:55:37 [W] Prieto now
00:55:39 [W] nginx denied in request hose and tough counter request post
00:55:46 [W] Do we have something?
00:55:53 [W] It's already the find an Ingress.
00:55:55 [W] Oh that maybe it's from a different.
00:55:57 [W] Let me let me see if I we don't we have some previous thing.
00:56:05 [W] Yeah.
00:56:09 [W] Oh we didn't die.
00:56:12 [W] Okay.
00:56:20 [W] Again, just some leftovers from the previous test surprisingly same name of the that's the thing right?
00:56:30 [W] It's table names.
00:56:31 [W] So it's always going to be the same thing.
00:56:32 [W] Okay.
00:56:33 [W] this looks like it worked.
00:56:37 [W] I've got my
00:56:39 [W] router deployed here
00:56:44 [W] Should I just curl curl? Yeah, let's just curly.
00:56:49 [W] Yay.
00:56:51 [W] Okay, cool.
00:56:52 [W] This is pretty cool.
00:56:53 [W] This is this is the experience we want so now we kept just a quick recap.
00:57:00 [W] Okay, where the emphasize a few things?
00:57:02 [W] Let me take this so I think like the the the interesting discussion here is about the mental model. What you described earlier as far as the user users of this router are
00:57:17 [W] About Ingress.
00:57:18 [W] They don't know about deployments. They don't know about this image thing.
00:57:22 [W] All they know is that they put their code under counter app and they've basically mounted in or installed it on to this route and that's it.
00:57:33 [W] That's it.
00:57:33 [W] And that's and that's like this is the the next level of abstraction right now.
00:57:37 [W] You can publish this as an npm library or anything and users can use it without having to know you know, what what
00:57:46 [W] this is our or services or deployment. So it's a completely different kind of mental model.
00:57:53 [W] Yeah.
00:57:53 [W] it's a different Universe.
00:57:55 [W] It's not the kubernative universes now the router universe and it's a universe.
00:57:59 [W] that's more familiar with our regular runtime code right applicative code.
00:58:04 [W] This is how you would create like an express application or a Django application.
00:58:09 [W] Its yeah, right pretty common mental model. Okay, but this is this is still a bit of a choice. I feel like
00:58:17 [W] That's most gets one more than one replica of something and then you know stuff like that.
00:58:24 [W] Let's let's let's do some productization for this for this little router. So the first thing we want to do is actually add like a Readiness program right most most pods need a way to to make sure that they're up and running
00:58:39 [W] Okay, but this is this is still a bit of a choice.
00:58:28 [W] I feel like I need let's most guess that's one more than one replica of something and then you know stuff like that.
00:58:36 [W] Let's let's let's do some productization for this for this little Rod.
00:58:41 [W] Oh, so the first thing we want to do is actually add like a Readiness program right most most pods need a way to to make sure that they're up and running before kubernative can and traffic to them right we know
00:58:54 [W] It might might my users don't really care about that because they're just like serving HTTP traffic and so as far as they're concerned, you know, exactly can hit that end point. It should work. Right like it's probably fine. We can think about like maybe exposing something later on but
00:59:09 [W] You know exactly you can hit that end point. It should work. Right like it's probably fine. We can think about like maybe exposing something later on but definitely like for the common thing simplest thing. You can just see TP gets
00:59:24 [W] What API in the container has I think the Readiness probe should be on the container.
00:59:29 [W] I really do. Okay. So the term is when ready to container is ready and it accepts a probe class, which is I think the another Union like thing.
00:59:36 [W] Yeah, robo-dog film.
00:59:40 [W] Oh you types here, right so you can either do HTTP or a command so that way and that's it and it knows the port because just set it right. So there's no reason that's pretty exactly
00:59:54 [W] Just a line of above that used to be specified now. If I deploy this I should get ready this probes and you see that the user didn't change anything.
01:00:02 [W] So think you know think this Library the slide router Library added Readiness program Readiness probes released a name.
01:00:10 [W] The user is just pick that up and now they have Readiness probed across my entire company, right? Like nobody had to do anything pretty neat.
01:00:20 [W] I want to see the Readiness print if you don't mind part of my deployment, right?
01:00:26 [W] So it's just being the Pod.
01:00:29 [W] Yeah, also.
01:00:30 [W] Oh, I see the other one terminal.
01:00:33 [W] pretty cool.
01:00:38 [W] odd
01:00:41 [W] Okay Readiness.
01:00:44 [W] It should be get slushy.
01:00:45 [W] Oh, that's pretty young.
01:00:47 [W] Okay, cool.
01:00:48 [W] That's really yummy.
01:00:47 [W] Okay, cool.
01:00:49 [W] What else right so what else we need to replicas?
01:00:53 [W] Let's do a multiple replicas.
01:00:55 [W] Yeah.
01:00:55 [W] So if we're going to do replicas we're going to have to change our implementation a bit because we're doing you know, this knative naive kind of in memory counter. So what let's let's let's Implement a persistent counter like with redis for example.
01:01:10 [W] Yeah. I actually think we already have that problem because we've just
01:01:14 [W] You know killed our previous calendar, right?
01:01:17 [W] Yeah reset so Four Sisters, obviously we can do a counter without like persisting. So you want to add a redis.
01:01:25 [W] Let's I want to first like, you know deploy multiple.
01:01:28 [W] Let's say we just deployed three replicas of every time let's keep it simple right?
01:01:33 [W] So I'm just going to go to my router and replicas are here right part of the yeah, and now it's great.
01:01:43 [W] and if I deployed this
01:01:48 [W] You know what?
01:01:48 [W] I mean?
01:01:49 [W] And at one tiny tiny thing here, yeah.
01:01:56 [W] Now we're getting real.
01:02:02 [W] Yeah, it's just so we can you know differentiate between and see and see the route the traffic routing to different part. Yeah, I mean
01:02:10 [W] we got to do this.
01:02:12 [W] Okay, but I can already see the to the few instances, right?
01:02:17 [W] The counters are jumping around which is pretty cute.
01:02:20 [W] Yeah.
01:02:23 [W] Now we're getting real.
01:02:29 [W] Yeah, it's just so we can you know differentiate between and see and see the route the traffic routing to different part. Yeah, I mean
01:02:38 [W] we got to do this.
01:02:40 [W] Okay, but I can already see the to the few instances, right?
01:02:44 [W] The counters are jumping around which is pretty cute.
01:02:48 [W] And at some point I'm going to need to see the hostname as those things are.
01:02:54 [W] Okay.
01:02:55 [W] We'll just let that run.
01:02:56 [W] All right red is yeah, so we're always install through Helm everything all those things and we actually have support for
01:03:11 [W] Run, all right red is yeah. So I always install through Helm everything all we know those things.
01:03:20 [W] Definitely.
01:03:22 [W] Let's let's let's try and install it from hell and we actually have support for Helm in CD case where you can there's there's something called the helm construct.
01:03:30 [W] of course and you can you can specify which chart you want to install and the helm construct will actually call Helm underneath right for you.
01:03:40 [W] The same way that CD Kate's image called Docker. So all these build tools are kind of encapsulated or abstract it away.
01:03:47 [W] I using these constructs.
01:03:49 [W] It's not it's not going to actually install the chart.
01:03:51 [W] It's going to use Helm template which is yeah. Sorry to to feature a to synthesize the template from a chart given the set of values and things like that, right?
01:04:02 [W] Yeah.
01:04:04 [W] Okay. So what we wired field here is chart.
01:04:10 [W] Now me right. It's right.
01:04:14 [W] Yep.
01:04:15 [W] That's the one and what else do we have here?
01:04:18 [W] I see Helm executable him Flags gives me some ability to control the execution and then the release name is optional, which yeah, they're probably says that it's going to how located based on where the culture is, which is pretty good.
01:04:32 [W] that I know that Helm charts like the red is Helm chart actually generates Convent like generates values.
01:04:39 [W] Don release name right?
01:04:40 [W] That's the convention bigger example arrived from the release date. Exactly.
01:04:44 [W] For example, we'll see it later like the red is password is going to actually be extracted from Secret that has a name with the convention.
01:04:52 [W] The helm executable Helm Flags gives me some ability to control the execution and then they release name is optional, which yeah, they're probably says that it's going to how located based on where the coaster is, which is pretty good. I know that I know that Helm
01:05:49 [W] In a construct in a constant and you oh cool.
01:05:52 [W] So if I do it is it is really the same as with the Riddler.
01:05:59 [W] So I guess releases are kind of like the scope right like the construct scope for the helm charted his ability to basically install two Raiders in the same cluster with different release them.
01:06:10 [W] So the resources are not conflicting but it's basically one level of nesting.
01:06:14 [W] There's no treat that's just a single kind of name spacing for the chart.
01:06:19 [W] Okay.
01:06:19 [W] Do I need any value that I see that I have kind of let's just put some values for our demo sake and to disable the red is clustering.
01:06:30 [W] We're just gonna do a single node.
01:06:32 [W] Simply what it is.
01:06:33 [W] What's the configuration?
01:06:35 [W] Yeah, so unfortunately this part isn't isn't tight.
01:06:39 [W] But so we need to take a look at the confessed. But basically you do cluster and then enabled
01:06:49 [W] That's that's it.
01:06:51 [W] Okay, and you know, I can actually like derive this value from some configuration of my chart so I can add like something like this is, you know, a Dev environment and in the dev environment.
01:07:03 [W] I'm going to disable the cluster and production I can I can actually write the logic that decides. What is the configuration of my registry?
01:07:12 [W] Yes, but we're not going to do that now because we don't have enough time and I'm going to wrap over me.
01:07:18 [W] My so this is it.
01:07:19 [W] That's all I need to deploy read his classroom. So that should be it.
01:07:23 [W] Basically.
01:07:24 [W] Yes.
01:07:24 [W] me show me.
01:07:28 [W] Now obviously we're going to need to change our code right the the this HTTP server that is going to have to connect to redis right? It's going to connect with the password. So we're going to I know that you've been you know hacking on this earlier.
01:07:43 [W] Can you send me the code?
01:07:46 [W] I don't want to spend too much time like writing that code.
01:07:49 [W] Yeah, let me send you that. Okay, so it does seem like something happened here that we look at this.
01:07:59 [W] Pretty cool.
01:08:00 [W] This is we're already running.
01:08:01 [W] That's nice.
01:08:05 [W] Ready to accept connections Ellie.
01:08:09 [W] That was that was magical.
01:08:10 [W] I want that. I mean, yeah, this is this is cdk2 and Helm right. We have to give we have to give a salute to helm for creating a yeah.
01:08:21 [W] This is this is pretty nice because I think it encapsulates the fact that I'm using Helm behind this construct and I guess I can actually wrap this into a construct like
01:08:34 [W] all these values
01:08:25 [W] this again.
01:08:34 [W] Yeah, so many things you're already doing that. Then we should also expose some properties for this construct because we know that we're going to need the password for redis in order to connect right? So it would be nice if we have like a property or a method
01:08:50 [W] That exposes and the same thing for the hostname. The password is going to be stored in let me I think I let me see a secret, right?
01:08:53 [W] Yeah.
01:08:54 [W] I'm going to tell you because I've been dealing with this chart for a while now. So I'm so the here so it's basically will name the release name and read his password.
01:09:08 [W] Yeah, so you do you're going to do yeah read-only password Okay, so
01:09:14 [W] I'm just it's type is going to be a secret value.
01:09:18 [W] We have like this notion of a secret value indicates, which is a combination of a secret and a specific key inside that secret to extract the value is C. So it's basically kind of like a pear.
01:09:30 [W] Yeah, and then I guess password equals. So you create a secret. You can reference an existing Secret by using secret Dot from and again this from pattern.
01:09:44 [W] Name is Elise knative release name.
01:09:48 [W] Yeah, we can reduce and then the key is what we saw here.
01:09:54 [W] I like the this is like, you know the helm chart creating for us.
01:09:59 [W] So that's basically convention that the helm turd hasn't we can codify this convention into the Constructor and then from the users perspective.
01:10:08 [W] It's pretty pretty strong.
01:10:07 [W] All right, so we have five most I guess right.
01:10:09 [W] We have five minutes allowed.
01:10:11 [W] We need to mess up. This is the host right the host name.
01:10:21 [W] And how do you get so the host name is actually again.
01:10:25 [W] It's the release name and it's suffixed with the master of yeah. Okay. So now I'm going to do this.
01:10:38 [W] Sorry.
01:10:42 [W] Sorry, okay, it is. Yeah and I might say, okay. Give me did you send back? Okay, I got it.
01:10:52 [W] I got your coat.
01:10:52 [W] He's gonna copy and paste that into our app to save some time and we'll go let's go through this for just a second.
01:11:01 [W] Okay, so I understand what's going on here quickly stalls ready.
01:11:04 [W] So I need I need to install and dependency, right?
01:11:08 [W] I'm going to add a package Json file.
01:11:13 [W] with redis
01:11:16 [W] Okay, cool. And don't forget to do this right work gear app and then run this this this this application combines pretty much every tool that I love
01:11:31 [W] Agree about ready for you anyway, so it creates a client and it reads the host and the password from environment variable. So we need to actually somehow delegate could those.
01:11:29 [W] Okay.
01:11:29 [W] Well, I'll remember this and then it creates a HTTP server.
01:11:33 [W] Oh and it has this nice get you can just get the calendar or you can post and then it will increment.
01:11:42 [W] Nice.
01:11:43 [W] Okay.
01:11:43 [W] That's that's looks pretty straightforward and it's still a DAT.
01:11:47 [W] Okay.
01:11:47 [W] So all we really need is to basically pass this values to to to the to the container and if I go into the router, it's here somewhere right environment. Yeah.
01:12:02 [W] So these values got here right?
01:12:04 [W] Because that's not it will be input.
01:12:07 [W] That's and that's actually okay, right the user.
01:12:09 [W] It's okay for the user to pass these environment variables because it's the users choice to now incorporate radius, right?
01:12:17 [W] And so it sent so it's basically part of that mental model with the user comes from says Okay.
01:12:23 [W] I want to run this container this image and passing these environment variables to the image. Okay, so it's going to be install options I guess.
01:12:31 [W] These values here, right?
01:12:17 [W] Because that's not the will be input.
01:12:20 [W] That's and that's actually okay, right the user.
01:12:22 [W] It's okay for the user to pass these environment variables because it's the users choice to now incorporate radius, right?
01:12:30 [W] And so it's so it's basically part of that mental model with the user comes from said Okay, I want to run this container this image and passing these environment variables to the image. Okay, so it's going to be install options are I guess
01:12:45 [W] And here is we are types of Syntax for a map.
01:12:50 [W] We can use rate record, right?
01:12:52 [W] So it's basically a spring remember that it's an N value right?
01:12:56 [W] Because I saw that this one's not yeah, just basically because I can also pass a secret right like and then this one's there are multiple ways of like creating an environment variables and kubernative and we're going to actually use two of them.
01:13:27 [W] Because I can also pass a secret right like and then this one's there are multiple ways of like creating an environment variables and kubernative and we're going to actually use two of them.
01:13:38 [W] We'll see.
01:13:40 [W] Okay, so just going to propagate this over here.
01:13:43 [W] Yeah here going to do this.
01:13:49 [W] And so we have Britain's greatest post, which is just a literal value right?
01:13:54 [W] It's just in value from values.
01:13:59 [W] It's just a string.
01:14:01 [W] And then read his password.
01:14:05 [W] Saw that we have from from Secret Valley Great Value cool.
01:14:12 [W] Wow, this looks pretty clean.
01:14:14 [W] This is basically it really that is telling you this is going to actually work.
01:14:21 [W] I am telling you you're hoping now. I'm definitely telling you that but don't hold it against me.
01:14:29 [W] Yeah, so that's that.
01:14:31 [W] That was bad.
01:14:32 [W] That was it and I guess we can start wrapping up.
01:14:37 [W] Actually.
01:14:37 [W] let's give it a few seconds to deploy. We'll see.
01:14:41 [W] So I guess what we saw here is we saw basically I would say three aspects of what why cdk4 kubernative is interesting and why in general cpk's interesting. Yeah.
01:14:56 [W] Very powerful tools very familiar to most programmers.
01:15:00 [W] And so to that end. I feel I feel at home.
01:15:03 [W] I feel like I'm you know, I have all those Jewels I know what to do with them.
01:15:07 [W] Second thing is the ability to create higher level abstractions. And obviously that stems from the first point, but the interesting part is this composition model this these constructs because the
01:15:22 [W] Concerts is the ability to create this consistent and deterministic a naming across execution. So when I change something I know that this thing that was some, you know in my previous execution was X now.
01:15:30 [W] It's going to be Y and that's it.
01:15:31 [W] You have those things together and it's basically and it's very hard to implement this desired State mechanism without this without this stable stable name and I think the third thing was
01:15:46 [W] This ability to basically leverage the ecosystem of the existing ecosystem of kubernative has we talked about crd s and being able to import them and use them as you know, L ones we saw the helm.
01:16:01 [W] Support which is kind of like magical I guess and wrapped it into a construct. We create an abstraction that hides even hides the fact that I'm using Helm the nobody actually needs to go and you know, actually you can just show for a second like how the Manifest
01:16:11 [W] Now, okay, let's let's I'm actually curious eye gets its enormous right?
01:16:10 [W] But but we don't we don't care we stopped caring about the manifest like 20 minutes ago because we initially I didn't trust it. But now it feels like I don't really care because I feel like it's actually doing what I'm telling it to do.
01:16:24 [W] So, it's pretty pretty cool.
01:16:25 [W] Oh and the other thing that we saw is we use this image Library, which is just just random Library by some dude and
01:16:33 [W] L Aviv that helped us with all this with, you know, building and Publishing the image as part of the cdk experience, which is also pretty cool like the ability to publish these constructs and use them as clock, you know, it's
01:16:48 [W] That I hope this with all this with you know, building and Publishing the image as part of the cdk experience, which is also pretty cool like the ability to publish these constructs and use them as plant. You know, it's class libraries.
01:16:59 [W] I can actually publish a whole application whole application is a class libraries pretty yeah, we can actually publish this counter right at this is we just created a persistent counter that runs in kubernative.
01:17:10 [W] Right, right.
01:17:13 [W] Okay, this is just 0 now.
01:17:15 [W] Oh, I might give this get yeah.
01:17:17 [W] just never expected. Yeah.
01:17:21 [W] Looks and different host names.
01:17:24 [W] Yeah.
01:17:26 [W] Because cathartic moment right is now yeah, definitely.
01:17:32 [W] I feel I feel cathartic cool Ellie. Thanks so much.
01:17:39 [W] Is there anything else that you wanted to I just want to give yeah.
01:17:43 [W] we just want to thank you for inviting me and I just want to mention that we are currently, you know, we're putting a lot of effort into it and we really want the engagement of the community. There's a slack channel. Will you can maybe show that while I talk?
01:17:56 [W] There is a slack Channel you can join their monthly Community meetings that you can attend and actually brainstorm with us on features and unbox and whatever you want and we're really really excited to build this together right
01:18:12 [W] We want as many more as many use cases as possible and really making these apis so fun lenses. Yeah Pleasant delightful, I think so.
01:18:24 [W] Yeah, the the homepage for CD case is this one obviously GitHub is another whole pages.
01:18:30 [W] We're happy for you to start from and you can find resources at the bottom of this.
01:18:36 [W] There's a bunch of resources about there's a mailing list. We've got a weaveworks.
01:18:41 [W] Weakly, I'm sorry a monthly community meeting that you're more than welcome to join.
01:18:47 [W] We have a slack General that's part of the cdk dev initiative.
01:18:53 [W] It's actually a community initiative by that combines all of the see decays, you know, the bigger CD case. There are actually other CD cases starting to pop up but the chair form AWS and kubernative C decays and there's a slack
01:19:08 [W] It's part of the cdk dev initiative.
01:19:04 [W] It's actually a community initiative by the combines. All of the see decays the bigger city case.
01:19:10 [W] There are actually other CD cases starting to pop up but the terraform AWS and kubernative C decays and there's a slack teen stock workspace that you can join and there's a CPK Channel within that workspace that we that we Monitor and we're happy to like
01:19:28 [W] Can join and there's a CD k8s Channel within that workspace that we that we Monitor and we're happy to like talk to you.
01:19:35 [W] talk to you I guess that's it.
01:19:39 [W] Okay, we have like 10 minutes, I guess after this time for questions.
01:19:43 [W] I got a little bit more.
01:19:45 [W] But yeah, feel free to join us and I'm gonna ask questions cool.
01:19:49 [W] Thanks so much for joining me. It's it's been way more fun to do it with uses doing it alone.
01:19:56 [W] Hopefully next year. We'll get to see the
01:19:58 [W] People we're presenting to write and I just in the camera, maybe yes, hopefully cool.
01:20:04 [W] All right.
01:20:05 [W] Thanks a lot.
01:20:06 [W] See you later.
01:20:06 [W] Bye awesome.
01:20:10 [W] Thank you alot. Thank you Ellie. That was an awesome demo.
01:20:13 [W] Thank you so much for joining us for this presentation where hope you're as excited about cdk2 as we are. We encourage you to visit us on the web to join us on slack and chat us with your questions or the things that you're building and also,
01:20:28 [W] Join us on GitHub.
01:20:29 [W] We really are excited and we welcome contributions.
01:20:32 [W] We have a lot of big things planned for the CD case including moving to a beta in the near future here, and we're excited to see what you build and we hope that you join us.
01:20:42 [W] Thank you.
