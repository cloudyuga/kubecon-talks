Sponsored Session: AWS Controllers for Kubernetes -- The AWS API Universe Now Kubeified!: MVRG-4690 - events@cncf.io - Tuesday, November 17, 2020 1:52 PM - 30 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello everybody.
00:00:00 [W] My name is j pipes.
00:00:02 [W] I'm an engineer on the eks team at AWS and I focus on open source contribution in particular in the kubernative ecosystem.
00:00:10 [W] AWS controllers for kubernative project or ack
00:00:16 [W] so to introduce you to ack.
00:00:19 [W] I'm going to tell you a little story and it should be pretty familiar to quite a few of it.
00:00:25 [W] So we've got Alice Alice is a web developer.
00:00:27 [W] She develops a node.js application and she's following most modern application build techniques.
00:00:37 [W] She's building her application into immutable Docker images and developing on node. Js and she chooses to use
00:00:45 [W] SQL Lite for simple storage needs for her web application.
00:00:49 [W] Oh, I forgot to mention that Alice is a huge kubernative fan.
00:00:54 [W] Of course.
00:00:55 [W] So Alice goes to deploy her application to a Target kubernative cluster and to do so she does the typical kubeacademy apply for her deployment and a service
00:01:10 [W] Possibly an Ingress and egress resource for top-level inbound routing.
00:01:19 [W] Everything is fine.
00:01:21 [W] But then quite predictably SQL light falls over.
00:01:25 [W] It's not really designed for heavily concurrent access.
00:01:28 [W] And so when 10 users try to use her website all at once well things don't go very well. So Alice she realizes that she needs a real database and she knows that postgres is a good example of a you know, quote real
00:01:43 [W] database that it's heavily concurrent and
00:01:49 [W] so she goes and she Google's for some tutorials on.
00:01:53 [W] how do I set up postgres to run on kubermatic and most of those tutorials they sort of boil down to what's on the screen here, which is creating a secret in kubernative creating a persistent volume Plame for some
00:02:09 [W] creating a deployment for the the database server heads and then a service record for the postgres database service all of that goes to plan but
00:02:25 [W] Unfortunately Alice realizes that she's now in the database administrator game and that's definitely not what Alice had in mind when she deployed her initial node.js application to kubernative.
00:02:37 [W] So Alice really wants to focus on her application.
00:02:41 [W] She doesn't really want to be a DBA.
00:02:44 [W] That's not what she had in mind.
00:02:45 [W] So what can she do?
00:02:48 [W] So Alice here is about Amazon RDS the relational database service and it kind of sounds like hey, this is a great solution here.
00:02:56 [W] It's going to take away all the pain points that she has about installing and maintaining postgres by you know, doing all that for Alice, but there is a little bit of a problem
00:03:11 [W] And I did mention that Alice was a huge kubernative fan.
00:03:15 [W] And Alice goes to use Amazon RDS and she goes to the Amazon web web console and she clicks through some sort of gooey Wizards to create her database instance,
00:03:30 [W] She just doesn't really like it. Right she wears where is her cozy kubernative experience that she loves. Well, she doesn't have to use the web console.
00:03:42 [W] Of course.
00:03:43 [W] She could use the AWS CLI tool or she could use a tool like cloud formation or terraform.
00:03:48 [W] But at the end of the day, none of those things are kubernative and like I mentioned Alice really does love kubernative.
00:03:54 [W] So what does she do?
00:03:55 [W] Well, what if she could just do this what if she could keep cuddle apply?
00:03:59 [W] why they kubernative manifest with some yeah mold that describes her RDS database instance and send that off to the kubernative API server and have a kubernative controller manage the lifecycle of her RDS
00:04:14 [W] The Basin since for her well, this is pretty much what a CK is this is allowing kubernative users to continue using the kubernative API and the configuration language of the kubernative API Machinery to
00:04:29 [W] AWS infrastructure resources things like RDS databases and S3 buckets and SNS topics etcetera
00:04:37 [W] So that in a nutshell is what AWS controllers for kubernative is all about it's it's Bridging the world of AWS service apis with the kubernative API and it's solving Alice's problems and let's see if it'll solve yours too.
00:04:54 [W] So AC K stands for AWS controllers for kubernative and in particular that's controllers plural.
00:05:02 [W] It is a collection of kubernative custom controllers, one for each AWS service API and the ack service controller for that particular service.
00:05:14 [W] S3 or RDS or SMS. They manage the backend AWS resources for that service API on behalf of kubernative user. So the kubernative
00:05:24 [W] user submits their RDS instance or S3 bucket as a kubernative manifest. The kubernative is a pi server receives that right septet CD and then the ack service controller
00:05:39 [W] Gets notified of a new custom resource of a particular kind that is interested in and the ack service controller for that service. Then goes ahead and manage.
00:05:48 [W] This is life cycle of that resource by calling the AWS apis itself.
00:05:56 [W] A little bit about the design of ack. So as many of you might know AWS has a lot of services.
00:06:04 [W] I think we're like a hundred and sixty five-plus at this point when we started designing ack. We've realized early on that.
00:06:14 [W] That's just it wasn't feasible to hand build, you know manually create a hundred and sixty plus different custom kubernative controllers. And so we set out early
00:06:24 [W] On to do everything using Code generation in ack. So we generate the API types from a set of Json model documents.
00:06:35 [W] in addition to the API types.
00:06:38 [W] We also generate all of the service controller implementation itself.
00:06:42 [W] Now this makes ack a little bit different from something like kubevirt, right which is an awesome awesome project the differences that could build Er. When you generate your custom controller using kubelet ER
00:06:54 [W] It provides you with like a skeleton.
00:06:56 [W] I stub for the controller and then you're responsible for going in implementing that that controller and like I said, we realized that we couldn't hand Implement a hundred and sixty plus service controllers.
00:07:10 [W] we actually generate the entire implementation of the service controllers in ack directly from the API models themselves. So that's a fairly big difference about ack compared to something like kubevirt.
00:07:24 [W] They're behind the scenes.
00:07:27 [W] We absolutely kubelet her and ack both rely on the controller tools and controller Jen binary to do various low-level code generation for crd S and the Deep copy Jen things
00:07:42 [W] That one way that we are different is that we don't use cloud formation. The ack project had its
00:07:57 [W] SS in another project called the AWS service operator ASO and old colleague of mine. Chris hind created the ASO project maybe two years ago when he built ASO he used
00:08:12 [W] Cloud formation behind the scenes. So when for instance you create an S3 bucket through ASO, it would actually create a cloud formation stackrox created an S3 bucket.
00:08:22 [W] And we thought that that user experience was a little surprising for users when we started investigating ack and diving into some implementation proposals.
00:08:35 [W] We also realize that at the end of the day a kubernative custom controller. It relies on the kubernative API server.
00:08:42 [W] And at CD to be the single source of Truth for the desired state of a resource and cloud formation because well, it is managing resources for for the user.
00:08:54 [W] It has its own idea about who is who has the desired state of Truth for a resource and by using cloud formation.
00:09:04 [W] We you kind of get into these race conditions and this conflict between well who owns the state of a particular resource so we didn't
00:09:12 [W] Want to have that conflict and so the design of ack we do not use cloud formation instead. We directly call the AWS service apis themselves.
00:09:23 [W] It's important to point out that ack service controllers can be installed on any kubernative cluster.
00:09:30 [W] There's nothing about ack that is specific to eks, you can run an ack service controller on a gke instance of kubernative or on-prem or a cop's cluster running on ec2.
00:09:45 [W] There's absolutely nothing about eks that or there's absolutely nothing about ack.
00:09:50 [W] that is specific to e KS and then finally the way that we are building the ack service controllers is that we are working hand in hand with the individual AWS service teams, like elastic ashore API Gateway working
00:10:06 [W] They're engineer's in developing the custom code for their particular ack service controller along with a set of end-to-end test validate verify that service controller in ack is calling there.
00:10:21 [W] API in a behaviourally and semantically correct fashion. So we are actively collaborating with the AWS service teams.
00:10:33 [W] It's one big feature that we rolled out in ack about three or four weeks ago.
00:10:39 [W] It's something called cross account resource management a contributor to ack named. I mean he'll Ali is the The Mastermind behind this particular feature and let me let me explain a little bit about why it's important.
00:10:55 [W] Orton so as I explained earlier ack is a set of kubernative serverless kubernetes custom controllers, one for each AWS service now, we realized that that experience
00:11:10 [W] Little cumbersome for users to have to install multiple pods containing an ack service controller for each individually AWS service.
00:11:19 [W] Well, we didn't want to compound that particular encumbrance of the user by also having the user have to install an ack service controller in lots of different kubernative clusters in order to manage
00:11:34 [W] Sources across multiple AWS accounts and look we talked to many customers and it's almost Universal. They all use multiple AWS accounts to segregate and sort of isolate resources within their
00:11:49 [W] Organization. So some application development teams. They get their own AWS account.
00:11:53 [W] It might be within an organization and I am organization or it might be separate but we find a very common that users have have the need to manage the lifecycle of resources across
00:12:09 [W] Lots of different AWS accounts and so what cross account resource management allows is for the kubernative cluster admin to annotate a kubernative namespace with a specific annotation Services dot k dot AWS
00:12:23 [W] Word / owner - account - ID with the AWS account ID that that should own all of the resources that get created within that kubernative namespace.
00:12:34 [W] So if I go ahead and do a coop cuddle apply and I pass in a manifest for an S3 bucket, and that custom resource has named SpaceX it is you know, it is
00:12:49 [W] the name Space X and the cluster admin has annotated name Space X with a particular owner account ID AWS account ID what the ack service controller will do is it will call STS assume
00:13:04 [W] to Pivot the AWS client that is that lives within the service controller so that it can start managing resources in a target a different Target AWS account then is associated with the IM roll under which it is was
00:13:20 [W] Running by default. And in this way a single ack service controller for S3 or RDS can manage resources within that particular service across lots of different Target accounts.
00:13:31 [W] You don't need to install a lots of different ack service controllers one for each different AWS account ID that you need to manage?
00:13:42 [W] Related to the Cross account resource management is the topic of authorization and access control. The reason I bring it up.
00:13:50 [W] It's a fairly complex topic and especially with ack you need to remember that there are two are box systems in play in any given time one is the kubernative Zar box system the role based access control system and that will dictate what kubernative
00:14:05 [W] It's users. For instance. Alice can create lists patch.
00:14:09 [W] delete different custom resource kinds in the kubernative API.
00:14:13 [W] Once that once the kubernative API performs its authorization checks.
00:14:22 [W] That's the end of the kubernative is our Bach system or at least for for the purposes of ack after that point when an ack service controller receives an event notification of a neuvector.
00:14:34 [W] New custom resource of a particular kind it needs to talk to the AWS apis. And in order to do that. That's where the AWS I am.
00:14:44 [W] Our box system comes into play and there is an I am role that is associated with the service account.
00:14:53 [W] that is running that the poddisruptionbudgets that I am role has a set of permissions or policies that allow it to magalix.
00:15:04 [W] The lifecycle of resources in a particular AWS API the to our box systems kubernative and IM they don't overlap right? And if you go to the link that's on this page
00:15:20 [W] Here I show a diagram explaining just how those two are box systems come into play, but they don't actually overlap with each other and it's important as you start using est-ce que and testing it out trying it out.
00:15:32 [W] understand where these two are Buck systems come into play.
00:15:36 [W] So what about secret things those of you who are familiar with the RDS API? You might know that the create DB instance API call unfortunately passes in plain text a field called Master user password
00:15:53 [W] Clearly that is not something that is a kubernative best practice with regards to secret like Fields instead.
00:16:00 [W] They kubernative best practices, of course to create a kubernative secret object and then a key within that secret object and then refer to that key within the secret from another resource and so our secret replacement feature, which should be coming out in the next month or
00:16:17 [W] does just that it replaces certain fields in various resources like DB instance RDS DB instance replaces those plain text string types with a reference to a key
00:16:32 [W] Within a secret. So Alice can set master user password to be name of DB secrets and key of Master user password and kubernative cluster.
00:16:44 [W] Admin can have created a kubernative secret called DB secrets and put in the actual Master user password into that secret as opposed to passing it in plain text both to and from the AWS apis.
00:17:01 [W] So which AWS services do we have currently in developer preview?
00:17:06 [W] Well, as of today which is the 27th of October, we have seven services in developer preview S3s.
00:17:16 [W] Nsmcon.
00:17:19 [W] Dynamodb API Gateway B2 and elasticache. We have a roadmap that is publicly available at the link that you see on your screen and that litmuschaos.
00:17:29 [W] Our rough time lines of when we are bringing new Services into developer preview and when we plan on getting the services that we already have in developer preview into a beta State and a ga State you'll also find links to
00:17:45 [W] You from the GitHub repository here to our documentation that describes our release criteria for developer preview beta and ga.
00:17:52 [W] Basically it boils down to Beta you'll have the ability to easily install the service controller using Helm and there will be quite a bit more testing and documentation for all of the resources exposed in the API.
00:18:08 [W] And then G A. It's really about stabilization of the API types and a low level of reported bugs for that particular service controller.
00:18:21 [W] So our roadmap also includes a couple more important items one is the normalization of the representation for AWS tags.
00:18:32 [W] So those of you familiar with AWS apis probably know that various service apis in the AWS API Universe use different representations for AWS tag some use a map of string to string some use a list of structs with a key and
00:18:47 [W] You said ra it's all different anyway will be standardizing that to all be spec dot tags, which will be a map of string the string.
00:18:55 [W] There's an adopt a resource feature where if you create something out of band from ack like let's say you have a pre-existing S3 bucket and you just want to bring it under the ownership of the ack service controller.
00:19:09 [W] You'll be able to do that by annotating the the custom resource with a particular a RN
00:19:15 [W] Or Amazon resource name will have a common rate limiting and throttling Library that's going to be separate from ack. But will be used by ack along with other projects like crossplane or maybe even the cluster API for AWS or
00:19:30 [W] a cloud provider AWS in the court kubernative universe
00:19:35 [W] so I very much encourage you to check out the repository here github.com AWS AWS controllers Cates and we hang out on the provider AWS channel on the kubernative slack community and any time you
00:19:51 [W] Get in touch with me Twitter GitHub slack.
00:19:54 [W] I'm @j pipes.
00:19:56 [W] Thank you very much.
00:20:09 [W] Hello everybody.
00:20:10 [W] I'm I'm I'm here live and answering questions in the the chat box here.
00:20:19 [W] I'm also on the hash to - Coop Khan - sponsor - theater slack Channel and the cncf slack community. So if you want to ask questions in there, feel free so
00:20:35 [W] But look who's here.
00:20:36 [W] I'm just answering questions typing and let's see here.
00:20:40 [W] So I'm going to go back to a question that gagan prakash has asked earlier.
00:20:52 [W] I had written an answer in two in two Gorgons question there.
00:20:58 [W] essentially he's asking how do you deal with the fact that most resource life cycle is managed separately meaning
00:21:05 [W] You may want to share an S3 bucket across name spaces or RDS across namespaces.
00:21:11 [W] Ideally you want to want creation and attachment to be separate namespaces.
00:21:16 [W] maybe separate crd for create delete versus attached. So you're gone. Please let me know if I'm if I have misinterpreted your question here, but I believe what you are getting at is
00:21:32 [W] a question about control plane versus data plane and for ack we are primarily focused on control plane actions and
00:21:47 [W] And not the data plane and what I mean by that is we focus on the life cycle management of resources like S3 buckets, but we don't get involved in like the S3 object API similarly
00:22:02 [W] We focus on the life cycle management of things like an RDS DB instance, but we don't get involved in the sort of what I consider. The data plane was like the you know, the DB URI and maybe been
00:22:18 [W] Back end end points for an API or things like that.
00:22:21 [W] So yeah, we focus mainly on the control plane side of things.
00:22:28 [W] Adam malcontents ewilson.
00:22:31 [W] That's an awesome Name by the way, he's asking is the code for ack generated at compile time for runtime.
00:22:39 [W] Will I need a new ack binary when new services are added that also is an excellent question. First thing to point out is that there is no single ack binary right so there isn't a single
00:22:55 [W] Docker image that contains all of the ack controllers running within a single binary for each of the aid ack service controllers, which correspond to an AWS service like S3 or SS or RDS etcetera.
00:23:10 [W] there is a separate Docker binary image and a separate Helm chart and you install and manage those things as kubernative deployments, right which are essentially just kubernative pods and
00:23:25 [W] And those are all run separately built separately for a very specific reason. We wanted the surface area for the IM policy set associated with the IM roll
00:23:39 [W] That particular service controller to be to have so to follow the privilege of you know, the principle of least privilege right so that you can scope the IM role as small as possible.
00:23:54 [W] Possible so that it just has the ability to manage the lifecycle of resources for that particular service if we had a single binary a single ack binary that had you know, 80 different Services
00:24:08 [W] Grated into it the IM role that would run the in the service account, right the that pod would run as would essentially need God level privileges right like a root level admin privileges
00:24:24 [W] And that's not something that we wanted to to encourage. Right? And that that's the primary reason why there are lots of different binaries one for each of the ack service controllers.
00:24:38 [W] So if you go to our Docker Hub registry, which is soon to be moved to ECR public resume registry or you take a look at our Helm charts.
00:24:52 [W] you'll see that there are separate ones for each of the ack controllers.
00:25:00 [W] Yuri cow is asking is there integration with cdk I believe you mean CD Kate's which is the cdk version for kubernative manifests,
00:25:15 [W] That's what outputs kubernative manifests. The two projects are very complementary right ack doesn't really care.
00:25:22 [W] what tool or project you use to generate kubernative manifest. All it knows is it gets a notification on the Sheridan former bus, you know from the kubernative say Pi server that a particular
00:25:38 [W] Of resource has been created or modified or deleted and it takes some action so it doesn't really mind.
00:25:44 [W] However, you want to generate your kubernative manifests or Gamal or Json whatever it's all good with that.
00:25:55 [W] Gagarin also asked which is kind of similar to the previous question.
00:25:59 [W] You know, what how do you deal with calls? That aren't idempotent? There are a few AWS API calls that are not idempotent.
00:26:10 [W] try to shy away from those. So we're not going to be calling API calls where there is either non-deterministic non-deterministic Behavior.
00:26:24 [W] Or lack of item potency, right?
00:26:32 [W] Oh, hi, Jessie, Jessie soon from from into it and the Argo project does ack populate the status fields of the CRA instances with the state of the resource along with any problems or errors.
00:26:47 [W] Yes, yes, it does.
00:26:48 [W] So when an ack service controller for a particular service determines that you know, the kubernative user has submitted a new custom resource for say an S3 bucket or
00:27:03 [W] An SNS topic it is going to call the AWS API to create the SNS topic and in the response from that it's there are a set of fields in SNS case. It's the SNS
00:27:19 [W] Create topic response has a topic a RN and then there's a follow-up call called set topic or sorry get topic attributes, which will pull a set of other attributes that we populate the both the spec and the status fields.
00:27:35 [W] Within the custom resource with that information.
00:27:37 [W] It does depend on the API because some of the create calls the response from the that create call has quite a bit of information others other AWS it service apis have a bit of
00:27:52 [W] Inconsistent way of determining that kind of status information. So it does depend on the on the API.
00:28:01 [W] One final question here.
00:28:03 [W] I think we're wrapping up here. But shrikant is asking it seems that this will remove the need to have terraform stages as we can directly manage AWS resources from kubernative your thoughts.
00:28:14 [W] My thoughts are we're not actually trying to replace terraform or cloud formation or cross plane or any other project frankly that allows you to automate the declarative.
00:28:28 [W] Modeling of your application and infrastructure resources where we're really focused on trying to get a simple consistent bridge between the AWS.
00:28:43 [W] apis that have a set of inconsistent ways of describing various resources and the kubernative universe so that kubernative users don't need to leave their cozy little, you know, kubernative World they can just create
00:28:58 [W] And and manage the lifecycle of resources in an AWS API, but all they need to deal with is the kubernative API.
00:29:05 [W] They never need to login to the AWS web console.
00:29:08 [W] So that's our primary focus and we are collaborating with folks like crossplane.
00:29:13 [W] Right?
00:29:13 [W] what recently we have been working with move offic Otis. I hope I'm pronouncing his name correctly, but move offic has put a
00:29:28 [W] he has generated the provider AWS within crossplane using the ack generate binary and and and go code template in functionality that we have and that
00:29:43 [W] Kind of collaboration between crossplane and ack I think is awesome.
00:29:48 [W] And you know, I'd love to start doing this sort of collaboration and use use of ack code and some of the shared Library code.
00:29:58 [W] I I'd love to be collaborating with cluster API and cloud provider API like those types of groups as well to reduce the amount of duplicated code that we have.
00:30:10 [W] And I think we are we are at time here.
00:30:13 [W] So thank you all very much.
00:30:15 [W] I really appreciate the the questions.
00:30:17 [W] Thanks.
