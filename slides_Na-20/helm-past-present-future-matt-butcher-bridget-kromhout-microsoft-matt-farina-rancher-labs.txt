Helm: Past, Present, Future: FFOJ-8166 - events@cncf.io - Wednesday, November 18, 2020 4:57 PM - 34 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Welcome to the session Helm past present and future where some of the helm coredns maintainers are going to tell you about where we've been where we are today and hopefully where we're going in the future on that butcher.
00:00:13 [W] I'm at Farina.
00:00:15 [W] And I'm bridgecrew.
00:00:17 [W] Mmhmm. I think a lot of people are interested in what we'll have for look like and there are many possible answers here butchered you want to give us some of them.
00:00:29 [W] I think Helm for is going to present a very interesting problem that we will want to solve and that is what exactly is.
00:00:39 [W] Helm is Helm really and truly just a package manager in which case have we gone too far with many of the things?
00:00:45 [W] done in Helm the three and is it time to Pare down and get back to basics or are there still major features out there that that hell needs and is still lacking or is it some mixture of the two and I think that's going to be the number one thing
00:01:00 [W] the helm maintainers are going to have to solve as we kind of look at and move toward the road map for Helm for so wait, you're saying we have the floor wax and dessert topping problem that we need to figure out the answer to what's our
00:01:16 [W] Cherry Anna
00:01:19 [W] I don't know.
00:01:20 [W] The one thing that I want to see in Helm for is probably a little bit more consistency because some of our apis and some of our stuff is differently like the way we have a couple of different Default Time formats.
00:01:34 [W] So if you're using Helm as a building block for other things which happens with package managers, you want a certain amount of consistency and I think because we really put a focus on that and Helm three we can learn a lot and improve on that.
00:01:48 [W] Helm for and so that's kind of what's on my mind but again, I don't know because we've got time
00:01:56 [W] Yeah, absolutely and you both bring up some interesting points and I think we'll explore those a bit more just the idea of package management deployment.
00:02:07 [W] It will Helm solve all of your Co D problems.
00:02:11 [W] There are so many possibilities here that I think we probably answer this by going into the Wilds of the past for an ovary just telling us about you just looked at some dates as a how far
00:02:25 [W] Pastor we talking so if I remember right the first commit of Helm was October 19th 2015.
00:02:36 [W] Five years ago now Helm the first commit landed that started this whole thing off and it all started because of a company that Matt butcher worked at day is had a problem with their paths called workflow Matt. Can you talk
00:02:51 [W] Bit about what that problem was.
00:02:52 [W] Yeah. So we were building coming out of engineered we had already built a product that was General Paz system that ran on a number of orchestrators and we decided that we wanted to take that platform and rebase it on kubernative and
00:03:07 [W] They focus on taking advantage of all the things that kubernative is which was that 1.1 1.2 at the time all the things kubernative has had to offer but one of the first things we discovered was the process of installing our own paths on kubernative was tedious.
00:03:23 [W] Sometimes taking hours and hours to just get all the mo manifests upload it and things like that and we realized that there had to be a better way. And in reality. We were just dealing with a set of yeah mole manifest that we needed to upload and install
00:03:38 [W] when a particular order so there had to be a better way to do that and that was kind of the core intuition behind what became health and this came out of a hack-a-thon which would lead you to believe that it perhaps didn't start
00:03:53 [W] Very specific and detailed planning for Marina you join the project slightly after that hack-a-thon.
00:04:00 [W] Can you talk a little bit about the decisions being right versus right now or how you even involve a project that starts small and becomes a giant. So by the time I had joined the project.
00:04:16 [W] Act Helm had already merged with a kubernative project called deployment manager. And that's where Helm V2 came about and then after that, you know, it was now under the kubernetes umbrella and kubernative is after that join the cncf
00:04:30 [W] And so we had home version 2 and we had charts and that's kind of where I got involved was after home version 2 is it was out the door and we are looking at how do you grow Helm and what's useful and if you're going to have a
00:04:45 [W] Package manager and you want it to be useful one of the things you need is tons of charts tons of content tons of packages for people to install and use when I came in there was lots of manual curation happening and quite frankly if you're doing lots of manual reviews.
00:05:00 [W] Of the same thing over and over it presents this great opportunity for Automation.
00:05:05 [W] And that's where I jumped in and I help automate a lot of these reviews and get it going so we could have, you know, you can install anything or tons of things and we ended up with hundreds and hundreds of packages in the stable repository that people could do and then packages elsewhere
00:05:20 [W] three people Zone repositories
00:05:22 [W] Ironically, this was not the first package manager Matt furry and I worked on together and Matt Farina had and I had written a Glide which was a package manager for go just a few years prior to this.
00:05:36 [W] And what was that?
00:05:37 [W] and it was interesting to go from that set of design constraints the the way you're thinking about a package at dependency management system. That's largely about managing source code and then switching over to something like Helm which
00:05:52 [W] Was really more an exercise in something closer to an operating system package manager and back then we used to talk about that all the time how in our minds if we talked about kubernative like an operating system the next kind of Opera the next evolution of
00:06:07 [W] An operating system up the up the stack then Helm was really closer to something like app get her home brew.
00:06:16 [W] A lot of are very early design Inspirations came out of those because we because of the metaphor that we kept saying to each other what if we just treat kubernative like an operating system. What if we just treat packages like the same way you treat installing something a new binary package
00:06:31 [W] Your operating system. So while at the same time, you know, we had already come from a background of working together a package Management Systems. It actually presented so many differences this time that Matt kind of dove in on the packaging
00:06:46 [W] I did the same time that I was really focusing more on the command line side and the teller side back then so it was a totally in spite of the fact that it was common ground in some ways.
00:06:58 [W] It was a totally different experience for us than building.
00:07:01 [W] Glide had been. Yeah. Now you mentioned a number of pieces there that I think that you've gone One Direction and then another on with the benefit of all of the hindsight what Nats
00:07:15 [W] No, would you do differently than you did in the last five years?
00:07:22 [W] So this Begins the for our portion of our show ha ha ha, there are some things that b**** I have often wondered if they could have been done better and try to remind myself of what the constraints were at
00:07:37 [W] I'm original Helm did not have templating it all and an early prototype of it used unix-style environment variables and had no real programming logic in there, but we ended up settling on go templates and largely we
00:07:52 [W] Go templates because it required us to build very little we can basically start with core go and build from there. I have often this the thing one thing I go back and forth on the most when I look back on Helm is
00:08:07 [W] Did we make the right choice there and earlier you said, you know the contrast between doing it right and doing right doing it right now.
00:08:15 [W] That is exactly where it go templates fit in right because we said okay, you know, they're their languages like Jinja that are fabulous template languages, but there was at the time no go implementation of ginger.
00:08:26 [W] And so we did talk about what would it take for us to write this, you know an entire template engine and do we want to maintain that do we want to be able to pipe this out tufin?
00:08:37 [W] to any external templating engine something we tried that went in my opinion very very poorly or do we go with a default template language and and hope that it works well enough and we really ended up choosing path C on that one
00:08:52 [W] And in some ways it served as well because we haven't had to maintain this huge body of code.
00:08:59 [W] But in some ways I feel like we you know, we had to cope with the template engine changing from under us when the go developers decided that things were going to work differently.
00:09:10 [W] The documentation honestly has been very poor and we've had to really kind of Matt could probably speak to this better than I we've tried several different ways of trying to document this but it ends up becoming
00:09:22 [W] I'm keeping the go documentation in sync with the helm documentation in sync with the sprig documentation and it's been an interesting tour in the end.
00:09:31 [W] Was that a mistake?
00:09:31 [W] I guess probably if I were in the same place again, I would make the same decision, but that is probably the number one that I still lose sleep over now. That's a really good insight and I think actionable for people when they're trying to do technical
00:09:47 [W] Decision-making, you know what there will never be perfect future knowledge.
00:09:52 [W] And so you have to do what is expedient and hopefully also offers you options.
00:09:57 [W] Yeah, and the thing that I look back on it is a little different.
00:10:02 [W] I look back at the security angle so you can sign charts and have provenance files and it uses pgp to sign those but it hasn't taken off in the public Avenue.
00:10:13 [W] I mean, there are some people who use it.
00:10:17 [W] To you know, a great degree for internal security and things like that.
00:10:21 [W] When you go get lots of public charts, they're not signed. You don't have that that Providence that you know who you're getting it from that, you know, you get that security angle and I would love to have seen something that made it more accessible to people and made it easier for
00:10:36 [W] Them to sign their charts to verify them and to make that security angle more widely spread.
00:10:42 [W] I don't know how to do that.
00:10:43 [W] But that is one of those things I would like to see and I remember telling Matt, you know, it's going to be hard for new developers come to it, but they're all going to see the benefit of doing this and you know by default, you know, we're going to see 90 plus percent of people signing their charts.
00:10:58 [W] Yes that now for your four and a half five years later.
00:11:03 [W] We're still at what maybe 2% 3% of people sign their charts even that I read that high.
00:11:08 [W] Yeah, so if we can improve that security ankle and maybe that's something to try to figure out for home for
00:11:15 [W] So what's going on with Helm right now?
00:11:17 [W] I know I've been giving talks and writing blog posts and we have a workshop that will be doing about the helm V2 to V3 migrations.
00:11:28 [W] That's very front of mind, but I would love to hear from you folks. What do you think are some of the right now things present in the home project that you're focused on?
00:11:39 [W] So I guess the first thing I'm going to talk about is charts.
00:11:42 [W] So Helm had this period of growth and popularity huge growth and popularity and we had the stable and incubator charts repositories and they were I mean, we had so many charts in them and quite frankly maintainers would come in and try to help maintain
00:11:57 [W] In them and we went through periods of burnout because there was so much activity.
00:12:01 [W] It's so much to do every day.
00:12:03 [W] And that's where we came in.
00:12:05 [W] there was lots of automation that was added but it still wasn't enough we had maintainers, you know burning out running out of time. And so instead of having this one repository, which was really example charge that morphed into hey, here's the common repository
00:12:20 [W] Our distributed model where you have charts everywhere, then we have the helm Hub because once you move everything distributed, you still need to be able to find it and the helm hub.
00:12:29 [W] It just had so many users and it helped them do that. But the software that powered it was originally designed for these on-premise smaller installations, and there are more things than just charts out there.
00:12:41 [W] And so the artifact Hub project which is a cncf project was started. And so now we point people to there because now with these things that are distributed from componentconfig,
00:12:49 [W] companies and organizations all over you know, now we still have this Central Way of finding them when we broke this up, but it was done so that way people could maintain their charts themselves and not have to wait on a handful of maintainers on the
00:13:04 [W] Project and it kind of allowed us to scale because we don't scale and then we can work on those automation tools those people who were interested in charts can work on automation tools to help all of those different people scale out
00:13:20 [W] Short repositories chart tests short lynching and things like that.
00:13:24 [W] Yeah, I would add to that 2 things artifact Hub has been I think one of the most exciting developments on the cncf lenses gape in the last year in part because the danger as any Community gets to be the size that
00:13:39 [W] Cncf Community is is that we will begin to fracture by default.
00:13:43 [W] Right?
00:13:43 [W] We'll just everybody will naturally sort of drift apart because we've all got our little fiefdoms that are all getting their own development artifact.
00:13:51 [W] Hubble is a great example of representatives from different communities inside of cncf different sub communities coming together and saying, you know at the end of the day, we all have to figure out how to get our particular software packages in the hands of our users.
00:14:06 [W] That's a common problem.
00:14:07 [W] Can we do a common solution?
00:14:09 [W] And so I think the work that Matt Farina and many others have done in unifying different projects and around the idea of the artifact Hub and then getting Helm, you know right away as one of four five projects migrated over to that
00:14:24 [W] Has been a sort of a very low key victory for a cncf as a whole and I'm still very very enthusiastic about that.
00:14:32 [W] And I think that I would like to reinforce another thing that Matt free decide which is how important this that you have switching to a distributed chart development model is going to end up being one of the big insights that that the chart maintainers
00:14:47 [W] Had was that many of the more vibrant packaging communities don't require Central authoritarian authoritarian editorial control over things, right if you look at 10 p.m.
00:15:02 [W] Or in any of the major operator, I mean, sorry a programming language package Management Systems. Now, they're all largely developers self motivating and self curating their own stuff and the the core maintainer roll.
00:15:17 [W] Owls are really more about keeping the infrastructure running and I think that moving from a centralized chart repository into into those kinds of areas will not just protect Helm developers from burnout, which has been a very big problem for us to be
00:15:33 [W] for all for every single one of us the but it will also really empower the community at large to be able to take on a control of curating but also rapidly build their own charts in their own packages for the things that they're
00:15:48 [W] Fleet developing on as the helm project has grown and you've realized that it doesn't make sense to try to do everything centrally or on a small scale.
00:16:01 [W] Just kind of making the one-off call here. And there you also have introduced the the project is introduced the helm Improvement proposal and or hip and is it fair to say that
00:16:16 [W] These Hips Don't Lie like ha ha ha. What are what are we doing with the Improvement proposals?
00:16:24 [W] So that was started by another mat on the project Matt Fisher and they're kind of like kubernative caps kubernetes enhancement proposals where it's a way to you know, when you're a fast-moving project is just figuring
00:16:39 [W] Things out right? You can just put up pull requests or you can file an issue or just throw proposal out there.
00:16:46 [W] But now whenever you have a big change on a mature project just like kubernative says you want to take the time to think it through to look at the implications to understand who the end user is and their impact because you know, there's there's
00:17:01 [W] So many users of Helm we don't want to to hurt the 80% to please somebody in the 1% And so we need to think through features and how they're implemented.
00:17:11 [W] And so the hip process lets us look at something propose something talk it through analyze. It add details to that before we ever go create it because you know, we've had many cases where somebody comes with a pull request for
00:17:26 [W] Idea, and it's a lot of code and we want to rewrite it because it doesn't fit the mold and I feel bad for them when they have to go rewrite it or they put a lot of code in it's something that may fit better as a plug-in or as maybe something that should live as a
00:17:41 [W] Different you know a layer on top of Helm and use helmets a dependency and this gives us an opportunity to think it through hand through before hand and give good feedback and curated for any big Ideas.
00:17:55 [W] Yeah, I very much like the way you frame it as something that is intended to be more respectful of our many contributors because reiterating it's really hard to say to someone. I know you did a lot of work, but you know, there are a number of
00:18:10 [W] Things here that that we need to consider before doing that. Do you mind rewriting several thousand lines of code?
00:18:16 [W] Also, I've liked the way that it's become the hips had become a form of documentation so that we can point people toward a very definitive explanation of how how it is supposed to function what it's intended
00:18:31 [W] we'll leave that one of the things we're going to notice in the future about this is that hips proved invaluable when we start dealing with bug reports and we're trying to figure out if the report is, you know should have been doing X according to the hip
00:18:47 [W] It wasn't or if it was really more of a like Sotto voce feature requests or something like that.
00:18:52 [W] So I think this is going to be a good thing for the community going forward because it's going to help give us not just assured Nats that we're doing the right things in the PRS, but also the benefit of being able to refer back to something in writing that's definitive.
00:19:08 [W] I was gonna say it also lets you for future maintainers, you know, one of the things when you come in to be a new maintainer on a project is you've got to figure out what's going on.
00:19:18 [W] Why are we doing things this way?
00:19:20 [W] What's the history behind it?
00:19:22 [W] Right because you may not know and I know that because I've stepped into more than one project after it's already been started and head understand.
00:19:29 [W] How did we get here?
00:19:30 [W] Why do we make those decisions and I'm reminded of a hip you're working on at butcher around crd s and the
00:19:37 [W] N points because we've had more than one go at how do we figure out and try to solve this?
00:19:41 [W] this and where are those hard spots so we can try to solve those hard problems while thinking through cases for people who aren't like me but are really relevant to the project.
00:19:53 [W] And another area where we're really seeing the hips work.
00:19:56 [W] work. Well, I think Bridget your hip number three is about to get merged or is already merged governance.
00:20:05 [W] Turns out you got to write it down and it's probably good to Think Through Your governance for your projects out there before you have a problem just Pro tip for Rita because
00:20:20 [W] You already jumped on that third rail of CRTs.
00:20:23 [W] Do you want to give us the short version of The Cliff Notes?
00:20:26 [W] What is going on with cri-o s and Helm and where do you think it's going so cri-o is are hard right?
00:20:35 [W] Because if you delete a CRT, it deletes all the custom resources in your cluster and that could cause production outages right imagine doing some kind of Helm uninstall because your app has an issue and next thing, you know.
00:20:49 [W] No, you deleted your cre and then all your custom resources are gone and then all the stuff got deleted from your cluster and not even just for you but maybe for other tenants and things there's really possible cascading problems.
00:21:03 [W] And so we're very cautious around crd handling because the gotchas to it can really hurt you.
00:21:10 [W] And so we're looking for ways to try to make it easier.
00:21:15 [W] We'll also trying to Shield the gotchas. And so if somebody wants to sit down and talk
00:21:19 [W] About that next feature.
00:21:21 [W] We're happy to walk through it and see will it help will it not does it is it require Helm for can we fit into Helm three But realize we took we're taking the conservative route because breaking production as Matt said earlier something
00:21:37 [W] We don't want to do and so we're being very cautious about it.
00:21:41 [W] But we do have a couple of different ways to handle cri-o is today that do take that cautious wrapped. But anything else is going to be very slow and work through and experimented on I think one thing that that we should explain about when we talk about the present
00:21:56 [W] Future is how seriously we try and take backward compatibility and Helm and following semantic versioning roles which which which suggest that you do not ever introduced a breaking change without incrementing the major version number of something so
00:22:11 [W] In many ways when we start talking about Helm for we have these dueling instincts where in fact it was Illustrated earlier in the talk right where we have these dueling instincts between looking at Helm for and saying finally I can fix that one
00:22:26 [W] function call that's had a best digital argument for the last eight months and you know those kind of minor things that in the grand scheme of things are minor, but because of our compatibility guarantees, we will not change until Helm for
00:22:41 [W] So we got those on one hand and then on the other hand are the things like the CRT problem are we're saying okay.
00:22:46 [W] This is a very big issue that is impacting many many users of a healthy ecosystem.
00:22:53 [W] We committed to something for Helm 3 and we're going to keep plugging away at that for Helm three, but does Helm for offer us some new chances to try something out there that we can't do today because it would break and this is where a lot
00:23:09 [W] The hip that I had worked on was saying look, we're stuck for helmet three it inside of these fairly narrow guardrails, but in Helm for if somebody can come up with a really intriguing way to work around many of these limitations in the system. We can kind of
00:23:24 [W] I think at that point and and you know work on Thousand line PRS that break interfaces and change the chart format things like that.
00:23:32 [W] I'm curious if either of you know of other ones like that that are big issues coming in Helm for where we could you know, potentially do something big with charts or with the indexing formats or how repositories work or things like that.
00:23:48 [W] Some of the things I think are coming in Helm three. Anyway, like there's the oci artifacts if the oci distribution spec goes 1.0 with artifacts support, then we can push and pull Helm
00:24:03 [W] Hearts from oci repositories, but that can be a Helm three thing and it's a future thing but it's not something that requires Helm for it's not a breaking change.
00:24:13 [W] That's good.
00:24:14 [W] That's good.
00:24:14 [W] That's good.
00:24:14 [W] That's good.
00:24:14 [W] That's good. Butcher.
00:24:16 [W] I know you were talking a little bit before about how we have these theoretical hips and pull requests coming in from some amorphous person.
00:24:28 [W] What does that look like? Like, how does somebody get involved?
00:24:32 [W] Yeah, and this is one of the things that I think has really changed over time to you know, taking that look all the way back to the beginning that you know, every every poll request was was immediately considered and you know within days
00:24:48 [W] We usually had been submerged but we've had to take a more metered approach now and hips are really really helpful.
00:24:54 [W] I'm really happy with the way they're going but it does change we've had to kind of redefine the way that we're asking for people to join the community and participate in the in the ongoing development of Helm because of that and you know on one hand, it's
00:25:10 [W] Really simple, right. There are we've added more templates to fill out when you file an issue to help us rapidly figure out what it is because the volume of the issues that comes in is high and many of them are answerable by reading the documentation.
00:25:24 [W] But when people don't find it in the documentation, they will file an issue which of course is fine, but it's meant that we've had to ask for, you know, lots and lots of different things to be filled in in those issue templates.
00:25:36 [W] always very helpful to us when people jump in on the issue,
00:25:39 [W] Shoo you and say oh I can also reproduce this.
00:25:43 [W] Here's some more detailed information about how I reproduced it.
00:25:46 [W] Whereas it's very unhelpful for people to say Me too with no additional context and it's been interesting how Reliant we are getting on the detailed analysis that our users are being able to provide that is fabulous and I
00:26:01 [W] I am thrilled whenever I see people following on and saying here are more details about how to reproduce this or even better.
00:26:08 [W] I traced it down into this area the code you might not be able to do the pr yourself but giving us detailed debugging information often will go will help us get from the point where we're saying.
00:26:17 [W] Oh, this is frustrating.
00:26:18 [W] don't have enough. I'll come back and look at it two weeks later when I go through my neck, sweep 200k. I've got enough that I can reproduce this now and get going.
00:26:28 [W] Yeah. Yeah, some of the bugs we get now are such Edge case bogs that it's something in a dependency of Helm that we pick up from kubernative A's that's only affected on a certain operating system and so us on a different operating system
00:26:43 [W] Primarily may not even experienced it and then trying to troubleshoot that and get an issue filed or pull request fixed somewhere in the chain. It can be difficult with some of those now.
00:26:55 [W] And a lot of Hell maintainers currently work at Cloud providers or vendors, but if we don't have a maintainer who we can tap to say take a look at the thing for your Cloud.
00:27:06 [W] Sometimes we just reach out to other members of the community in the kubernative community and Beyond and say, hey, it looks like this is a problem that is specifically affecting the users of your product can or you know your service. Can you take a look at it? And the community has been really responsive with that.
00:27:20 [W] So that's it's a always nice when you can get the warm handoff instead.
00:27:24 [W] The just go start over in some repo over there.
00:27:28 [W] We don't know like if you can get members and I have seen members of other communities come over into our issue and start talking to the user there and it's like, oh that's fantastic. Most people think of the helm client the helm CLI and it has the library that other things will
00:27:43 [W] Line two but we also have the website the charts maintainers.
00:27:47 [W] We have all kinds of tools for using GitHub actions to deploy your repository on GitHub Pages or for testing charts that goes more beyond what Helm test and how moment to and we've got a number of different
00:28:02 [W] Projects there's chart Museum and each one of these projects anybody can become a maintainer on once you're a maintainer.
00:28:10 [W] You don't just write code and push it up. You actually help other people be successful in contributing.
00:28:15 [W] And so we're looking for people across all of the code bases. We have who are interested in doing that and willing to and there can be things that aren't scary like the helm client and and aren't just code that can be docks and and other things as well.
00:28:31 [W] Yeah, I really appreciate that perspective because I think that tuck in general can often prioritize and Elevate the code contributions which are obviously important but as you're alluding to her are also not all of the everything's
00:28:46 [W] So butcher, I feel like you you mentioned a little bit before so I'm going to bring it back to the beginning you mentioned templating as something that maybe could change in the future and I thought spoiler alert. Okay.
00:29:01 [W] You're thinking about where Helm could go be futurist is strictly in terms of templating.
00:29:10 [W] I mean we have this chance again to revisit some of the crazier things we've talked about in the past.
00:29:15 [W] You know, we have talked about doing embedded runtimes Lua JavaScript webassembly something like that that can help build a chart. Dynamically, not off the table yet.
00:29:26 [W] Definitely know we've definitely haven't signed up for it yet, but there are some things like that that are really
00:29:31 [W] Really excite me that you know, we might be able to really push some boundaries in some interesting ways to really open it up for people to do some some deeper and more robust things with their charts as they're either rendering them or installing them.
00:29:47 [W] Fabulous and Farina.
00:29:48 [W] I'll ask you the same question because you mentioned security as a thing that we could do a lot in that space.
00:29:54 [W] What's your vision for that?
00:29:56 [W] Well, I'd like to experience, you know, the technology.
00:30:00 [W] I haven't figured out which is a hard thing to figure out especially if you break away from PG P, which is what's most widely known but a really easy way to sign and to verify and to share keys.
00:30:16 [W] It would be just a fantastic thing that may end up being notary version 2 which is trying to figure out some of the problems.
00:30:23 [W] we've got with notary version 1 and Roc I and our ability to use those Registries but being able to figure out how can we make it easy where somebody can sign without having to learn how to use new, you know gpg in order to sign and try to remember
00:30:38 [W] What those command line flags are right and I do it all the time and I still got to look him up.
00:30:43 [W] How can we make it simple and yet work with Hardware security and things like that because security is important. That would be a great thing to dig into.
00:30:53 [W] I love it.
00:30:54 [W] So let's let's wrap this with what we've learned that lets us give dispatches, you know from the future to people who are on this journey with their Cloud native projects and
00:31:09 [W] I'll start with it's a lot harder for us to deal with translations in our command line output that we also generate some Doc's from because that English is hard coded into the code and
00:31:24 [W] Being output by the helm binary itself.
00:31:28 [W] And so while we do have people translating the web site docks into you know, Japanese and Korean and Chinese currently and hopefully more languages if you're into that be awesome just translate a few pages.
00:31:42 [W] You don't have to translate the entire website, but the problem of oh gosh people are starting to roll up with translations that we can't currently put into the command line to Output.
00:31:53 [W] Put in language of choice and I don't have a solution to that.
00:31:57 [W] But that is a thorny problem that I would love to see us work on in the future.
00:32:01 [W] And if so, my advice to people who are on this path is be very careful about what is possible and not possible to localize because people are going to want to localize all sorts of things and places where they can't just think hard
00:32:17 [W] About where you can send them instead to Output the candy put in their language of choice instead of hard-coding English or whatever.
00:32:23 [W] Yeah.
00:32:25 [W] So Farina, what are you thinking along these lines? The thing that I keep coming back to is listening to our users, right?
00:32:34 [W] I think that's one of the biggest things that a project can do is listen to who your end users are and try to understand them, right? I remember coupon Cloud native cons several years ago.
00:32:46 [W] Where we literally had appointments with different end users and we sat down we just interviewed them and we listen to them and we took what they had to say, you know, what are they being successful with and where there are issues because you want to learn, you know, what would they like to do that?
00:33:00 [W] They can't do now and so I think as we you know other projects should do the same thing. I think every project that wants to be successful listening to your users and understanding them is so important.
00:33:11 [W] think I even as we roll into Helm version for spending a good amount of time sitting down and listening.
00:33:16 [W] To those users who rely on Helm will help us have more insight into where we should go and what we should do next.
00:33:25 [W] Well for a talk about the past present and future I suppose it fits in well to say I feel like I have come full circle on something here early on we were we were obsessed with this with the user story of getting somebody started in kubernative.
00:33:40 [W] Moving fast very it conceptually difficult and we wanted Helm to be the way you got from zero to your first kubernative installation in a couple of seconds right the helm to period and up into the up
00:33:55 [W] The mid Helm 3. Now has largely been focused on solving a whole bunch of other problems around that but now what we're experiencing is a huge influx of new users to kubernative and kubernative is not any simpler.
00:34:09 [W] It's actually far more complicated than it was several years ago.
00:34:12 [W] So once again, the thing that I find myself feeling most passionate about is can we keep making Helm or even improve this story for Helm for that first experience coming to kubernative and
00:34:25 [W] and getting that first installation done in a few seconds and then using that installation as a springboard to understanding what's actually going on in kubernative.
00:34:34 [W] He's how pieces fit together and how they work and I feel like we got to leave it at that and say this is a community that is interested in you come talk to us.
00:34:45 [W] We have all sorts of community engagement opportunities and we'll see you on GitHub.
